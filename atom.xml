<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Amy Gao</title>
  <subtitle>keep fighting</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-03-14T07:39:38.512Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Amy Gao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Vue原理解析</title>
    <link href="http://yoursite.com/2018/03/13/vue%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/"/>
    <id>http://yoursite.com/2018/03/13/vue原理解析/</id>
    <published>2018-03-12T16:00:00.000Z</published>
    <updated>2018-03-14T07:39:38.512Z</updated>
    
    <content type="html"><![CDATA[<h1 id="双向数据绑定"><a href="#双向数据绑定" class="headerlink" title="双向数据绑定"></a>双向数据绑定</h1><p>双向数据绑定的核心是： observer   Dep   Watcher</p>
<pre><code>+ observer 是一个类，每一个prop和data中都有，他会通过执行 DefinedReactive 给其附属的对象及其子属性，建立 get 和 set 方法。(definedReactive实质上是通过 Object.defineProperty 将每个属性进行包装包装)
+  Dep 会存放所有的 Watcher，每个data和prop都有自己的Dep实例。当数据发生改变时，会notify属性的watch，当watcher去访问属性时，Dep.target属性指向访问的watcher
+  Watcher 可以watch一个方法或者 一个属性。先收集依赖，值改变时，触发callback &apos;expOrFn&apos;。‘expOnFn’可以看做是 Watcher的Getter
</code></pre><h1 id="Vuex"><a href="#Vuex" class="headerlink" title="Vuex"></a>Vuex</h1><pre><code>+ mutation 对 state 进行状态的修改。commit方法是mutation的内核。dispatch 是 action的内核
</code></pre><h1 id="一：数据更新-virtual-DOM"><a href="#一：数据更新-virtual-DOM" class="headerlink" title="一：数据更新 virtual DOM"></a>一：数据更新 virtual DOM</h1><ul>
<li>1.在react中，当有数据发生变化时，会构造新的 React DOM Tree，发生变化的属性值会对此节点进行标注，然后通过一系列diff算法，新旧DOM tree 进行对比，更新渲染完毕。</li>
<li>2：通过事件改变属性值时，此节点会被标记成脏节点，事件处理完成后，react会找到所有脏节点，并重新渲染。</li>
<li>3: vue 的精髓就是 响应式数据流。</li>
<li>4：react和Vue本质上都是借助 virtual DOM 帮助开发者管理DOM</li>
</ul>
<h1 id="二、Vue部分生命周期和钩子函数"><a href="#二、Vue部分生命周期和钩子函数" class="headerlink" title="二、Vue部分生命周期和钩子函数"></a>二、Vue部分生命周期和钩子函数</h1><ul>
<li>1、beforeCreated  组件刚创建，data和el都没有创建</li>
<li>2、created data完成初始化，el还没挂在</li>
<li>3、 beforeMounted  data和el完成初始化  。(此时，DOM中，msg的位置在virtualDOM中已经被占用了，到mounted挂载之后，直接填坑，将数据填进去)</li>
<li>4、mounted  data 和 el 都完成了挂载</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;双向数据绑定&quot;&gt;&lt;a href=&quot;#双向数据绑定&quot; class=&quot;headerlink&quot; title=&quot;双向数据绑定&quot;&gt;&lt;/a&gt;双向数据绑定&lt;/h1&gt;&lt;p&gt;双向数据绑定的核心是： observer   Dep   Watcher&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;+ 
    
    </summary>
    
      <category term="Vue" scheme="http://yoursite.com/categories/Vue/"/>
    
    
  </entry>
  
  <entry>
    <title>ES6 Promise</title>
    <link href="http://yoursite.com/2018/03/13/ES6%20Promise/"/>
    <id>http://yoursite.com/2018/03/13/ES6 Promise/</id>
    <published>2018-03-12T16:00:00.000Z</published>
    <updated>2018-03-14T11:28:34.861Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-Promise定义"><a href="#1-Promise定义" class="headerlink" title="1 Promise定义"></a>1 Promise定义</h2><p>Promise是一种异步编程的解决方案,是一个对象(构造函数),从该对象可以获取异步操作的消息</p>
<p>Promise对象的特点</p>
<p>（1）对象的状态不受外界影响。<code>Promise</code>对象代表一个异步操作，有三种状态：<code>Pending</code>（进行中）、<code>Resolved</code>（已完成，又称 Fulfilled）和<code>Rejected</code>（已失败）。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。这也是<code>Promise</code>这个名字的由来，它的英语意思就是“承诺”，表示其他手段无法改变。</p>
<p>（2）一旦状态改变，就不会再变，任何时候都可以得到这个结果。<code>Promise</code>对象的状态改变，只有两种可能：从<code>Pending</code>变为<code>Resolved</code>和从<code>Pending</code>变为<code>Rejected</code>。只要这两种情况发生，状态就凝固了，不会再变了，会一直保持这个结果。如果改变已经发生了，你再对Promise对象添加回调函数，也会立即得到这个结果。这与事件（Event）完全不同，事件的特点是，如果你错过了它，再去监听，是得不到结果的。</p>
<p>缺点</p>
<p>(1) 首先，无法取消<code>Promise</code>，一旦新建它就会立即执行，无法中途取消。</p>
<p>(2) 当新建<code>promise</code>对象的时候,<code>Promise</code>里面必须传入回调函数,否则内部会抛出错误<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var promise = new Promise()  //报错</div></pre></td></tr></table></figure></p>
<p>(3) 当处于<code>Pendding</code>状态的时候,无法确切知道处于哪个阶段的状态</p>
<p>我们可以打印出来看下有什么</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">console.dir(Promise);</div><div class="line">//我们可以看到起原型上有 then 和catch等方法</div><div class="line">// var promise = new Promise();  Promise是一个构造函数,构造函数中必须传入一个函数作为参数,否则会报错</div><div class="line">var promise = new Promise(function(resolve,reject)&#123;</div><div class="line">  console.log(arguments);//</div><div class="line">  // resolve();</div><div class="line">  reject();</div><div class="line">&#125;)</div><div class="line">console.log(promise);</div><div class="line">//promise实例上有如下属性 </div><div class="line">Promise</div><div class="line">[[PromiseStatus]]:&quot;resolved&quot;</div><div class="line">[[PromiseValue]]:undefined</div></pre></td></tr></table></figure>
<h2 id="2-基本使用-Promise是一个构造函数-该构造函数接受一个函数作为参数-必须的"><a href="#2-基本使用-Promise是一个构造函数-该构造函数接受一个函数作为参数-必须的" class="headerlink" title="2 基本使用 Promise是一个构造函数,该构造函数接受一个函数作为参数(必须的)"></a>2 基本使用 Promise是一个构造函数,该构造函数接受一个函数作为参数(必须的)</h2><p>写在前面,promise对象创建的时候立即执行&gt;同步&gt;异步&gt;回调函数<br>接受的函数中又有两个函数作为参数,</p>
<ul>
<li>Promise构造函数中必须有一个函数作为构造函数的参数,作为参数的函数的参数有两个函数</li>
<li>一个是resolve函数,在异步操作成功的时候执行该函数,将Pendding状态改变为Resolved</li>
<li>一个是reject函数,在异步操作失败的时候执行该函数,将Pendding状态改变为Rejected</li>
<li>创建promise对象之后,根据异步操作成功与否,调用resolve或者reject函数,改变状态的结果,then方法会根据改变的状态结果调用响应的回调函数,then方法接受两个函数,<ul>
<li>第一个函数在Resolved状态的时候执行</li>
<li>第二个函数在Rejected状态的时候执行<br>基本的实现思路是<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">var promise = new Promise(function(resolve, reject) &#123;</div><div class="line">  // ... some code</div><div class="line">  if (/* 异步操作成功 */)&#123;</div><div class="line">    resolve(value);</div><div class="line">  &#125; else &#123;</div><div class="line">    reject(error);</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line">promise.then(function(value) &#123;</div><div class="line">  // success</div><div class="line">&#125;, function(error) &#123;</div><div class="line">  // failure</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<p>如下demo所示<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">var promise = new Promise(function(resolve,reject)&#123;</div><div class="line">            console.log(&apos;promise对象创建之后立即执行&apos;);</div><div class="line">            // resolve();</div><div class="line">            // rejecte();</div><div class="line">            </div><div class="line">        &#125;)</div><div class="line">       console.log(&apos;helloWorld&apos;);</div><div class="line">        promise.then(function()&#123;</div><div class="line">            console.log(&apos;this is the status of Resolved&apos;);</div><div class="line">            </div><div class="line">        &#125;,function()&#123;</div><div class="line">            console.log(&apos;this is the status of Rejected&apos;);</div><div class="line">            </div><div class="line">        &#125;)</div></pre></td></tr></table></figure></p>
<ul>
<li><p>当打开resolve()的注释的时候,改变了promise实例的状态,触发then函数中的第一个回调函数的执行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">promise对象创建之后立即执行</div><div class="line">helloWorld</div><div class="line">this is the status of Resolved</div></pre></td></tr></table></figure>
</li>
<li><p>当打开reject()的注释的时候,改变了promise实例的状态,触发then函数中的第二个回调函数的执行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">promise对象创建之后立即执行</div><div class="line">helloWorld</div><div class="line">this is the status of Rejected</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="3-实例化一个Promise对象的时候传入Promise构造函数的参数是一个函数-该函数立即执行"><a href="#3-实例化一个Promise对象的时候传入Promise构造函数的参数是一个函数-该函数立即执行" class="headerlink" title="3 实例化一个Promise对象的时候传入Promise构造函数的参数是一个函数,该函数立即执行"></a>3 实例化一个Promise对象的时候传入Promise构造函数的参数是一个函数,该函数立即执行</h2><p>内部实现大概是这个样子的,我猜 ; 所以才会有上面的输处顺序<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  function foo(f1)&#123;</div><div class="line">  f1()</div><div class="line">&#125;</div><div class="line">new foo(function()&#123;</div><div class="line">  console.log(&apos;f1 is exected&apos;);</div><div class="line">&#125;);</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure></p>
<h2 id="4-如果-resolve-或者-reject-函数执行的时候有参数-那么参数会传递给then方法中相应的回调函数"><a href="#4-如果-resolve-或者-reject-函数执行的时候有参数-那么参数会传递给then方法中相应的回调函数" class="headerlink" title="4 如果 resolve 或者 reject 函数执行的时候有参数,那么参数会传递给then方法中相应的回调函数"></a>4 如果 resolve 或者 reject 函数执行的时候有参数,那么参数会传递给then方法中相应的回调函数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  var promise = new Promise((resolve,reject)=&gt;&#123;</div><div class="line">    var res = &apos;RES&apos;;</div><div class="line">    var rej = &apos;REJ&apos;;</div><div class="line">    resolve(res); </div><div class="line">    reject(rej);</div><div class="line">  &#125;)</div><div class="line">  promise.then(value =&gt; &#123;</div><div class="line">    console.log(&apos;这是通过resolve函数传递过来的参数&apos;,value);</div><div class="line">     &#125;,value =&gt; &#123;console.log(&apos;这是通过reject函数传递过来的参数&apos;,value);</div><div class="line">  &#125;)</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<p>另外,一般而言reject函数的参数一般是一个ERROR对象的实例,resolve函数的参数也可能是另外一个Promise对象的实例</p>
<p>先看下面一段代码,</p>
<p>如果promise对象不是另外一个promise对象的resolve函数的参数,那么promise实例 p1 p2的状态互不影响<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">       var p1 = new Promise(function(resolve,reject)&#123;</div><div class="line">       &#125;)</div><div class="line">       var p2 = new Promise(function(resolve,reject)&#123;</div><div class="line">           resolve() ;</div><div class="line">       &#125;)</div><div class="line">       console.log(&apos;p1&apos;,p1); //p1 Pendding</div><div class="line">       console.log(&apos;p2&apos;,p2);//p2 Resolved</div><div class="line"></div><div class="line">   &lt;/script&gt;</div></pre></td></tr></table></figure></p>
<p>但是如果promise实例是另外一个promise对象的resolve的参数的话,那么promise实例将会和resolve参数的promise对象的状态保持一致<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">        var p1 = new Promise(function(resolve,reject)&#123;</div><div class="line">    		//此时p1对象的状态是Pendding</div><div class="line">        &#125;)</div><div class="line">        var p2 = new Promise(function(resolve,reject)&#123;</div><div class="line">            resolve(p1) ; //将p1对象作为resolve函数的参数</div><div class="line">        &#125;)</div><div class="line">        console.log(&apos;p1&apos;,p1);//p1 Pendding</div><div class="line">        console.log(&apos;p2&apos;,p2);//p2 Pendding</div><div class="line">        </div><div class="line">    &lt;/script&gt;</div><div class="line">改变p1对象的状态</div><div class="line"></div><div class="line">&lt;script&gt;</div><div class="line">        var p1 = new Promise(function(resolve,reject)&#123;</div><div class="line">            resolve();//此时p1对象的状态是Resolved</div><div class="line">        &#125;)</div><div class="line">        var p2 = new Promise(function(resolve,reject)&#123;</div><div class="line">            resolve(p1) ;</div><div class="line">        &#125;)</div><div class="line">        console.log(&apos;p1&apos;,p1);//p1 Resolved</div><div class="line">        console.log(&apos;p2&apos;,p2);//p2 Resolved</div><div class="line">        </div><div class="line">    &lt;/script&gt;</div><div class="line">&lt;script&gt;</div><div class="line">       var p1 = new Promise(function(resolve,reject)&#123;</div><div class="line">           // resolve();</div><div class="line">           reject();</div><div class="line">       &#125;)</div><div class="line">       var p2 = new Promise(function(resolve,reject)&#123;</div><div class="line">           resolve(p1) ;</div><div class="line">       &#125;)</div><div class="line">       console.log(&apos;p1&apos;,p1);</div><div class="line">       console.log(&apos;p2&apos;,p2);</div><div class="line"></div><div class="line">   &lt;/script&gt;</div></pre></td></tr></table></figure></p>
<h2 id="5-Promise-prototype-then-Promise-prototype-catch"><a href="#5-Promise-prototype-then-Promise-prototype-catch" class="headerlink" title="5 Promise.prototype.then Promise.prototype.catch"></a>5 Promise.prototype.then Promise.prototype.catch</h2><ul>
<li>then方法是定义在Prototype构造函数原型上的一个方法</li>
<li>该方法接受两个函数作为参数<ul>
<li>第一个参数函数在promise实例状态变为Resolved的时候会执行</li>
<li>第二个参数函数在promise实例状态变为Rejected的时候会执行</li>
</ul>
</li>
<li>该方法返回值是 另外一个promise对象</li>
<li>catch方法:当一个Promise实例的状态变为Rejected的时候会调用catch方法里面的回调函数<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">        var p = new Promise(function(resolve,reject)&#123;</div><div class="line">            resolve()</div><div class="line">        &#125;)</div><div class="line">        var ret = p.then(function()&#123;</div><div class="line">            console.log(&apos;this is the status of Resolved&apos;);  </div><div class="line">        &#125;)</div><div class="line">        console.log(ret);//Promise对象</div><div class="line">        </div><div class="line">    &lt;/script&gt;</div><div class="line">&lt;script&gt;</div><div class="line">    var p = new Promise((resolve,reject)=&gt;&#123;</div><div class="line">        reject();</div><div class="line">    &#125;)</div><div class="line">    p.catch(function()&#123;</div><div class="line">        console.log(&apos;REJECTED&apos;);    </div><div class="line">    &#125;)</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>then链式调用的时候,then函数的返回值,会作为第下一个then函数中第一个参数函数的参数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">var p = new Promise(function(resolve,reject)&#123;</div><div class="line">  resolve()</div><div class="line">&#125;)</div><div class="line">var ret = p.then(function()&#123;</div><div class="line">  console.log(&apos;this is the status of Resolved&apos;);</div><div class="line">  return 2  // false 或者不返回值,此时val的值将是undefined</div><div class="line">&#125;,function()&#123;</div><div class="line">  console.log(&apos;resolve&apos;)</div><div class="line">&#125;).then(function(val)&#123;</div><div class="line">  console.log(&apos;inner Resolved&apos;);</div><div class="line">  console.log(val) //2 false  undefined</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"> var test =&#123;</div><div class="line">	func1:function()&#123;</div><div class="line">		var data = new Promise(function(resolve)&#123;</div><div class="line">			setTimeout(function()&#123;</div><div class="line">				resolve(&quot;ajax结果111&quot;)</div><div class="line">			&#125;,200)</div><div class="line">		&#125;)</div><div class="line">		return data;</div><div class="line">	&#125;,</div><div class="line">	func2:function()&#123;</div><div class="line">		var data = new Promise(function(resolve)&#123;</div><div class="line">			setTimeout(function()&#123;</div><div class="line">				resolve(&quot;ajax结果222&quot;)</div><div class="line">			&#125;,100)</div><div class="line">		&#125;)</div><div class="line">		return data;</div><div class="line">	&#125;,</div><div class="line">	func3:function()&#123;</div><div class="line">		var data = new Promise(function(resolve)&#123;</div><div class="line">			setTimeout(function()&#123;</div><div class="line">				resolve(&quot;ajax结果333&quot;)</div><div class="line">			&#125;,500)</div><div class="line">		&#125;)</div><div class="line">		return data;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">//resolve函数的参数将会作为then函数中第一个函数的参数</div><div class="line">test.func1().then(function(value)&#123;</div><div class="line">	console.log(value)</div><div class="line">	//do something...</div><div class="line">&#125;)</div><div class="line">//then的链式调用前奏</div><div class="line">test.func1().then(function(value)&#123;</div><div class="line">	console.log(value) //ajax结果111</div><div class="line">	test.func2().then(function(value)&#123;</div><div class="line">		console.log(value) //ajax结果2</div><div class="line">		test.func3().then(function(value)&#123;</div><div class="line">			console.log(value) //ajax结果333</div><div class="line">			//do something...</div><div class="line">		&#125;)</div><div class="line">	&#125;)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>使用return可以更加方便的进行链式调用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">test.func1().then(function(value)&#123;</div><div class="line">	console.log(value)</div><div class="line">	//do something...</div><div class="line">	return test.func2();</div><div class="line">&#125;).then(function(value)&#123;</div><div class="line">	console.log(value)</div><div class="line">	return test.func3();</div><div class="line">&#125;).then(function(value)&#123;</div><div class="line">	console.log(value)</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-Promise定义&quot;&gt;&lt;a href=&quot;#1-Promise定义&quot; class=&quot;headerlink&quot; title=&quot;1 Promise定义&quot;&gt;&lt;/a&gt;1 Promise定义&lt;/h2&gt;&lt;p&gt;Promise是一种异步编程的解决方案,是一个对象(构造函数),从该
    
    </summary>
    
      <category term="ES6" scheme="http://yoursite.com/categories/ES6/"/>
    
    
      <category term="Promise" scheme="http://yoursite.com/tags/Promise/"/>
    
  </entry>
  
  <entry>
    <title>Promise源码分析</title>
    <link href="http://yoursite.com/2018/03/10/Promise%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    <id>http://yoursite.com/2018/03/10/Promise源码分析/</id>
    <published>2018-03-10T02:17:04.000Z</published>
    <updated>2018-03-14T11:11:25.265Z</updated>
    
    <content type="html"><![CDATA[<p>本文转载至 <a href="https://mp.weixin.qq.com/s/gDCPwMnKkAgbFWo6R6PRpw" target="_blank" rel="external">https://mp.weixin.qq.com/s/gDCPwMnKkAgbFWo6R6PRpw</a></p>
<h2 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h2><p>为了让大家更容易理解，我们从一个场景开始讲解，让大家一步一步跟着思路思考，相信你一定会更容易看懂。</p>
<p>考虑下面一种获取用户id的请求处理<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">//例1</div><div class="line">function getUserId() &#123;</div><div class="line"></div><div class="line">    return new Promise(function(resolve) &#123;</div><div class="line">        //异步请求</div><div class="line">        http.get(url, function(results) &#123;</div><div class="line"></div><div class="line">            resolve(results.id)</div><div class="line">        &#125;)</div><div class="line">    &#125;)</div><div class="line">&#125;</div><div class="line">getUserId().then(function(id) &#123;</div><div class="line">    //一些处理</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>getUserId方法返回一个promise，可以通过它的then方法注册(注意注册这个词)在promise异步操作成功时执行的回调。这种执行方式，使得异步调用变得十分顺手。</p>
<h2 id="原理剖析"><a href="#原理剖析" class="headerlink" title="原理剖析"></a>原理剖析</h2><p>那么类似这种功能的Promise怎么实现呢？其实按照上面一句话，实现一个最基础的雏形还是很easy的。<br>极简promise雏形<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">function Promise(fn) &#123;</div><div class="line">    var value = null,</div><div class="line">    callbacks = [];  //callbacks为数组，因为可能同时有很多个回调</div><div class="line">    this.then = function (onFulfilled) &#123;</div><div class="line">        callbacks.push(onFulfilled);</div><div class="line">    &#125;;</div><div class="line">    function resolve(value) &#123;</div><div class="line">        callbacks.forEach(function (callback) &#123;</div><div class="line">            callback(value);</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">    fn(resolve);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>上述代码很简单，大致的逻辑是这样的：</p>
<ul>
<li>调用then方法，将想要在Promise异步操作成功时执行的回调放入callbacks队列，其实也就是注册回调函数，可以向观察者模式方向思考；</li>
<li>创建Promise实例时传入的函数会被赋予一个函数类型的参数，即resolve，它接收一个参数value，代表异步操作返回的结果，当一步操作执行成功后，用户会调用resolve方法，这时候其实真正执行的操作是将callbacks队列中的回调一一执行；</li>
</ul>
<p>可以结合例1中的代码来看，首先new Promise时，传给promise的函数发送异步请求，接着调用promise对象的then属性，注册请求成功的回调函数，然后当异步请求发送成功时，调用resolve(results.id)方法, 该方法执行then方法注册的回调数组。</p>
<p>相信仔细的人应该可以看出来，then方法应该能够链式调用，但是上面的最基础简单的版本显然无法支持链式调用。想让then方法支持链式调用，其实也是很简单的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">this.then = function (onFulfilled) &#123;</div><div class="line">    callbacks.push(onFulfilled);</div><div class="line">    return this;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>see?只要简单一句话就可以实现类似下面的链式调用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">// 例2</div><div class="line">getUserId().then(function (id) &#123;</div><div class="line">    // 一些处理</div><div class="line">&#125;).then(function (id) &#123;</div><div class="line">    // 一些处理</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<h2 id="加入延时机制"><a href="#加入延时机制" class="headerlink" title="加入延时机制"></a>加入延时机制</h2><p>细心的同学应该发现，上述代码可能还存在一个问题：如果在then方法注册回调之前，resolve函数就执行了，怎么办？比如promise内部的函数是同步函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">// 例3</div><div class="line">function getUserId() &#123;</div><div class="line">    return new Promise(function (resolve) &#123;</div><div class="line">        resolve(9876);</div><div class="line">    &#125;);</div><div class="line">&#125;</div><div class="line">getUserId().then(function (id) &#123;</div><div class="line">    // 一些处理</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>这显然是不允许的，Promises/A+规范明确要求回调需要通过异步方式执行，用以保证一致可靠的执行顺序。因此我们要加入一些处理，保证在resolve执行之前，then方法已经注册完所有的回调。我们可以这样改造下resolve函数:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">function resolve(value) &#123;</div><div class="line">    setTimeout(function() &#123;</div><div class="line">        callbacks.forEach(function (callback) &#123;</div><div class="line">            callback(value);</div><div class="line">        &#125;);</div><div class="line">    &#125;, 0)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>上述代码的思路也很简单，就是通过setTimeout机制，将resolve中执行回调的逻辑放置到JS任务队列末尾，以保证在resolve执行时，then方法的回调函数已经注册完成.</p>
<p>但是，这样好像还存在一个问题，可以细想一下：如果Promise异步操作已经成功，这时，在异步操作成功之前注册的回调都会执行，但是在Promise异步操作成功这之后调用的then注册的回调就再也不会执行了，这显然不是我们想要的。</p>
<h2 id="加入状态"><a href="#加入状态" class="headerlink" title="加入状态"></a>加入状态</h2><p>恩，为了解决上一节抛出的问题，我们必须加入状态机制，也就是大家熟知的pending、fulfilled、rejected。</p>
<p>Promises/A+规范中的2.1Promise States中明确规定了，pending可以转化为fulfilled或rejected并且只能转化一次，也就是说如果pending转化到fulfilled状态，那么就不能再转化到rejected。并且fulfilled和rejected状态只能由pending转化而来，两者之间不能互相转换。<br>改进后的代码是这样的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">function Promise(fn) &#123;</div><div class="line">    var state = &apos;pending&apos;,</div><div class="line">        value = null,</div><div class="line">        callbacks = [];</div><div class="line">    this.then = function (onFulfilled) &#123;</div><div class="line">        if (state === &apos;pending&apos;) &#123;</div><div class="line">            callbacks.push(onFulfilled);</div><div class="line">            return this;</div><div class="line">        &#125;</div><div class="line">        onFulfilled(value);</div><div class="line">        return this;</div><div class="line">    &#125;;</div><div class="line">    function resolve(newValue) &#123;</div><div class="line">        value = newValue;</div><div class="line">        state = &apos;fulfilled&apos;;</div><div class="line">        setTimeout(function () &#123;</div><div class="line">            callbacks.forEach(function (callback) &#123;</div><div class="line">                callback(value);</div><div class="line">            &#125;);</div><div class="line">        &#125;, 0);</div><div class="line">    &#125;</div><div class="line">    fn(resolve);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>上述代码的思路是这样的：resolve执行时，会将状态设置为fulfilled，在此之后调用then添加的新回调，都会立即执行。</p>
<p>这里没有任何地方将state设为rejected，为了让大家聚焦在核心代码上，这个问题后面会有一小节专门加入。</p>
<h2 id="链式Promise"><a href="#链式Promise" class="headerlink" title="链式Promise"></a>链式Promise</h2><p>那么这里问题又来了，如果用户再then函数里面注册的仍然是一个Promise，该如何解决？比如下面的例4：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">// 例4</div><div class="line">getUserId()</div><div class="line">    .then(getUserJobById)</div><div class="line">    .then(function (job) &#123;</div><div class="line">        // 对job的处理</div><div class="line">    &#125;);</div><div class="line">function getUserJobById(id) &#123;</div><div class="line">    return new Promise(function (resolve) &#123;</div><div class="line">        http.get(baseUrl + id, function(job) &#123;</div><div class="line">            resolve(job);</div><div class="line">        &#125;);</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这种场景相信用过promise的人都知道会有很多，那么类似这种就是所谓的链式Promise。</p>
<p>链式Promise是指在当前promise达到fulfilled状态后，即开始进行下一个promise（后邻promise）。那么我们如何衔接当前promise和后邻promise呢？（这是这里的难点）。</p>
<p>其实也不是辣么难，只要在then方法里面return一个promise就好啦。Promises/A+规范中的2.2.7就是这么说哒(微笑脸)~</p>
<p>下面来看看这段暗藏玄机的then方法和resolve方法改造代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">function Promise(fn) &#123;</div><div class="line">    var state = &apos;pending&apos;,</div><div class="line">        value = null,</div><div class="line">        callbacks = [];</div><div class="line">    this.then = function (onFulfilled) &#123;</div><div class="line">        return new Promise(function (resolve) &#123;</div><div class="line">            handle(&#123;</div><div class="line">                onFulfilled: onFulfilled || null,</div><div class="line">                resolve: resolve</div><div class="line">            &#125;);</div><div class="line">        &#125;);</div><div class="line">    &#125;;</div><div class="line">    function handle(callback) &#123;</div><div class="line">        if (state === &apos;pending&apos;) &#123;</div><div class="line">            callbacks.push(callback);</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line">        //如果then中没有传递任何东西</div><div class="line">        if(!callback.onResolved) &#123;</div><div class="line">            callback.resolve(value);</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line">        var ret = callback.onFulfilled(value);</div><div class="line">        callback.resolve(ret);</div><div class="line">    &#125;</div><div class="line">    function resolve(newValue) &#123;</div><div class="line">        if (newValue &amp;&amp; (typeof newValue === &apos;object&apos; || typeof newValue === &apos;function&apos;)) &#123;</div><div class="line">            var then = newValue.then;</div><div class="line">            if (typeof then === &apos;function&apos;) &#123;</div><div class="line">                then.call(newValue, resolve);</div><div class="line">                return;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        state = &apos;fulfilled&apos;;</div><div class="line">        value = newValue;</div><div class="line">        setTimeout(function () &#123;</div><div class="line">            callbacks.forEach(function (callback) &#123;</div><div class="line">                handle(callback);</div><div class="line">            &#125;);</div><div class="line">        &#125;, 0);</div><div class="line">    &#125;</div><div class="line">    fn(resolve);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>我们结合例4的代码，分析下上面的代码逻辑，为了方便阅读，我把例4的代码贴在这里：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">// 例4</div><div class="line">getUserId()</div><div class="line">    .then(getUserJobById)</div><div class="line">    .then(function (job) &#123;</div><div class="line">        // 对job的处理</div><div class="line">    &#125;);</div><div class="line">function getUserJobById(id) &#123;</div><div class="line">    return new Promise(function (resolve) &#123;</div><div class="line">        http.get(baseUrl + id, function(job) &#123;</div><div class="line">            resolve(job);</div><div class="line">        &#125;);</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>then方法中，创建并返回了新的Promise实例，这是串行Promise的基础，并且支持链式调用。<br>handle方法是promise内部的方法。then方法传入的形参onFulfilled以及创建新Promise实例时传入的resolve均被push到当前promise的callbacks队列中，这是衔接当前promise和后邻promise的关键所在（这里一定要好好的分析下handle的作用）。</p>
<p>getUserId生成的promise（简称getUserId promise）异步操作成功，执行其内部方法resolve，传入的参数正是异步操作的结果id</p>
<p>调用handle方法处理callbacks队列中的回调：getUserJobById方法，生成新的promise（getUserJobById promise）</p>
<p>执行之前由getUserId promise的then方法生成的新promise(称为bridge promise)的resolve方法，传入参数为getUserJobById promise。这种情况下，会将该resolve方法传入getUserJobById promise的then方法中，并直接返回。</p>
<p>在getUserJobById promise异步操作成功时，执行其callbacks中的回调：getUserId bridge promise中的resolve方法</p>
<p>最后执行getUserId bridge promise的后邻promise的callbacks中的回调。</p>
<h2 id="失败处理"><a href="#失败处理" class="headerlink" title="失败处理"></a>失败处理</h2><p>在异步操作失败时，标记其状态为rejected，并执行注册的失败回调:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">//例5</div><div class="line">function getUserId() &#123;</div><div class="line">    return new Promise(function(resolve) &#123;</div><div class="line">        //异步请求</div><div class="line">        http.get(url, function(error, results) &#123;</div><div class="line">            if (error) &#123;</div><div class="line">                reject(error);</div><div class="line">            &#125;</div><div class="line">            resolve(results.id)</div><div class="line">        &#125;)</div><div class="line">    &#125;)</div><div class="line">&#125;</div><div class="line">getUserId().then(function(id) &#123;</div><div class="line">    //一些处理</div><div class="line">&#125;, function(error) &#123;</div><div class="line">    console.log(error)</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>有了之前处理fulfilled状态的经验，支持错误处理变得很容易,只需要在注册回调、处理状态变更上都要加入新的逻辑：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line">function Promise(fn) &#123;</div><div class="line">    var state = &apos;pending&apos;,</div><div class="line">        value = null,</div><div class="line">        callbacks = [];</div><div class="line">    this.then = function (onFulfilled, onRejected) &#123;</div><div class="line">        return new Promise(function (resolve, reject) &#123;</div><div class="line">            handle(&#123;</div><div class="line">                onFulfilled: onFulfilled || null,</div><div class="line">                onRejected: onRejected || null,</div><div class="line">                resolve: resolve,</div><div class="line">                reject: reject</div><div class="line">            &#125;);</div><div class="line">        &#125;);</div><div class="line">    &#125;;</div><div class="line">    function handle(callback) &#123;</div><div class="line">        if (state === &apos;pending&apos;) &#123;</div><div class="line">            callbacks.push(callback);</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line">        var cb = state === &apos;fulfilled&apos; ? callback.onFulfilled : callback.onRejected,</div><div class="line">            ret;</div><div class="line">        if (cb === null) &#123;</div><div class="line">            cb = state === &apos;fulfilled&apos; ? callback.resolve : callback.reject;</div><div class="line">            cb(value);</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line">        ret = cb(value);</div><div class="line">        callback.resolve(ret);</div><div class="line">    &#125;</div><div class="line">    function resolve(newValue) &#123;</div><div class="line">        if (newValue &amp;&amp; (typeof newValue === &apos;object&apos; || typeof newValue === &apos;function&apos;)) &#123;</div><div class="line">            var then = newValue.then;</div><div class="line">            if (typeof then === &apos;function&apos;) &#123;</div><div class="line">                then.call(newValue, resolve, reject);</div><div class="line">                return;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        state = &apos;fulfilled&apos;;</div><div class="line">        value = newValue;</div><div class="line">        execute();</div><div class="line">    &#125;</div><div class="line">    function reject(reason) &#123;</div><div class="line">        state = &apos;rejected&apos;;</div><div class="line">        value = reason;</div><div class="line">        execute();</div><div class="line">    &#125;</div><div class="line">    function execute() &#123;</div><div class="line">        setTimeout(function () &#123;</div><div class="line">            callbacks.forEach(function (callback) &#123;</div><div class="line">                handle(callback);</div><div class="line">            &#125;);</div><div class="line">        &#125;, 0);</div><div class="line">    &#125;</div><div class="line">    fn(resolve, reject);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>上述代码增加了新的reject方法，供异步操作失败时调用，同时抽出了resolve和reject共用的部分，形成execute方法。</p>
<p>错误冒泡是上述代码已经支持，且非常实用的一个特性。在handle中发现没有指定异步操作失败的回调时，会直接将bridge promise(then函数返回的promise，后同)设为rejected状态，如此达成执行后续失败回调的效果。这有利于简化串行Promise的失败处理成本，因为一组异步操作往往会对应一个实际功能，失败处理方法通常是一致的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">//例6</div><div class="line"></div><div class="line">getUserId()</div><div class="line">    .then(getUserJobById)</div><div class="line">    .then(function (job) &#123;</div><div class="line">        // 处理job</div><div class="line">    &#125;, function (error) &#123;</div><div class="line">        // getUserId或者getUerJobById时出现的错误</div><div class="line">        console.log(error);</div><div class="line">    &#125;);</div></pre></td></tr></table></figure></p>
<h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><p>细心的同学会想到：如果在执行成功回调、失败回调时代码出错怎么办？对于这类异常，可以使用try-catch捕获错误，并将bridge promise设为rejected状态。handle方法改造如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">function handle(callback) &#123;</div><div class="line">    if (state === &apos;pending&apos;) &#123;</div><div class="line">        callbacks.push(callback);</div><div class="line">        return;</div><div class="line">    &#125;</div><div class="line">    var cb = state === &apos;fulfilled&apos; ? callback.onFulfilled : callback.onRejected,</div><div class="line">        ret;</div><div class="line">    if (cb === null) &#123;</div><div class="line">        cb = state === &apos;fulfilled&apos; ? callback.resolve : callback.reject;</div><div class="line">        cb(value);</div><div class="line">        return;</div><div class="line">    &#125;</div><div class="line">    try &#123;</div><div class="line">        ret = cb(value);</div><div class="line">        callback.resolve(ret);</div><div class="line">    &#125; catch (e) &#123;</div><div class="line">        callback.reject(e);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>如果在异步操作中，多次执行resolve或者reject会重复处理后续回调，可以通过内置一个标志位解决。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>刚开始看promise源码的时候总不能很好的理解then和resolve函数的运行机理，但是如果你静下心来，反过来根据执行promise时的逻辑来推演，就不难理解了。这里一定要注意的点是：promise里面的then函数仅仅是注册了后续需要执行的代码，真正的执行是在resolve方法里面执行的，理清了这层，再来分析源码会省力的多。</p>
<p>现在回顾下Promise的实现过程，其主要使用了设计模式中的观察者模式：</p>
<ul>
<li><p>通过Promise.prototype.then和Promise.prototype.catch方法将观察者方法注册到被观察者Promise对象中，同时返回一个新的Promise对象，以便可以链式调用。</p>
</li>
<li><p>被观察者管理内部pending、fulfilled和rejected的状态转变，同时通过构造函数中传递的resolve和reject方法以主动触发状态转变和通知观察者。</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文转载至 &lt;a href=&quot;https://mp.weixin.qq.com/s/gDCPwMnKkAgbFWo6R6PRpw&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://mp.weixin.qq.com/s/gDCPwMnKkAgbF
    
    </summary>
    
      <category term="ES6" scheme="http://yoursite.com/categories/ES6/"/>
    
    
      <category term="Promise" scheme="http://yoursite.com/tags/Promise/"/>
    
  </entry>
  
  <entry>
    <title>Fetch请求</title>
    <link href="http://yoursite.com/2018/01/25/fetch%E8%AF%B7%E6%B1%82/"/>
    <id>http://yoursite.com/2018/01/25/fetch请求/</id>
    <published>2018-01-24T16:00:00.000Z</published>
    <updated>2018-03-14T11:10:42.356Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-一般的fetch用法"><a href="#1-一般的fetch用法" class="headerlink" title="1 一般的fetch用法"></a>1 一般的fetch用法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">fetch(url,option).then(<span class="function"><span class="params">response</span>=&gt;</span>&#123;</div><div class="line">  <span class="comment">//handle HTTP response</span></div><div class="line">&#125;).then(<span class="function"><span class="params">error</span>=&gt;</span>&#123;</div><div class="line">  <span class="comment">//handle HTTP error</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>具体的例子如下<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">fetch(url, &#123; <span class="comment">//option</span></div><div class="line">  method: <span class="string">"POST"</span>,</div><div class="line">  <span class="attr">body</span>: <span class="built_in">JSON</span>.stringify(data),</div><div class="line">  <span class="attr">headers</span>: &#123;</div><div class="line">    <span class="string">"Content-Type"</span>: <span class="string">"application/json"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">credentials</span>: <span class="string">"same-origin"</span></div><div class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;</div><div class="line">  response.status     <span class="comment">//=&gt; number 100–599</span></div><div class="line">  response.statusText <span class="comment">//=&gt; String</span></div><div class="line">  response.headers    <span class="comment">//=&gt; Headers</span></div><div class="line">  response.url        <span class="comment">//=&gt; String</span></div><div class="line">  <span class="keyword">return</span> response.text()</div><div class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</div><div class="line">  error.message <span class="comment">//=&gt; String</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<h2 id="2-参数解析"><a href="#2-参数解析" class="headerlink" title="2 参数解析"></a>2 参数解析</h2><h3 id="url-地址-‘-path’"><a href="#url-地址-‘-path’" class="headerlink" title="url 地址: ‘./path’"></a>url 地址: <code>‘./path’</code></h3><h3 id="option"><a href="#option" class="headerlink" title="option :"></a>option :</h3><ul>
<li>method (String) - HTTP request method. Default: <code>&quot;GET&quot;</code></li>
<li>body (String, body types) - HTTP request body</li>
<li>headers (Object, Headers) - Default: <code>{}</code></li>
<li><code>credentials</code> (String) - Authentication credentials mode. Default: <code>&quot;omit&quot;``&quot;omit&quot;</code> - don’t include authentication credentials (e.g. cookies) in the request <code>&quot;same-origin&quot;</code> - include credentials in requests to the same site <code>&quot;include&quot;</code> - include credentials in requests to all sites<h3 id="Response"><a href="#Response" class="headerlink" title="Response"></a>Response</h3>Response represents a HTTP response from the server. Typically a Response is not constructed manually, but is available as argument to the resolved promise callback.</li>
</ul>
<h3 id="Properties"><a href="#Properties" class="headerlink" title="Properties"></a>Properties</h3><ul>
<li><code>status</code> (number) - HTTP response code in the 100–599 range</li>
<li><code>statusText</code> (String) - Status text as reported by the server, e.g. “Unauthorized”</li>
<li><code>ok</code> (boolean) - True if status is HTTP 2xx</li>
<li>headers (Headers)</li>
<li><p>url (String)</p>
<h3 id="Body-methods-注意每个方法返回的都是一个Promise对象"><a href="#Body-methods-注意每个方法返回的都是一个Promise对象" class="headerlink" title="Body methods 注意每个方法返回的都是一个Promise对象,"></a>Body methods 注意每个方法返回的都是一个Promise对象,</h3><p>Each of the methods to access the response body returns a Promise that will be resolved when the associated data type is ready.</p>
</li>
<li><p><code>text()</code> - yields the response text as String</p>
</li>
<li><code>json()</code> - yields the result of JSON.parse(responseText)</li>
<li><code>blob()</code> - yields a Blob</li>
<li><code>arrayBuffer()</code> - yields an ArrayBuffer</li>
<li><code>ormData()</code> - yields FormData that can be forwarded to another request</li>
</ul>
<h3 id="Other-response-methods"><a href="#Other-response-methods" class="headerlink" title="Other response methods"></a>Other response methods</h3><ul>
<li><code>clone()</code></li>
<li><code>Response.error()</code></li>
<li><code>esponse.redirect()</code></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-一般的fetch用法&quot;&gt;&lt;a href=&quot;#1-一般的fetch用法&quot; class=&quot;headerlink&quot; title=&quot;1 一般的fetch用法&quot;&gt;&lt;/a&gt;1 一般的fetch用法&lt;/h2&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;tab
    
    </summary>
    
      <category term="ES6" scheme="http://yoursite.com/categories/ES6/"/>
    
    
  </entry>
  
  <entry>
    <title>Vue 中父子组件方法调用</title>
    <link href="http://yoursite.com/2017/09/12/vue%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2017/09/12/vue使用总结/</id>
    <published>2017-09-11T16:00:00.000Z</published>
    <updated>2018-03-14T11:11:37.622Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、父组件中调用子组件中的methods方法"><a href="#一、父组件中调用子组件中的methods方法" class="headerlink" title="一、父组件中调用子组件中的methods方法"></a>一、父组件中调用子组件中的methods方法</h2><ul>
<li>首先在父组件的子组件中标注 ref = “childMethod”</li>
<li>在 父组件中进行调用<code>this.$refs.childMethod.processQueue();</code></li>
<li>比如，在子组件中有一个方法 processQueue(){},我想在父组件中进行调用<h2 id="二、父组件向子组件传递参数"><a href="#二、父组件向子组件传递参数" class="headerlink" title="二、父组件向子组件传递参数"></a>二、父组件向子组件传递参数</h2></li>
<li><p>在子组件中，通过  props  来声明 他期待接收的数据</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</div><div class="line">     <span class="attr">props</span>:&#123;</div><div class="line">           <span class="attr">addFormVisible</span>:&#123;</div><div class="line">               <span class="attr">type</span>:<span class="built_in">Boolean</span>,</div><div class="line">               <span class="attr">default</span>:<span class="literal">false</span></div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line">       <span class="comment">// 或者</span></div><div class="line">       props:[<span class="string">'addFormVisible'</span>,<span class="string">'age'</span>] 等</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>在 父组件中，直接通过属性赋值即可<br><code>&lt;child addFormVisible = &quot;true&quot;&gt;&lt;/child&gt;</code></p>
</li>
</ul>
<h2 id="三、dropjs使用"><a href="#三、dropjs使用" class="headerlink" title="三、dropjs使用"></a>三、dropjs使用</h2><ul>
<li>手动上传事件：myDropzone.processQueue();</li>
<li>允许上传多个图片：uploadMultiple: true,</li>
<li>自动上传事件：autoProcessQueue: true,</li>
<li>默认每次上传的最多的张数：parallelUploads: 10,系统默认为2，改为了10</li>
</ul>
<h2 id="四、Vue中重新刷新当前页面"><a href="#四、Vue中重新刷新当前页面" class="headerlink" title="四、Vue中重新刷新当前页面"></a>四、Vue中重新刷新当前页面</h2><ul>
<li>使用路由的项目：this.$router.go(0);</li>
<li>未使用路由的项目：</li>
<li>window.location 中含有 ref 中的内容信息 window.location.reload();</li>
<li>直接 <code>location.href = &#39;index.html&#39;</code></li>
</ul>
<h2 id="五、Vue-中发送请求的方式"><a href="#五、Vue-中发送请求的方式" class="headerlink" title="五、Vue 中发送请求的方式"></a>五、Vue 中发送请求的方式</h2><h3 id="GET请求"><a href="#GET请求" class="headerlink" title="GET请求"></a>GET请求</h3><p>参数使用 params:param<br><code>this.$http.get(url,{params:param}).then(function(res),function(res))</code></p>
<h3 id="POST请求"><a href="#POST请求" class="headerlink" title="POST请求"></a>POST请求</h3><p><code>this.$http.post(url,{params:param},{emulateJSON:true}).then(function(res){},function(res){})</code><br>参数使用  data:param 发送请求</p>
<p>如果使用params:param传递参数，虽然是post请求，但是传递的参数仍然在URL上</p>
<p>使用data传输的数据，是以 <code>request payload</code>方式传递的，后台需要</p>
<p><code>public String getRequestPayload(HttpServletRequest req) {}</code>来获取里面的参数；</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、父组件中调用子组件中的methods方法&quot;&gt;&lt;a href=&quot;#一、父组件中调用子组件中的methods方法&quot; class=&quot;headerlink&quot; title=&quot;一、父组件中调用子组件中的methods方法&quot;&gt;&lt;/a&gt;一、父组件中调用子组件中的methods
    
    </summary>
    
      <category term="Vue" scheme="http://yoursite.com/categories/Vue/"/>
    
    
      <category term="Vue" scheme="http://yoursite.com/tags/Vue/"/>
    
      <category term="dropjs" scheme="http://yoursite.com/tags/dropjs/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2017/09/08/%E9%9A%8F%E6%89%8B%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2017/09/08/随手笔记/</id>
    <published>2017-09-08T01:16:47.000Z</published>
    <updated>2017-09-08T07:40:50.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="随手笔记"><a href="#随手笔记" class="headerlink" title="随手笔记"></a>随手笔记</h1><h2 id="1-e-的使用"><a href="#1-e-的使用" class="headerlink" title="1. e 的使用"></a>1. e 的使用</h2><ul>
<li>e.currentTarget 获取到鼠标当前所在的元素</li>
</ul>
<h2 id="2-vue-resource-发送-post请求"><a href="#2-vue-resource-发送-post请求" class="headerlink" title="2. vue-resource 发送 post请求"></a>2. vue-resource 发送 post请求</h2><ul>
<li>post请求发送表单数据，浏览器无法处理application/json 的请求，这是需要添加第三个参数， {emulationJSON:true}；这时请求会以 application/x-www-form-urlencoded作为 MIME TYPE 。就像普通的HTML一样。<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.$http.post(<span class="string">"/api/index.jsp?m=client&amp;c=serverDqylm&amp;a=saveInnowayGlobalApply"</span>,&#123;<span class="attr">params</span>:<span class="keyword">this</span>.formLabelAlign&#125;,&#123;<span class="attr">emulateJSON</span>:<span class="literal">true</span>&#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</div><div class="line">           <span class="built_in">console</span>.log(<span class="number">111</span>)</div><div class="line">         &#125;,<span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</div><div class="line">           <span class="built_in">console</span>.log(<span class="string">"error"</span>);</div><div class="line">         &#125;)</div><div class="line">         &#123;<span class="string">"firstName"</span>:<span class="string">""</span>,<span class="string">"lastName"</span>:<span class="string">""</span>,<span class="string">"title"</span>:<span class="string">""</span>,<span class="string">"company"</span>:<span class="string">""</span>,<span class="string">"email"</span>:<span class="string">""</span>,<span class="string">"tel"</span>:<span class="string">""</span>,<span class="string">"interests"</span>:<span class="number">1</span>,<span class="string">"desc"</span>:<span class="string">"dsfg"</span>&#125;</div></pre></td></tr></table></figure></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;随手笔记&quot;&gt;&lt;a href=&quot;#随手笔记&quot; class=&quot;headerlink&quot; title=&quot;随手笔记&quot;&gt;&lt;/a&gt;随手笔记&lt;/h1&gt;&lt;h2 id=&quot;1-e-的使用&quot;&gt;&lt;a href=&quot;#1-e-的使用&quot; class=&quot;headerlink&quot; title=&quot;1. 
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>配置Nginx反向代理</title>
    <link href="http://yoursite.com/2017/08/24/%E9%85%8D%E7%BD%AENginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/"/>
    <id>http://yoursite.com/2017/08/24/配置Nginx反向代理/</id>
    <published>2017-08-24T02:24:04.000Z</published>
    <updated>2018-03-14T06:57:41.254Z</updated>
    
    <content type="html"><![CDATA[<h1 id="配置Nginx反向代理"><a href="#配置Nginx反向代理" class="headerlink" title="配置Nginx反向代理"></a>配置Nginx反向代理</h1><h2 id="安装brew"><a href="#安装brew" class="headerlink" title="安装brew"></a>安装brew</h2><p> <code>ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</code></p>
<h2 id="安装Nginx"><a href="#安装Nginx" class="headerlink" title="安装Nginx"></a>安装Nginx</h2><p><code>brew install nginx</code></p>
<h2 id="启动Nginx"><a href="#启动Nginx" class="headerlink" title="启动Nginx"></a>启动Nginx</h2><p><code>brew services start nginx</code></p>
<p>进入浏览器，打开localhost:8000 有欢迎页面表示安装成功</p>
<h2 id="配置Nginx"><a href="#配置Nginx" class="headerlink" title="配置Nginx"></a>配置Nginx</h2><p>1: 增加一个server</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">        listen       <span class="number">8081</span>;</div><div class="line">        </div><div class="line">        server_name  localhost;</div><div class="line"></div><div class="line">        location / &#123;</div><div class="line">            proxy_pass http:<span class="comment">//ceshi.cyhkt.com:8081/crminnoway;</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>2: 重启Nginx</p>
<p><code>sudo nginx -s reload</code></p>
<h2 id="退出Nginx"><a href="#退出Nginx" class="headerlink" title="退出Nginx"></a>退出Nginx</h2><p>快速停止命令  <code>sudo nginx -s stop</code></p>
<p>平稳退出命令：<code>sudo nginx -s quit</code></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;配置Nginx反向代理&quot;&gt;&lt;a href=&quot;#配置Nginx反向代理&quot; class=&quot;headerlink&quot; title=&quot;配置Nginx反向代理&quot;&gt;&lt;/a&gt;配置Nginx反向代理&lt;/h1&gt;&lt;h2 id=&quot;安装brew&quot;&gt;&lt;a href=&quot;#安装brew&quot; cla
    
    </summary>
    
      <category term="Nginx" scheme="http://yoursite.com/categories/Nginx/"/>
    
    
      <category term="Nginx" scheme="http://yoursite.com/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>Vue中引用jQuery和jQuery插件</title>
    <link href="http://yoursite.com/2017/07/24/Vue%E4%B8%AD%E5%BC%95%E7%94%A8jQuery%E5%92%8CjQuery%E6%8F%92%E4%BB%B6/"/>
    <id>http://yoursite.com/2017/07/24/Vue中引用jQuery和jQuery插件/</id>
    <published>2017-07-24T02:34:04.000Z</published>
    <updated>2018-03-14T07:29:52.090Z</updated>
    
    <content type="html"><![CDATA[<p>在Vue项目中，难免会用到 jQuery，即使用不到jQuery，也有可能会用到jQuery插件，现在将整理一下，如何在 vue-cli生成的Vue+webpack项目中引入jQuery，使用jQuery插件</p>
<h2 id="Vue中引用jQuery"><a href="#Vue中引用jQuery" class="headerlink" title="Vue中引用jQuery"></a>Vue中引用jQuery</h2><p>1：首先下载jQuery</p>
<ul>
<li>npm install jQuery -D<br>2: 修改 webpack.base.config.js中的 两处配置文件</li>
<li>在build文件中的webpack.base.config中修改<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</div><div class="line"><span class="comment">//在module.exports中加入plugins</span></div><div class="line">plugins: [</div><div class="line">       <span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(<span class="string">'common.js'</span>),</div><div class="line">       <span class="keyword">new</span> webpack.ProvidePlugin(&#123;</div><div class="line">           <span class="attr">jQuery</span>: <span class="string">"jquery"</span>,</div><div class="line">           <span class="attr">$</span>: <span class="string">"jquery"</span></div><div class="line">       &#125;)</div><div class="line"></div><div class="line">   ],</div></pre></td></tr></table></figure>
</li>
</ul>
<p>3：如果在全局使用$,则在main.js中引入$； 否则在组件文件内引入即可<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> $ <span class="keyword">from</span> <span class="string">'jquery'</span>;</div></pre></td></tr></table></figure></p>
<h2 id="Vue中使用jQuery插件"><a href="#Vue中使用jQuery插件" class="headerlink" title="Vue中使用jQuery插件"></a>Vue中使用jQuery插件</h2><p>引入了jQuery之后，就要开始引入 jQuery插件了。<br>jQuery插件直接在组件内部使用，<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">	<span class="comment">//引入jQuery</span></div><div class="line">	<span class="keyword">import</span> $ <span class="keyword">from</span> <span class="string">"jquery"</span></div><div class="line">	<span class="comment">//引入插件的 JS</span></div><div class="line">	<span class="keyword">import</span> <span class="string">'../../directive/viewer-jquery.min.js'</span>;</div><div class="line">	<span class="comment">//在&lt;style&gt;&lt;/style&gt;中引入CSS文件</span></div><div class="line">	@<span class="keyword">import</span> <span class="string">"../../directive/viewer.min.css"</span>;</div><div class="line">	<span class="comment">//对于插件的调用，需要在 页面中的DOM元素加载完成自后再进行绑定，所以需要在</span></div><div class="line">	mouted 或者 updated状态之后再调用</div><div class="line">	updated()&#123;</div><div class="line"><span class="comment">//          alert(1);</span></div><div class="line">            $(<span class="string">'#ace-images'</span>).viewer(&#123;</div><div class="line">                <span class="attr">url</span>: <span class="string">'data-original'</span>,</div><div class="line">            &#125;);</div><div class="line">        &#125;,</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在Vue项目中，难免会用到 jQuery，即使用不到jQuery，也有可能会用到jQuery插件，现在将整理一下，如何在 vue-cli生成的Vue+webpack项目中引入jQuery，使用jQuery插件&lt;/p&gt;
&lt;h2 id=&quot;Vue中引用jQuery&quot;&gt;&lt;a hre
    
    </summary>
    
      <category term="Vue" scheme="http://yoursite.com/categories/Vue/"/>
    
    
      <category term="jQuery" scheme="http://yoursite.com/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>Vue项目中的点</title>
    <link href="http://yoursite.com/2017/07/21/Vue%E9%A1%B9%E7%9B%AE%E4%B8%AD%E7%9A%84%E7%82%B9/"/>
    <id>http://yoursite.com/2017/07/21/Vue项目中的点/</id>
    <published>2017-07-21T02:17:04.000Z</published>
    <updated>2018-03-14T07:37:50.303Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、-在Vue项目中引入图片"><a href="#一、-在Vue项目中引入图片" class="headerlink" title="一、 在Vue项目中引入图片"></a>一、 在Vue项目中引入图片</h1> <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> default_avatar <span class="keyword">from</span> <span class="string">'assets/default_avatar.jpg'</span>;</div><div class="line">data() &#123;</div><div class="line">     <span class="keyword">return</span> &#123;</div><div class="line">       <span class="attr">log</span>: errLogStore.state.errLog,</div><div class="line">    <span class="attr">default_avatar</span>: default_avatar</div><div class="line">     &#125;</div><div class="line">   &#125;,</div><div class="line">   <span class="comment">//然后再在内容区域引入default_avatar</span></div></pre></td></tr></table></figure>
<h1 id="二、数组的一些方法"><a href="#二、数组的一些方法" class="headerlink" title="二、数组的一些方法"></a>二、数组的一些方法</h1><ul>
<li>every：检测数组中的所有元素是否满足某一个条件，<ul>
<li>如果数组中检测到有一个元素不满足，则返回false，并且不再继续；</li>
<li>只有当所有的元素都满足条件，返回true；</li>
<li>every()不会对空数组进行检测；</li>
<li>every() 不会改变原数组；</li>
</ul>
</li>
<li>some():数组中是否有满足条件的元素<ul>
<li>some()与 every（）相反</li>
<li>有一个满足条件就返回true； </li>
<li>array.some(finction(item));</li>
</ul>
</li>
<li>concat(): 连接两个或多个数组<ul>
<li>array1.concat(ary2,ary3);</li>
<li>如果ary2 是数组，那么操作的是数组中的元素，而不是数组本身；</li>
</ul>
</li>
<li>filter():过滤数组，返回满足某个天剑的数组，返回一个新的数组<ul>
<li>不会改变原数组；</li>
<li>不会对空数组进行检测； </li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> ages=[<span class="number">18</span>,<span class="number">4</span>,<span class="number">23</span>,<span class="number">36</span>,<span class="number">57</span>];</div><div class="line">ages.filter(<span class="function"><span class="params">item</span>=&gt;</span>&#123;</div><div class="line">    <span class="keyword">return</span> item&gt;<span class="number">18</span>;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、-在Vue项目中引入图片&quot;&gt;&lt;a href=&quot;#一、-在Vue项目中引入图片&quot; class=&quot;headerlink&quot; title=&quot;一、 在Vue项目中引入图片&quot;&gt;&lt;/a&gt;一、 在Vue项目中引入图片&lt;/h1&gt; &lt;figure class=&quot;highlight
    
    </summary>
    
      <category term="Vue" scheme="http://yoursite.com/categories/Vue/"/>
    
    
      <category term="Vue" scheme="http://yoursite.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue学习笔记</title>
    <link href="http://yoursite.com/2017/07/19/vue-cli%E4%BD%BF%E7%94%A8%E4%B8%8E%E5%AE%89%E8%A3%85/"/>
    <id>http://yoursite.com/2017/07/19/vue-cli使用与安装/</id>
    <published>2017-07-19T02:39:04.000Z</published>
    <updated>2018-03-14T07:28:01.244Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-vue-cli-安装与使用"><a href="#1-vue-cli-安装与使用" class="headerlink" title="1. vue-cli 安装与使用"></a>1. vue-cli 安装与使用</h2><p>1: sudo npm install vue-cli -g<br>2: vue init webpack-simple vue-webpack-simple-demo<br>3: cd 文件名<br>4: npm install  加载模块   （有的时候网上教程使用cnpm;指的是国内淘宝镜像安装）<br>5: npm run dev 运行项目</p>
<h2 id="2-模块下载"><a href="#2-模块下载" class="headerlink" title="2.  模块下载"></a>2.  模块下载</h2><p>npm install <package-name> –save-dev  //下载的时候一定要–save-dev.这样别人拿到项目之后npm install 就可以直接使用。</package-name></p>
<h2 id="3-Vue-组件"><a href="#3-Vue-组件" class="headerlink" title="3. Vue 组件"></a>3. Vue 组件</h2><p>组件：一个大对象<br>定义组件的方式：</p>
<h3 id="3-1：全局组件"><a href="#3-1：全局组件" class="headerlink" title="3.1：全局组件"></a>3.1：全局组件</h3><p>1： 全局组件：Vue.extend({template:”content”})；</p>
<ul>
<li>2： 组件里面当数据时，data必须是函数的形式，函数必须返回的是json； √<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;div id="app"&gt;</div><div class="line">	&lt;aaa&gt;&lt;/aaa&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">var Aaa = Vue.extend(&#123;</div><div class="line">     data()&#123;</div><div class="line">     	return&#123;</div><div class="line">    		 msg:"我是标题"</div><div class="line">    	 &#125;</div><div class="line">     &#125;,</div><div class="line">     template:"&lt;h1&gt;&#123;&#123;msg&#125;&#125;&lt;/h1&gt;"</div><div class="line">    &#125;);</div><div class="line">     Vue.component('aaa',Aaa);</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="3-2-局部组件"><a href="#3-2-局部组件" class="headerlink" title="3.2: 局部组件"></a>3.2: 局部组件</h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">&lt;div id="app"&gt;</div><div class="line">	&lt;aaa&gt;&lt;/aaa&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">var Aaa = Vue.extend(&#123;</div><div class="line">     data()&#123;</div><div class="line">     	return&#123;</div><div class="line">    		 msg:"我是标题"</div><div class="line">    	 &#125;</div><div class="line">     &#125;,</div><div class="line">     template:"&lt;h1&gt;&#123;&#123;msg&#125;&#125;&lt;/h1&gt;"</div><div class="line">    &#125;);</div><div class="line">     //Vue.component('aaa',Aaa);-----这里是全局组件</div><div class="line">     var vm = new Vue(&#123;</div><div class="line">       el:"#app",</div><div class="line">       data:&#123;</div><div class="line">         msg:"true";</div><div class="line">       &#125;,</div><div class="line">       components:&#123;</div><div class="line">         aaa:Aaa  //------这里面是VM实例化的组件</div><div class="line">       &#125;</div><div class="line">     &#125;)</div></pre></td></tr></table></figure>
<h3 id="3-3-动态组件"><a href="#3-3-动态组件" class="headerlink" title="3.3:  动态组件"></a>3.3:  动态组件</h3><p><code>&lt;component :is=&quot;组件的名称    &quot;&gt;&lt;/component&gt;</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">	 <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</div><div class="line">          <span class="attr">el</span>:<span class="string">"#app"</span>,</div><div class="line"><span class="comment">//4:动态组件</span></div><div class="line">          data:&#123;</div><div class="line">              <span class="attr">a</span>:<span class="string">"aaa"</span>,</div><div class="line">              <span class="attr">b</span>:<span class="string">"bbb"</span></div><div class="line">          &#125;,</div><div class="line">          <span class="attr">components</span>:&#123;</div><div class="line">              <span class="string">"aaa"</span>:&#123;</div><div class="line">                  <span class="attr">template</span>:<span class="string">"&lt;h2&gt;这是aaa组件&lt;/h2&gt;"</span></div><div class="line">              &#125;,</div><div class="line">              <span class="string">"bbb"</span>:&#123;</div><div class="line">                  <span class="attr">template</span>:<span class="string">"&lt;h2&gt;这是bbb组件&lt;/h2&gt;"</span></div><div class="line">              &#125;</div><div class="line">          &#125;</div><div class="line">    &#125;)</div></pre></td></tr></table></figure></p>
<h2 id="Vue-学习笔记"><a href="#Vue-学习笔记" class="headerlink" title="Vue 学习笔记"></a>Vue 学习笔记</h2><p>1: GET请求<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">get:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">       <span class="keyword">this</span>.$http.get(<span class="string">'aa.txt'</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</div><div class="line">       	alert(res.data);</div><div class="line">       &#125;,<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</div><div class="line">       	alert(res.status);</div><div class="line">       &#125;);</div><div class="line">    &#125;,</div></pre></td></tr></table></figure></p>
<p>2: post请求<br>post请求与GET请求不同的是：post请求需要设置请求头。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">call:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.$http.post(<span class="string">'01-post.php'</span>,&#123;</div><div class="line">   	<span class="attr">a</span>:<span class="number">3</span>,<span class="comment">//参数</span></div><div class="line">    	b:<span class="number">5</span></div><div class="line">    &#125;,&#123;</div><div class="line">    	<span class="attr">emulateJSON</span>:<span class="literal">true</span>; <span class="comment">//设置请求头</span></div><div class="line">    &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</div><div class="line">   	 alert(res.data); <span class="comment">//响应成功处理函数</span></div><div class="line">    &#125;,<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</div><div class="line">    	alert(res.status); <span class="comment">//响应失败处理函数</span></div><div class="line">    &#125;)</div><div class="line">&#125;,</div></pre></td></tr></table></figure></p>
<p>3： jsonp请求<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">jsp:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;			<span class="keyword">this</span>.$http.jsonp(<span class="string">'https://sp0.baidu.com/5a1Fazu8AA54nxGko9WTAnF6hhy/su'</span>,&#123;</div><div class="line">  	 	<span class="attr">wd</span>:<span class="string">'a'</span>;<span class="comment">//参数</span></div><div class="line">   &#125;,&#123;</div><div class="line">   	<span class="attr">jsonp</span>:<span class="string">'cb'</span> <span class="comment">//默认为callback，当为cb时，需要写成cb;</span></div><div class="line">   &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</div><div class="line">   	alert(res.data.s); <span class="comment">//响应成功的函数</span></div><div class="line">   &#125;,<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</div><div class="line">   	alert(res.status); <span class="comment">//响应失败的函数；</span></div><div class="line">   &#125;)</div><div class="line">   &#125;</div></pre></td></tr></table></figure></p>
<h2 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h2><ul>
<li>交互：vue-resource ajax两部分</li>
<li>Vue中相当于window.onload功能的部分<ul>
<li>钩子函数  。编译值将文本中的   花括号  等编程真正的数据</li>
<li>1:created -&gt; 实例已经创建。  2：beforeCompile -&gt;编译之前   3：compiled：  –》编译之后   4：ready  –》创建节点，相当于window.onload事件<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">new</span> Vue(&#123;</div><div class="line">     <span class="attr">el</span>:<span class="string">"#App"</span>,  <span class="comment">// 这个可以暂时不写，可以手动挂在。vm.$mount("#App")</span></div><div class="line">     data:&#123;</div><div class="line">       <span class="attr">msg</span>:<span class="string">"well"</span></div><div class="line">     &#125;,</div><div class="line">     <span class="attr">created</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">       alert(<span class="string">"实例已经创建了"</span>)；</div><div class="line">     &#125;，</div><div class="line">     beforeCompile:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">       alert(<span class="string">"编译之前"</span>)；</div><div class="line">     &#125;，</div><div class="line">     compiled:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">       alert(<span class="string">"编译之后"</span>)；</div><div class="line">     &#125;，</div><div class="line">     ready:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">       alert(<span class="string">"真正的将文本节点插入到文档中，相当于window.onload"</span>)</div><div class="line">     &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h2 id="Vue中事件的处理，过滤器"><a href="#Vue中事件的处理，过滤器" class="headerlink" title="Vue中事件的处理，过滤器"></a>Vue中事件的处理，过滤器</h2><h2 id="解决-花括号-闪现问题"><a href="#解决-花括号-闪现问题" class="headerlink" title="解决 花括号 闪现问题"></a>解决 花括号 闪现问题</h2><p>1：v-cloak一般用在比较大的段落</p>
<p><style><br>    [v-cloak]{display: none;}<br></style><br>2：将文本中的内容标签按照格式显示出来 双{<i>斜体文本</i>双}。此时使用3个 三个左{<i>文本变斜</i>}(3个})<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">v-text   ===  &#123;&#123;msg&#125;&#125;;     v-html === &#123;&#123;&#123;msg&#125;&#125;&#125;</div></pre></td></tr></table></figure></p>
<h2 id="计算属性的使用-computed-最后一定记得return；"><a href="#计算属性的使用-computed-最后一定记得return；" class="headerlink" title="计算属性的使用  computed 最后一定记得return；"></a>计算属性的使用  computed 最后一定记得return；</h2><p>computed:function(){<br>  b:function(){   //这种形式默认调用的是 b的GET方法<br>    return this.a+1; //此时b是实例Vue的属性，不是函数，直接this.b就可以调用<br>  }<br>}<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">computed:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">     b:&#123;</div><div class="line">       <span class="attr">get</span>:fuction()&#123;</div><div class="line">         <span class="keyword">return</span> <span class="keyword">this</span>.a+<span class="number">2</span>;</div><div class="line">       &#125;,</div><div class="line">       <span class="attr">set</span>:<span class="function"><span class="keyword">function</span>(<span class="params">val</span>)</span>&#123;</div><div class="line">          <span class="keyword">this</span>.a = val;</div><div class="line">       &#125;</div><div class="line">     &#125;</div><div class="line">&#125;</div><div class="line"><span class="built_in">document</span>.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">     vm.b = <span class="number">10</span>; <span class="comment">//这个10就是set当中的val值。</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Vue中的自定义属性"><a href="#Vue中的自定义属性" class="headerlink" title="Vue中的自定义属性"></a>Vue中的自定义属性</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</div><div class="line">     <span class="attr">aa</span>:<span class="number">11</span>,  <span class="comment">//这个是自定义属性，通过&#123;&#123;aa&#125;&#125;是获取不到的， vm.$options.aa</span></div><div class="line">     data:&#123;</div><div class="line">       <span class="attr">a</span>:<span class="number">1</span></div><div class="line">     &#125;</div><div class="line">&#125;).$mount(<span class="string">"#box"</span>);</div></pre></td></tr></table></figure>
<h2 id="Vue-中循环重复添加数据-track-by"><a href="#Vue-中循环重复添加数据-track-by" class="headerlink" title="Vue 中循环重复添加数据  track-by"></a>Vue 中循环重复添加数据  track-by</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"item in items"</span> <span class="attr">track-by</span>=<span class="string">"$index"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h2><ul>
<li><p>limitBy 有两个参数，第一个 取几个数；第二个，从哪开始</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"item in items | limitBy 2 items.length-1"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>filterBy “a” 第一个以a开头的显示</p>
</li>
<li>orderBy “1”/“-1”;1为正序排列，   -1位倒叙排列</li>
<li>自定义过滤器<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Vue.filter(<span class="string">'toDo'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">input,a,b</span>)</span>&#123;<span class="comment">//a,b为参数&#125;</span></div><div class="line">)</div><div class="line"><span class="comment">//将毫秒级时间转化为 yyyy-mm-dd格式</span></div><div class="line">Vue.filter(<span class="string">"date"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">input</span>)</span>&#123;</div><div class="line">     <span class="keyword">var</span> oDate = <span class="keyword">new</span> <span class="built_in">Date</span>(input);</div><div class="line">     <span class="keyword">return</span> oDate.getFullYear()+<span class="string">"-"</span>+(oDate.getMonth()+<span class="number">1</span>+oDate.getHours()+<span class="string">":"</span>+oDate.getMinutes()+<span class="string">":"</span>+oDate.getSeconds());</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="属性绑定样式"><a href="#属性绑定样式" class="headerlink" title="属性绑定样式"></a>属性绑定样式</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">v-drag:style</span>=<span class="string">"width:'100px'"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="Vue-组件的定义"><a href="#Vue-组件的定义" class="headerlink" title="Vue 组件的定义"></a>Vue 组件的定义</h2><ul>
<li>this.$emit(“name”,this.a);   //将子组件的a数据发送到父组件中</li>
<li>父组件通过@name=”get” 进行接收</li>
<li>子集向父级发送数据<ul>
<li>vm.$emit(事件名，数据)；<h3 id="slot-：占位置使用"><a href="#slot-：占位置使用" class="headerlink" title="slot ：占位置使用"></a>slot ：占位置使用</h3><h2 id="vue-router"><a href="#vue-router" class="headerlink" title="vue-router"></a>vue-router</h2></li>
</ul>
</li>
<li>vue-resource:做交互使用</li>
<li>vue-router：路由<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;&#123;$route.params |json&#125;&#125; ----  &#123; &quot;id&quot;: &quot;002&quot; &#125;  ; 获取到的是当前参数</div><div class="line">      &lt;br&gt;</div><div class="line">      &#123;&#123;$route.path&#125;&#125;  ----  /news/detail/002?a=1&amp;b=2； 获取到的是路径</div><div class="line">      &lt;br&gt;</div><div class="line">      &#123;&#123;$route.query | json&#125;&#125;  ----&#123; &quot;a&quot;: &quot;1&quot;, &quot;b&quot;: &quot;2&quot; &#125;; 获取到的是参数</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="vue-loader"><a href="#vue-loader" class="headerlink" title="vue-loader"></a>vue-loader</h2><ul>
<li>模块化开发 webpack。同css-loader/style-loader一样。</li>
<li>vue-loader是基于 webpack的</li>
<li>.vue文件 要依赖vue-loader,而vue-loader需要webpack将.vue文件编译成浏览器能读懂的文件</li>
<li>.vue文件放置的是Vue组件的代码 ：1：template  2：script  3：style</li>
<li>babel_loader: 将ES6代码编译成 浏览器识别的代码</li>
<li>webpack目录结构<ul>
<li>index.htm</li>
<li>main.js 入口文件</li>
<li>App.vue  唯一的Vue文件</li>
<li>package.json  工程文件(项目依赖，名称、配置)</li>
<li>webpack.config.js  webpack的配置文件</li>
<li>vue-html-loader //编译 .Vue文件中的template中的内容</li>
<li>css-loader/vue-style-loader //编译CSS文件</li>
<li>vue-hot-reload-api@1.3.2 //加载js文件。改完代码后，验证代码是否正确 </li>
<li>webpack-dev-server –inline(热刷新) –hot  –port(默认8080) 8082(修改为8082)</li>
</ul>
</li>
</ul>
<h2 id="ES6模块化开发"><a href="#ES6模块化开发" class="headerlink" title="ES6模块化开发"></a>ES6模块化开发</h2><ul>
<li>导出模块：export default{}</li>
<li>引入模块： import Vue(模块名) from “vue”地址</li>
<li>–save-dev 在下载文件的同时，将其写到配置文件中</li>
<li>必须依赖的框架，在下载的时候 –save; 文件在package.json 中的 devDependecies</li>
<li>开发环境所依赖的框架，下载时使用 –save -dev;保存在dependecies中</li>
</ul>
<h2 id="vue-cli-脚手架"><a href="#vue-cli-脚手架" class="headerlink" title="vue-cli 脚手架"></a>vue-cli 脚手架</h2><ul>
<li>Vue init 模板名称 本地文件夹名称 (vue init webpack-simple  crmInnoway) </li>
<li>加载CSS样式的时候，需要下载 style-loader css-loader file-loader -D;</li>
<li>UI中的字体图标是需要 file-loader进行加载的</li>
<li>在webpack.config.json里面配置等</li>
<li><p>！！！！主要，修改完webpack.config.json 之后记得重启服务</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line"><span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</div><div class="line"><span class="attr">loader</span>: <span class="string">'style-loader!css-loader'</span></div><div class="line">&#125;,</div><div class="line">&#123;</div><div class="line"><span class="attr">test</span>: <span class="regexp">/\.(png|jpe?g|gif|svg)(\?\S*)?$/</span>,</div><div class="line"><span class="attr">loader</span>: <span class="string">'file-loader'</span>,</div><div class="line"><span class="attr">query</span>: &#123;</div><div class="line"><span class="attr">name</span>: <span class="string">'[name].[ext]?[hash]'</span></div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>如果想使用less的话，需要下载两个文件 “less   和 less-loader”,然后配置<br>{</p>
<pre><code>    test: /\.less$/,
    loader: &apos;less&apos;
},
</code></pre></li>
</ul>
<h2 id="Vue2-0-注意"><a href="#Vue2-0-注意" class="headerlink" title="Vue2.0 注意"></a>Vue2.0 注意</h2><ul>
<li>1：在组件中，每一个template里面必须有一个根元素</li>
<li>2：生命周期的变化<ul>
<li>mounted 挂载  代替 1.X中的ready</li>
</ul>
</li>
<li>3： ： = v-bind</li>
<li>4： 双向数据绑定，v-model=”message”。这个message是变量，不用 花括号 包裹</li>
<li>​<h2 id="vuex-集中管理数据"><a href="#vuex-集中管理数据" class="headerlink" title="vuex 集中管理数据"></a>vuex 集中管理数据</h2></li>
<li>vuex提供两个方法<ul>
<li>mapAction 管理事件(行为)</li>
<li>mapGetters  获取数据</li>
<li>1：state ：用来存储数据，全局使用的数据</li>
<li>2: mutations:存放一些方法，用来处理state的变化</li>
<li>3：actions:通过{commit,state}来提交状态的变化。处理一些逻辑关系</li>
<li>4：getters:获取做种的数据，进行返回</li>
<li>5：最后将 state、mutations、actions、getters进行返回。<h2 id="使用mock-js创建假数据"><a href="#使用mock-js创建假数据" class="headerlink" title="使用mock.js创建假数据"></a>使用mock.js创建假数据</h2></li>
</ul>
</li>
<li>使用axios动态加载 npm i axios axios-mock-adapter  -D</li>
<li>下载mock   sudo npm i mockjs -D<h2 id="element-ui"><a href="#element-ui" class="headerlink" title="element-ui"></a>element-ui</h2></li>
<li>label-positon =”left”  会添加 text-align:left 属性</li>
<li>:default-active=”$route.path”  表示当前激活菜单的 index</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-vue-cli-安装与使用&quot;&gt;&lt;a href=&quot;#1-vue-cli-安装与使用&quot; class=&quot;headerlink&quot; title=&quot;1. vue-cli 安装与使用&quot;&gt;&lt;/a&gt;1. vue-cli 安装与使用&lt;/h2&gt;&lt;p&gt;1: sudo npm inst
    
    </summary>
    
      <category term="Vue" scheme="http://yoursite.com/categories/Vue/"/>
    
    
      <category term="Vue - component - filter - vue-router" scheme="http://yoursite.com/tags/Vue-component-filter-vue-router/"/>
    
  </entry>
  
  <entry>
    <title>Php相关记录</title>
    <link href="http://yoursite.com/2017/07/10/PHP%E5%AD%A6%E4%B9%A0%E4%B8%AD%E7%9A%84%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2017/07/10/PHP学习中的笔记/</id>
    <published>2017-07-10T02:17:04.000Z</published>
    <updated>2018-03-14T11:11:10.028Z</updated>
    
    <content type="html"><![CDATA[<h2 id="PHP学习中的笔记"><a href="#PHP学习中的笔记" class="headerlink" title="PHP学习中的笔记"></a>PHP学习中的笔记</h2><ul>
<li>defined 是判断是都存在这个值；</li>
<li>define是设置某个量的值；</li>
<li>layout.html 是入口文件。通过模板语法{<strong>CONTENT</strong>}像框架中填写主要内容。然后根据URL地址解析，寻找对应的方法与数据。</li>
<li>php中isset()函数，用来检测变量是否设置；</li>
<li>unset():销毁指定的变量</li>
<li>在core.php中的应用路径解析，页面加载，先判断是否设置了 isset($GET[‘app’]),<ul>
<li>页面初始化，没有请求，也就是<code>isset($GET[&#39;app&#39;])</code>没有值，默认使 $app_name=web;所以将apps/web/tpl/index/index.html中的内容渲染到content区域；<h3 id="Volist标签，-present标签与其类似"><a href="#Volist标签，-present标签与其类似" class="headerlink" title="Volist标签， present标签与其类似"></a>Volist标签， present标签与其类似</h3></li>
</ul>
</li>
<li>name和id属性是必须的；name：表示要输出的数据模板变量；id表示循环变量；key:循环的key变量，默认值为i;</li>
<li>Volist标签的name属性表示模板赋值的变量名称，因此不可随意在模板文件中改变。id表示当前的循环变量，可以随意指定，但确保不要和name属性冲突。</li>
<li>使用前，首先应该对模板进行赋值，例如：</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">$User = M(<span class="string">'User'</span>);<span class="comment">//M方法：意思是创建一个user模型，对应数据库中的User表，</span></div><div class="line">$User = D(<span class="string">'User'</span>);<span class="comment">//D方法：实例化模型 。 该方法可能和以下代码等效：import('@.Model.UserModel'); $User = new UserModel();</span></div><div class="line">$list = $User-&gt;select(); <span class="comment">//从数据库中选取数据；</span></div><div class="line">$<span class="keyword">this</span>-&gt;assign(<span class="string">'list'</span>,$list);  <span class="comment">//吧数组打印出来，渲染模板；</span></div><div class="line"><span class="comment">//在PHP中，例如$db=new db();实例化；使用$db的属性和方法： $db -&gt; host = 'localhost'; $db -&gt; printHost();这就相当于js中的db.host = 'localhost';db.printHost();调用方法；</span></div><div class="line">&lt;volist name=<span class="string">"list"</span> id=<span class="string">"vo"</span>&gt;</div><div class="line">    &#123;$vo.id&#125;</div><div class="line">    &#123;$vo.name&#125;</div><div class="line">&lt;<span class="regexp">/volist&gt;</span></div></pre></td></tr></table></figure>
<h3 id="thinkPHP中M方法和D方法的区别"><a href="#thinkPHP中M方法和D方法的区别" class="headerlink" title="thinkPHP中M方法和D方法的区别:"></a>thinkPHP中M方法和D方法的区别:</h3><p>M方法实例化模型无需用户为每个数据表定义模型类，如果D方法没有找到定义的模型类，则会自动调用M方法。通俗一点说：M实例化参数是数据库的表名。D实例化的是你自己在Model文件夹下面建立的模型文件。</p>
<h3 id="思路过程："><a href="#思路过程：" class="headerlink" title="思路过程："></a>思路过程：</h3><p>1：在indexAction.class.php中定义的获得到的是index.html页面中<volist name="newspic">的数据<br>2：由此找到了数据库中对应的数据：</volist></p>
<pre><code>+ $articleModel = M(&apos;Article&apos;); ------找到数据库中 to_article表；
+ $cyjigou_id = 2;  -------找到category_id = 2的所有数据；
+ 然后对应上了，获得到了所有入住机构的数据；
+ 里面的content字段就是入住机构的详细介绍；
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;PHP学习中的笔记&quot;&gt;&lt;a href=&quot;#PHP学习中的笔记&quot; class=&quot;headerlink&quot; title=&quot;PHP学习中的笔记&quot;&gt;&lt;/a&gt;PHP学习中的笔记&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;defined 是判断是都存在这个值；&lt;/li&gt;
&lt;li&gt;define是
    
    </summary>
    
      <category term="PHP" scheme="http://yoursite.com/categories/PHP/"/>
    
    
      <category term="PHP" scheme="http://yoursite.com/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>Es6 语法中array.entries的使用</title>
    <link href="http://yoursite.com/2017/06/25/%20es6%20%E8%AF%AD%E6%B3%95%E4%B8%AD%E7%9A%84%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2017/06/25/ es6 语法中的总结/</id>
    <published>2017-06-25T04:39:04.000Z</published>
    <updated>2018-03-14T11:09:50.142Z</updated>
    
    <content type="html"><![CDATA[<h1 id="es6-语法中array-entries"><a href="#es6-语法中array-entries" class="headerlink" title="es6 语法中array.entries"></a>es6 语法中array.entries</h1><h3 id="array-entries-的使用"><a href="#array-entries-的使用" class="headerlink" title="array.entries()的使用"></a>array.entries()的使用</h3><ul>
<li>背景<ul>
<li>一个数组Array中有7个对象，获取到一个数据，想要在原数组中删除这个数据。<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//通过使用array.entries()对数组进行复制，返回一个新的Array Iterator对象，该对象中包含数组中每个索引的键/值对。</span></div><div class="line"><span class="keyword">let</span> arr = [&#123;<span class="attr">id</span>:<span class="number">0</span>,<span class="attr">name</span>:<span class="string">"a"</span>&#125;,&#123;<span class="attr">id</span>:<span class="number">1</span>,<span class="attr">name</span>:<span class="string">"b"</span>&#125;,&#123;<span class="attr">id</span>:<span class="number">3</span>,<span class="attr">name</span>:<span class="string">"c"</span>&#125;];</div><div class="line"><span class="keyword">let</span> index;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">const</span>[i,v] <span class="keyword">of</span> arr.entries())&#123;</div><div class="line">     <span class="comment">//此时的i对应的是 0，1，1，数组的索引值</span></div><div class="line">     <span class="comment">//v 对应的是每一个item;</span></div><div class="line">     <span class="comment">//这里假设获取到了一组数据  data=&#123;id:1,name:"b"&#125;,想要删除arr中的额这组数据</span></div><div class="line">     <span class="keyword">if</span>(v.id === data.id &amp;&amp; v.name === data.name)&#123;</div><div class="line">       index = i;</div><div class="line">       <span class="keyword">break</span>;</div><div class="line">     &#125;</div><div class="line">&#125;</div><div class="line">arr.splice(index,<span class="number">1</span>); <span class="comment">//这样就删除了&#123;id:1,name:"b"&#125;这组数据</span></div></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;es6-语法中array-entries&quot;&gt;&lt;a href=&quot;#es6-语法中array-entries&quot; class=&quot;headerlink&quot; title=&quot;es6 语法中array.entries&quot;&gt;&lt;/a&gt;es6 语法中array.entries&lt;/h1&gt;&lt;
    
    </summary>
    
      <category term="ES6" scheme="http://yoursite.com/categories/ES6/"/>
    
    
      <category term="array" scheme="http://yoursite.com/tags/array/"/>
    
      <category term="es6" scheme="http://yoursite.com/tags/es6/"/>
    
      <category term="entries" scheme="http://yoursite.com/tags/entries/"/>
    
  </entry>
  
  <entry>
    <title>以HTML格式打开 *.Httl 或者*.Php文件</title>
    <link href="http://yoursite.com/2017/06/08/html%E6%A0%BC%E5%BC%8F%E6%89%93%E5%BC%80*.httl%E6%88%96%E8%80%85*.php%E6%96%87%E4%BB%B6/"/>
    <id>http://yoursite.com/2017/06/08/html格式打开*.httl或者*.php文件/</id>
    <published>2017-06-08T08:15:04.000Z</published>
    <updated>2017-06-08T08:15:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>在webstorm或者intellij IDEA 中打开 <em>.httl 或者 </em>.php文件时，由于文件格式问题，会导致整个页面的颜色都是白色，在编辑页面时，代码不会提示，这就大大的降低的开发效率。偶然间发现，可以以HTML格式去打开这些文件，那这些文件就可以以html样式结构进行展示，在进行编码的时候也会出现提示。</p>
<p>现在就以 itellij IDEA 为例进行设置讲解：<br>1：进入preference<br>2：进入editor  ——&gt;  File Types;<br>3:  找到 HTML，在下面追加 你想要打开的文件格式</p>
<p><img src="../img/001.png" width="600" height="300" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在webstorm或者intellij IDEA 中打开 &lt;em&gt;.httl 或者 &lt;/em&gt;.php文件时，由于文件格式问题，会导致整个页面的颜色都是白色，在编辑页面时，代码不会提示，这就大大的降低的开发效率。偶然间发现，可以以HTML格式去打开这些文件，那这些文件就可以
    
    </summary>
    
      <category term="HTML" scheme="http://yoursite.com/categories/HTML/"/>
    
    
  </entry>
  
  <entry>
    <title>Background-Size 使用</title>
    <link href="http://yoursite.com/2017/06/01/background-size/"/>
    <id>http://yoursite.com/2017/06/01/background-size/</id>
    <published>2017-06-01T02:32:04.000Z</published>
    <updated>2018-03-14T07:14:30.875Z</updated>
    
    <content type="html"><![CDATA[<p>今天运维人员发现了一个线上bug，banner图片在显示的时候总是显示部分区域，不能显完全，在排查的过程中，发现banner图的父元素设置 <code>width:100%;min-width:1200px;</code>；div设置了最小宽度，为1200px；但是banner图的宽为2000px，超出div宽度的部分被裁切掉了。</p>
<p>要想图片显示为div的大小，自动缩放，可以设置 背景图片的大小即 background-size属性，正好借此机会对background-size属性进行总结。</p>
<p>background-size属性一共有5个值：auto、length、percent、cover、contain。</p>
<p>1：默认值为：auto，auto；<br>2：length 和 percent一共是两个值，第一个值是设置图片的宽度，第二个值是图片的高度。如果只有一个值，那么第二个值默认为auto。<br>3：percent：为百分比值，背景图片的大小是根据相对的背景区域来做调整的；</p>
<blockquote>
<p>当图片较大，背景区域太小的时候，可通过 background-size：100% 100%；来达到，图片完全展示的效果</p>
</blockquote>
<p>4：contain：等比例放大，某一边顶格后，立即停止放大，另一百为空白区域；<br>5：cover：等比例放大，直到两边都顶格。如果有一边超出范围，那么就会出现图片缺失的问题。</p>
<h2 id="background-设置多背景"><a href="#background-设置多背景" class="headerlink" title="background 设置多背景"></a>background 设置多背景</h2><p>在CSS3中，可以设置多重背景，background的值为：url  重复   位置/大小<br>注意： 这几个属性的值可以交换位置，但是  位置/大小  必须在一起，并且中间以/分割；<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">background:</div><div class="line">	url('img/lyf.jpg') top left/100px 100px no-repeat;// 位置/大小 重复</div><div class="line">	url('img/lyf.jpg') no-repeat top center/100px 100px ;重复 位置/大小</div><div class="line">url('img/haha.jpg') no-repeat top right / 100px 100px;重复 位置/大小</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天运维人员发现了一个线上bug，banner图片在显示的时候总是显示部分区域，不能显完全，在排查的过程中，发现banner图的父元素设置 &lt;code&gt;width:100%;min-width:1200px;&lt;/code&gt;；div设置了最小宽度，为1200px；但是bann
    
    </summary>
    
      <category term="CSS" scheme="http://yoursite.com/categories/CSS/"/>
    
    
      <category term="background-size" scheme="http://yoursite.com/tags/background-size/"/>
    
  </entry>
  
  <entry>
    <title>ajaxFileupload</title>
    <link href="http://yoursite.com/2017/05/31/ajaxFileupload/"/>
    <id>http://yoursite.com/2017/05/31/ajaxFileupload/</id>
    <published>2017-05-30T16:00:00.000Z</published>
    <updated>2018-03-14T11:22:49.569Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div></pre></td><td class="code"><pre><div class="line">	<span class="comment">// JavaScript Document</span></div><div class="line">jQuery.extend(&#123;</div><div class="line">    <span class="attr">createUploadIframe</span>: <span class="function"><span class="keyword">function</span>(<span class="params">id, uri</span>)</span></div><div class="line"> &#123;</div><div class="line">   <span class="comment">//create frame</span></div><div class="line">            <span class="keyword">var</span> frameId = <span class="string">'jUploadFrame'</span> + id;</div><div class="line">            <span class="keyword">if</span>(<span class="built_in">window</span>.ActiveXObject) &#123;</div><div class="line">                <span class="keyword">var</span> io = <span class="built_in">document</span>.createElement(<span class="string">'&lt;iframe id="'</span> + frameId + <span class="string">'" name="'</span> + frameId + <span class="string">'" /&gt;'</span>);</div><div class="line">                <span class="keyword">if</span>(<span class="keyword">typeof</span> uri== <span class="string">'boolean'</span>)&#123;</div><div class="line">                    io.src = <span class="string">'javascript:false'</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">typeof</span> uri== <span class="string">'string'</span>)&#123;</div><div class="line">                    io.src = uri;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">var</span> io = <span class="built_in">document</span>.createElement(<span class="string">'iframe'</span>);</div><div class="line">                io.id = frameId;</div><div class="line">                io.name = frameId;</div><div class="line">            &#125;</div><div class="line">            io.style.position = <span class="string">'absolute'</span>;</div><div class="line">            io.style.top = <span class="string">'-1000px'</span>;</div><div class="line">            io.style.left = <span class="string">'-1000px'</span>;</div><div class="line">            <span class="built_in">document</span>.body.appendChild(io);</div><div class="line">            <span class="keyword">return</span> io;   </div><div class="line">    &#125;,</div><div class="line">    <span class="attr">createUploadForm</span>: <span class="function"><span class="keyword">function</span>(<span class="params">id, fileElementId</span>)</span></div><div class="line"> &#123;</div><div class="line">  <span class="comment">//create form </span></div><div class="line">  <span class="keyword">var</span> formId = <span class="string">'jUploadForm'</span> + id;</div><div class="line">  <span class="keyword">var</span> fileId = <span class="string">'jUploadFile'</span> + id;</div><div class="line">  <span class="keyword">var</span> form = jQuery(<span class="string">'&lt;form  action="" method="POST" name="'</span> + formId + <span class="string">'" id="'</span> + formId + <span class="string">'" enctype="multipart/form-data"&gt;&lt;/form&gt;'</span>); </div><div class="line">  <span class="keyword">var</span> oldElement = jQuery(<span class="string">'#'</span> + fileElementId);</div><div class="line">  <span class="keyword">var</span> newElement = jQuery(oldElement).clone();</div><div class="line">  jQuery(oldElement).attr(<span class="string">'id'</span>, fileId);</div><div class="line">  jQuery(oldElement).before(newElement);</div><div class="line">  jQuery(oldElement).appendTo(form);</div><div class="line">  <span class="comment">//set attributes</span></div><div class="line">  jQuery(form).css(<span class="string">'position'</span>, <span class="string">'absolute'</span>);</div><div class="line">  jQuery(form).css(<span class="string">'top'</span>, <span class="string">'-1200px'</span>);</div><div class="line">  jQuery(form).css(<span class="string">'left'</span>, <span class="string">'-1200px'</span>);</div><div class="line">  jQuery(form).appendTo(<span class="string">'body'</span>);  </div><div class="line">  <span class="keyword">return</span> form;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">ajaxFileUpload</span>: <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</div><div class="line">        <span class="comment">// TODO introduce global settings, allowing the client to modify them for all requests, not only timeout  </span></div><div class="line">        s = jQuery.extend(&#123;&#125;, jQuery.ajaxSettings, s);</div><div class="line">        <span class="keyword">var</span> id = s.fileElementId;        </div><div class="line">  <span class="keyword">var</span> form = jQuery.createUploadForm(id, s.fileElementId);</div><div class="line">  <span class="keyword">var</span> io = jQuery.createUploadIframe(id, s.secureuri);</div><div class="line">  <span class="keyword">var</span> frameId = <span class="string">'jUploadFrame'</span> + id;</div><div class="line">  <span class="keyword">var</span> formId = <span class="string">'jUploadForm'</span> + id;  </div><div class="line">        <span class="keyword">if</span>( s.global &amp;&amp; ! jQuery.active++ )</div><div class="line">  &#123;</div><div class="line">   <span class="comment">// Watch for a new set of requests</span></div><div class="line">   jQuery.event.trigger( <span class="string">"ajaxStart"</span> );</div><div class="line">  &#125;            </div><div class="line">        <span class="keyword">var</span> requestDone = <span class="literal">false</span>;</div><div class="line">        <span class="comment">// Create the request object</span></div><div class="line">        <span class="keyword">var</span> xml = &#123;&#125;;   </div><div class="line">        <span class="keyword">if</span>( s.global )</div><div class="line">        &#123;</div><div class="line">         jQuery.event.trigger(<span class="string">"ajaxSend"</span>, [xml, s]);</div><div class="line">        &#125;            </div><div class="line">        <span class="keyword">var</span> uploadCallback = <span class="function"><span class="keyword">function</span>(<span class="params">isTimeout</span>)</span></div><div class="line">  &#123;  </div><div class="line">   <span class="comment">// Wait for a response to come back </span></div><div class="line">   <span class="keyword">var</span> io = <span class="built_in">document</span>.getElementById(frameId);</div><div class="line">            <span class="keyword">try</span> </div><div class="line">   &#123;    </div><div class="line">    <span class="keyword">if</span>(io.contentWindow)</div><div class="line">    &#123;</div><div class="line">      xml.responseText = io.contentWindow.document.body?io.contentWindow.document.body.innerHTML:<span class="literal">null</span>;</div><div class="line">                  xml.responseXML = io.contentWindow.document.XMLDocument?io.contentWindow.document.XMLDocument:io.contentWindow.document;</div><div class="line">      </div><div class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(io.contentDocument)</div><div class="line">    &#123;</div><div class="line">      xml.responseText = io.contentDocument.document.body?io.contentDocument.document.body.innerHTML:<span class="literal">null</span>;</div><div class="line">                 xml.responseXML = io.contentDocument.document.XMLDocument?io.contentDocument.document.XMLDocument:io.contentDocument.document;</div><div class="line">    &#125;      </div><div class="line">            &#125;<span class="keyword">catch</span>(e)</div><div class="line">   &#123;</div><div class="line">    jQuery.handleError(s, xml, <span class="literal">null</span>, e);</div><div class="line">   &#125;</div><div class="line">            <span class="keyword">if</span>( xml || isTimeout == <span class="string">"timeout"</span>) </div><div class="line">   &#123;    </div><div class="line">                requestDone = <span class="literal">true</span>;</div><div class="line">                <span class="keyword">var</span> status;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    status = isTimeout != <span class="string">"timeout"</span> ? <span class="string">"success"</span> : <span class="string">"error"</span>;</div><div class="line">                    <span class="comment">// Make sure that the request was successful or notmodified</span></div><div class="line">                    <span class="keyword">if</span>( status != <span class="string">"error"</span> )</div><div class="line">     &#123;</div><div class="line">                        <span class="comment">// process the data (runs the xml through httpData regardless of callback)</span></div><div class="line">                        <span class="keyword">var</span> data = jQuery.uploadHttpData( xml, s.dataType );                        </div><div class="line">                        <span class="keyword">if</span>( s.success )</div><div class="line">                        &#123;</div><div class="line">       <span class="comment">// ifa local callback was specified, fire it and pass it the data</span></div><div class="line">                         s.success( data, status );</div><div class="line">                        &#125;;                 </div><div class="line">                        <span class="keyword">if</span>( s.global )</div><div class="line">                        &#123;</div><div class="line">       <span class="comment">// Fire the global callback</span></div><div class="line">                         jQuery.event.trigger( <span class="string">"ajaxSuccess"</span>, [xml, s] );</div><div class="line">                        &#125;;                            </div><div class="line">                    &#125; <span class="keyword">else</span></div><div class="line">                    &#123;</div><div class="line">                     jQuery.handleError(s, xml, status);</div><div class="line">                    &#125;</div><div class="line">                        </div><div class="line">                &#125; <span class="keyword">catch</span>(e) </div><div class="line">    &#123;</div><div class="line">                    status = <span class="string">"error"</span>;</div><div class="line">                    jQuery.handleError(s, xml, status, e);</div><div class="line">                &#125;;                </div><div class="line">                <span class="keyword">if</span>( s.global )</div><div class="line">                &#123;</div><div class="line">     <span class="comment">// The request was completed</span></div><div class="line">                 jQuery.event.trigger( <span class="string">"ajaxComplete"</span>, [xml, s] );</div><div class="line">                &#125;;</div><div class="line">                    </div><div class="line"></div><div class="line">                <span class="comment">// Handle the global AJAX counter</span></div><div class="line">                <span class="keyword">if</span>(s.global &amp;&amp; ! --jQuery.active)</div><div class="line">                &#123;</div><div class="line">                 jQuery.event.trigger(<span class="string">"ajaxStop"</span>);</div><div class="line">                &#125;;</div><div class="line">                <span class="keyword">if</span>(s.complete)</div><div class="line">                &#123;</div><div class="line">                  s.complete(xml, status);</div><div class="line">                &#125; ;                 </div><div class="line"></div><div class="line">                jQuery(io).unbind();</div><div class="line"></div><div class="line">                setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span></div><div class="line">         &#123; <span class="keyword">try</span> </div><div class="line">          &#123;</div><div class="line">           jQuery(io).remove();</div><div class="line">           jQuery(form).remove(); </div><div class="line">           </div><div class="line">          &#125; <span class="keyword">catch</span>(e) </div><div class="line">          &#123;</div><div class="line">           jQuery.handleError(s, xml, <span class="literal">null</span>, e);</div><div class="line">          &#125;         </div><div class="line"></div><div class="line">         &#125;, <span class="number">100</span>);</div><div class="line"></div><div class="line">                xml = <span class="literal">null</span>;</div><div class="line"></div><div class="line">            &#125;;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// Timeout checker</span></div><div class="line">        <span class="keyword">if</span>( s.timeout &gt; <span class="number">0</span> ) </div><div class="line">  &#123;</div><div class="line">            setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                </div><div class="line">                <span class="keyword">if</span>( !requestDone )</div><div class="line">                &#123;</div><div class="line">     <span class="comment">// Check to see ifthe request is still happening</span></div><div class="line">                 uploadCallback( <span class="string">"timeout"</span> );</div><div class="line">                &#125;</div><div class="line">                </div><div class="line">            &#125;, s.timeout);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">try</span> </div><div class="line">  &#123;</div><div class="line">   <span class="keyword">var</span> form = jQuery(<span class="string">'#'</span> + formId);</div><div class="line">   jQuery(form).attr(<span class="string">'action'</span>, s.url);</div><div class="line">   jQuery(form).attr(<span class="string">'method'</span>, <span class="string">'POST'</span>);</div><div class="line">   jQuery(form).attr(<span class="string">'target'</span>, frameId);</div><div class="line">            <span class="keyword">if</span>(form.encoding)</div><div class="line">   &#123;</div><div class="line">                form.encoding = <span class="string">'multipart/form-data'</span>;    </div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span></div><div class="line">   &#123;    </div><div class="line">                form.enctype = <span class="string">'multipart/form-data'</span>;</div><div class="line">            &#125;   </div><div class="line">            jQuery(form).submit();</div><div class="line"></div><div class="line">        &#125; <span class="keyword">catch</span>(e) </div><div class="line">  &#123;   </div><div class="line">            jQuery.handleError(s, xml, <span class="literal">null</span>, e);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(<span class="built_in">window</span>.attachEvent)&#123;</div><div class="line">            <span class="built_in">document</span>.getElementById(frameId).attachEvent(<span class="string">'onload'</span>, uploadCallback);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            <span class="built_in">document</span>.getElementById(frameId).addEventListener(<span class="string">'load'</span>, uploadCallback, <span class="literal">false</span>);</div><div class="line">        &#125;   </div><div class="line">        <span class="keyword">return</span> &#123;<span class="attr">abort</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;&#125;; </div><div class="line"></div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    <span class="attr">uploadHttpData</span>: <span class="function"><span class="keyword">function</span>(<span class="params"> r, type </span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> data = !type;</div><div class="line">        data = type == <span class="string">"xml"</span> || data ? r.responseXML : r.responseText;</div><div class="line">        <span class="comment">// ifthe type is "script", eval it in global context</span></div><div class="line">        <span class="keyword">if</span>( type == <span class="string">"script"</span> )</div><div class="line">        &#123;</div><div class="line">         jQuery.globalEval( data );</div><div class="line">        &#125;</div><div class="line">            </div><div class="line">        <span class="comment">// Get the JavaScript object, ifJSON is used.</span></div><div class="line">        <span class="keyword">if</span>( type == <span class="string">"json"</span> )</div><div class="line">        &#123;</div><div class="line">         <span class="built_in">eval</span>( <span class="string">"data = "</span> + data );</div><div class="line">        &#125;</div><div class="line">            </div><div class="line">        <span class="comment">// evaluate scripts within html</span></div><div class="line">        <span class="keyword">if</span>( type == <span class="string">"html"</span> )</div><div class="line">        &#123;</div><div class="line">         jQuery(<span class="string">"&lt;div&gt;"</span>).html(data).evalScripts();</div><div class="line">        &#125;</div><div class="line">            </div><div class="line">        <span class="keyword">return</span> data;</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line">    jQuery.extend(&#123;</div><div class="line">        <span class="attr">handleError</span>: <span class="function"><span class="keyword">function</span> (<span class="params">s, xhr, status, e</span>) </span>&#123;</div><div class="line">            <span class="keyword">if</span> (s.error) &#123;</div><div class="line">                s.error.call(s.context || s, xhr, status, e);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (s.global) &#123;</div><div class="line">                (s.context ? jQuery(s.context) : jQuery.event).trigger(<span class="string">"ajaxError"</span>, [xhr, s, e]);</div><div class="line">            &#125;</div><div class="line">        &#125;,</div><div class="line">        <span class="attr">httpData</span>: <span class="function"><span class="keyword">function</span> (<span class="params">xhr, type, s</span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> ct = xhr.getResponseHeader(<span class="string">"content-type"</span>),</div><div class="line">    xml = type == <span class="string">"xml"</span> || !type &amp;&amp; ct &amp;&amp; ct.indexOf(<span class="string">"xml"</span>) &gt;= <span class="number">0</span>,</div><div class="line">    data = xml ? xhr.responseXML : xhr.responseText;</div><div class="line">            <span class="keyword">if</span> (xml &amp;&amp; data.documentElement.tagName == <span class="string">"parsererror"</span>)</div><div class="line">                <span class="keyword">throw</span> <span class="string">"parsererror"</span>;</div><div class="line">            <span class="keyword">if</span> (s &amp;&amp; s.dataFilter)</div><div class="line">                data = s.dataFilter(data, type);</div><div class="line">            <span class="keyword">if</span> (<span class="keyword">typeof</span> data === <span class="string">"string"</span>) &#123;</div><div class="line">                <span class="keyword">if</span> (type == <span class="string">"script"</span>)</div><div class="line">                    jQuery.globalEval(data);</div><div class="line">                <span class="keyword">if</span> (type == <span class="string">"json"</span>)</div><div class="line">                    data = <span class="built_in">window</span>[<span class="string">"eval"</span>](<span class="string">"("</span> + data + <span class="string">")"</span>);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> data;</div><div class="line">        &#125;</div><div class="line">    &#125;);</div></pre></td></tr></table></figure>
<p>在HTML页面中，此方法的调用方法<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">$.ajaxFileUpload(&#123;</div><div class="line">        <span class="attr">url</span>: <span class="string">'?m=common&amp;c=file&amp;a=ajaxUpload&amp;fieldName=bp_file&amp;sAllowExt=pdf,PDF,doc,docx,ppt,PPT,pptx'</span>,</div><div class="line">        <span class="attr">fileElementId</span>: <span class="string">"bp_file"</span>,</div><div class="line">        <span class="attr">dataType</span>: <span class="string">'json'</span>,</div><div class="line">        <span class="attr">success</span>: <span class="function"><span class="keyword">function</span> (<span class="params">data, status</span>) </span>&#123;</div><div class="line">           <span class="keyword">if</span> (data.statusCode == <span class="number">200</span>) &#123;</div><div class="line">               $(<span class="string">"#bp_file_span"</span>).html(<span class="string">"已上传："</span> + data.attachFileName);</div><div class="line">               $(<span class="string">"input[name='bp']"</span>).val(data.attachFilePath);</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">                msgAlert(<span class="string">"错误"</span>, data.message, <span class="string">"error"</span>);</div><div class="line">              &#125;</div><div class="line">        &#125;,</div><div class="line">        <span class="attr">error</span>: <span class="function"><span class="keyword">function</span> (<span class="params">data, status, e</span>) </span>&#123;</div><div class="line">             	msgAlert(<span class="string">"错误"</span>, <span class="string">"错误，请刷新页面重试"</span>, <span class="string">"error"</span>);</div><div class="line">        &#125;</div><div class="line">  &#125;);</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;
    
    </summary>
    
      <category term="Ajax" scheme="http://yoursite.com/categories/Ajax/"/>
    
    
      <category term="ajax" scheme="http://yoursite.com/tags/ajax/"/>
    
      <category term="fileUpload" scheme="http://yoursite.com/tags/fileUpload/"/>
    
  </entry>
  
  <entry>
    <title>视频播放插件 video.js的使用</title>
    <link href="http://yoursite.com/2017/05/26/%E8%A7%86%E9%A2%91%E6%92%AD%E6%94%BE%E6%8F%92%E4%BB%B6-video.js%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2017/05/26/视频播放插件-video.js的使用/</id>
    <published>2017-05-26T08:49:04.000Z</published>
    <updated>2018-03-14T07:05:10.308Z</updated>
    
    <content type="html"><![CDATA[<p>video.js是一个开源的HTML5 jQuery 视频插件，即可以播放h5视频，也可以用来播放flash视频，是一个多平台支持的产品，大多数浏览器都支持。</p>
<h3 id="第一步：引入-Video-js-的JS和CSS文件。"><a href="#第一步：引入-Video-js-的JS和CSS文件。" class="headerlink" title="第一步：引入 Video.js 的JS和CSS文件。"></a>第一步：引入 Video.js 的JS和CSS文件。</h3><ul>
<li>方法1：可以下载Video.js的源码放到自己的服务器上；</li>
<li>方法2：可以使用免费的CDN托管版本<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"http://vjs.zencdn.net/4.12/video-js.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://vjs.zencdn.net/4.12/video.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="第二步：设置flash的路径，在不支持HTML5的浏览中使用flash播放视频文件"><a href="#第二步：设置flash的路径，在不支持HTML5的浏览中使用flash播放视频文件" class="headerlink" title="第二步：设置flash的路径，在不支持HTML5的浏览中使用flash播放视频文件"></a>第二步：设置flash的路径，在不支持HTML5的浏览中使用flash播放视频文件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;videojs.options.flash.swf = <span class="string">"video-js.swf"</span>;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div></pre></td></tr></table></figure>
<h3 id="第三步：页面中加入video标签"><a href="#第三步：页面中加入video标签" class="headerlink" title="第三步：页面中加入video标签"></a>第三步：页面中加入video标签</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">	<span class="tag">&lt;<span class="name">video</span> <span class="attr">id</span>=<span class="string">”my_video_1″</span> <span class="attr">class</span>=<span class="string">”video-js</span> <span class="attr">vjs-default-skin</span>” </span></div><div class="line">	<span class="attr">controls</span> <span class="attr">preload</span>=<span class="string">”auto”</span> <span class="attr">width</span>=<span class="string">”640″</span> <span class="attr">height</span>=<span class="string">”264″</span> <span class="attr">poster</span>=<span class="string">”my_video_poster.png”</span> <span class="attr">data-setup</span>=<span class="string">”&#123;&#125;”</span>&gt;</div><div class="line">	<span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">”my_video.mp4″</span> <span class="attr">type</span>=<span class="string">’video/mp4′</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">”my_video.webm”</span> <span class="attr">type</span>=<span class="string">’video/webm’</span>&gt;</span></div><div class="line">	//以下两个样式可以选择性的在页面中添加</div><div class="line">	<span class="tag">&lt;<span class="name">track</span> <span class="attr">kind</span>=<span class="string">"captions"</span> <span class="attr">src</span>=<span class="string">"demo.captions.vtt"</span> <span class="attr">srclang</span>=<span class="string">"en"</span> <span class="attr">label</span>=<span class="string">"English"</span>&gt;</span><span class="tag">&lt;/<span class="name">track</span>&gt;</span><span class="comment">&lt;!-- Tracks need an ending tag thanks to IE9 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">track</span> <span class="attr">kind</span>=<span class="string">"subtitles"</span> <span class="attr">src</span>=<span class="string">"demo.captions.vtt"</span> <span class="attr">srclang</span>=<span class="string">"en"</span> <span class="attr">label</span>=<span class="string">"English"</span>&gt;</span><span class="tag">&lt;/<span class="name">track</span>&gt;</span><span class="comment">&lt;!-- Tracks need an ending tag thanks to IE9 --&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">video</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>poster中放的是视频的缩略图；</li>
<li>在页面加载中，video会判断浏览器支持哪个格式视频，会自动加载可播放的视频。<ul>
<li>第一个source 放的是指向mp4视频，</li>
<li>第二个指向的是webm视频。<h3 id="修改样式"><a href="#修改样式" class="headerlink" title="修改样式"></a>修改样式</h3>默认情况下，大的播放按钮放在了左上角的，这样就不会覆盖视频内容。如果你想让这个播放按钮居中，你可以给你的 video 标签添加额外的 vjs-big-play-centered 样式，比如：<br><code>class=&quot;video-js vjs-default-skin vjs-big-play-centered&quot;</code>;<br>如果你还对播放按钮样式不满意可重新定义<code>.video-js .vjs-big-play-button{/*这里的样式重写*/}</code>。<h3 id="视频自动播放"><a href="#视频自动播放" class="headerlink" title="视频自动播放"></a>视频自动播放</h3>设置自动播放，将下面的代码加到html中的代码后面<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">	&lt;script type=<span class="string">"text/javascript"</span>&gt;</div><div class="line">    <span class="keyword">var</span> myPlayer = videojs(<span class="string">'example_video_1'</span>);</div><div class="line">    videojs(<span class="string">"example_video_1"</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> myPlayer = <span class="keyword">this</span>;</div><div class="line">        myPlayer.play();</div><div class="line">    &#125;);</div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;video.js是一个开源的HTML5 jQuery 视频插件，即可以播放h5视频，也可以用来播放flash视频，是一个多平台支持的产品，大多数浏览器都支持。&lt;/p&gt;
&lt;h3 id=&quot;第一步：引入-Video-js-的JS和CSS文件。&quot;&gt;&lt;a href=&quot;#第一步：引入-
    
    </summary>
    
      <category term="HTML5" scheme="http://yoursite.com/categories/HTML5/"/>
    
    
      <category term="HTML5 - video" scheme="http://yoursite.com/tags/HTML5-video/"/>
    
  </entry>
  
  <entry>
    <title>form表单常见样式整理(包括非空验证的JS)</title>
    <link href="http://yoursite.com/2017/05/25/form%E8%A1%A8%E5%8D%95%E5%8F%8A%E9%9D%9E%E7%A9%BA%E9%AA%8C%E8%AF%81%20%EF%BC%88CSS+JS%EF%BC%89/"/>
    <id>http://yoursite.com/2017/05/25/form表单及非空验证 （CSS+JS）/</id>
    <published>2017-05-25T03:34:04.000Z</published>
    <updated>2018-03-14T07:15:41.180Z</updated>
    
    <content type="html"><![CDATA[<p>在前端工作中，form表单是很常用的样式，通常情况下我们也需要对其进行非空验证和一些常用的基本验证，比如邮箱，手机等。虽然h5的新特性中已经提供了部分API，但是由于需求不同，我们对表单的样式、写作方式也会不同，现对form表单进行整理如下：</p>
<p>表单样式整体如下：</p>
<p><img src="../img/form-example.png" width="600" height="300" alt=""></p>
<p>布局分析：    </p>
<pre><code>+ 整个布局分为3部分，提交不一定写成表单，可以由div组成。
</code></pre><p>代码结构<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bd_4"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"bd_1"</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!--下拉框区域开始--&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">label</span>&gt;</span>所需服务<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">"type"</span> <span class="attr">id</span>=<span class="string">"type"</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span>--请选择--<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"all"</span>&gt;</span>服务咨询<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">				#for(Map serverType : map.serverTypes)</div><div class="line">				<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"$&#123;serverType.code&#125;"</span> $&#123;<span class="attr">map.type</span> ? (<span class="attr">map.type.toInt</span> == <span class="string">serverType.code.toInt</span> ? '<span class="attr">selected</span>' <span class="attr">:</span> '') <span class="attr">:</span> ''&#125;&gt;</span>$&#123;serverType.name&#125;<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">				#end</div><div class="line">				<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"other"</span>&gt;</span>其他服务<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">select</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!--下拉框区域结束--&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">li</span> <span class="attr">style</span>=<span class="string">"width: 506px;height: 40px;"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">label</span> <span class="attr">id</span>=<span class="string">"type_self_lable"</span> <span class="attr">style</span>=<span class="string">"display: none"</span>&gt;</span>其他服务<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"type_self"</span> <span class="attr">id</span>=<span class="string">"type_self"</span> <span class="attr">style</span>=<span class="string">"display: none"</span> <span class="attr">maxlength</span>=<span class="string">100</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!--日期选框，使用的是WdatePicker插件--&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">label</span>&gt;</span>预约日期<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"time"</span> <span class="attr">id</span>=<span class="string">"time"</span> <span class="attr">onfocus</span>=<span class="string">"WdatePicker(&#123;dateFmt:'yyyy-MM-dd HH:mm',minDate:'%y-%M-%d %H:%m',disabledDays:[0,6]&#125;)"</span> /&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">label</span>&gt;</span>联系人<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"contact"</span> <span class="attr">id</span>=<span class="string">"contact"</span> <span class="attr">maxlength</span>=<span class="string">20/</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">label</span> <span class="attr">style</span>=<span class="string">"line-height:20px;"</span>&gt;</span>公司团队名称<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">id</span>=<span class="string">"name"</span> <span class="attr">maxlength</span>=<span class="string">100</span> /&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">label</span>&gt;</span>手机号<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"mob"</span> <span class="attr">id</span>=<span class="string">"mob"</span> <span class="attr">value</span>=<span class="string">""</span>  <span class="attr">maxlength</span>=<span class="string">11/</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">label</span>&gt;</span>职务<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"job"</span> <span class="attr">id</span>=<span class="string">"job"</span> <span class="attr">maxlength</span>=<span class="string">20/</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">label</span>&gt;</span>邮箱<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"email"</span> <span class="attr">id</span>=<span class="string">"email"</span> <span class="attr">maxlength</span>=<span class="string">30/</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!--所处行业，多选框--&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"bd_2"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"bd_2l"</span>&gt;</span>所处行业<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"bd_2r"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"chkbox"</span> <span class="attr">for</span>=<span class="string">"Map hy : map.hys"</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"hy"</span> <span class="attr">id</span>=<span class="string">"hy_$&#123;hy.ID&#125;"</span> <span class="attr">value</span>=<span class="string">"$&#123;hy.ID&#125;"</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">label</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"left"</span> <span class="attr">onclick</span>=<span class="string">"$('#hy_$&#123;hy.ID&#125;').click();"</span> <span class="attr">style</span>=<span class="string">"cursor: pointer;width: 160px;display: block;"</span> <span class="attr">title</span>=<span class="string">"$&#123;hy.value&#125;"</span>&gt;</span>$&#123;hy.value&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!--提交--&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"bd_5"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:void(0)"</span> <span class="attr">onclick</span>=<span class="string">"$('form').submit();"</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"qx"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:window.close();"</span>&gt;</span>取消<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>样式代码：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div></pre></td><td class="code"><pre><div class="line">	<span class="selector-class">.bd_4</span> &#123;</div><div class="line">	<span class="attribute">width</span>: <span class="number">1020px</span>;</div><div class="line">	<span class="attribute">margin</span>: <span class="number">0</span> auto;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.bd_4</span> <span class="selector-class">.bd_1</span> <span class="selector-tag">li</span> &#123;</div><div class="line">	<span class="attribute">width</span>: <span class="number">506px</span>;</div><div class="line">	<span class="attribute">float</span>: left;</div><div class="line">	<span class="attribute">padding-top</span>: <span class="number">30px</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.bd_4</span> <span class="selector-class">.bd_1</span> <span class="selector-tag">li</span> <span class="selector-tag">label</span> &#123;</div><div class="line">	<span class="attribute">font-size</span>: <span class="number">16px</span>;</div><div class="line">	<span class="attribute">color</span>: <span class="number">#666</span>;</div><div class="line">	<span class="attribute">line-height</span>: <span class="number">40px</span>;</div><div class="line">	<span class="attribute">text-align</span>: right;</div><div class="line">	<span class="attribute">width</span>: <span class="number">78px</span>;</div><div class="line">	<span class="attribute">float</span>: left;</div><div class="line">	<span class="attribute">padding-left</span>: <span class="number">40px</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.bd_4</span> <span class="selector-class">.bd_1</span> <span class="selector-tag">li</span> <span class="selector-tag">input</span> &#123;</div><div class="line">	<span class="attribute">margin</span>: <span class="number">0</span> <span class="number">20px</span> <span class="number">0</span> <span class="number">20px</span>;</div><div class="line">	<span class="attribute">float</span>: left;</div><div class="line">	<span class="attribute">width</span>: <span class="number">324px</span>;</div><div class="line">	<span class="attribute">height</span>: <span class="number">40px</span>;</div><div class="line">	<span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#d9d9d9</span>;</div><div class="line">	<span class="attribute">padding-left</span>: <span class="number">20px</span>;</div><div class="line">	<span class="attribute">font-size</span>: <span class="number">16px</span>;</div><div class="line">	<span class="attribute">color</span>: <span class="number">#999</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.bd_4</span> <span class="selector-class">.bd_1</span> <span class="selector-tag">li</span> <span class="selector-tag">select</span> &#123;</div><div class="line">	<span class="attribute">font-size</span>: <span class="number">16px</span>;</div><div class="line">	<span class="attribute">color</span>: <span class="number">#666</span>;</div><div class="line">	<span class="attribute">text-align</span>: center;</div><div class="line">	<span class="attribute">width</span>: <span class="number">344px</span>;</div><div class="line">	<span class="attribute">height</span>: <span class="number">40px</span>;</div><div class="line">	<span class="attribute">line-height</span>: <span class="number">40px</span>;</div><div class="line">	<span class="attribute">float</span>: left;</div><div class="line">	<span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#d9d9d9</span>;</div><div class="line">	<span class="attribute">margin-left</span>: <span class="number">20px</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.main</span> <span class="selector-class">.bd_2</span> &#123;</div><div class="line">	<span class="attribute">clear</span>: both;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.main</span> <span class="selector-class">.bd_2</span> <span class="selector-class">.bd_2l</span> &#123;</div><div class="line">	<span class="attribute">font-size</span>: <span class="number">16px</span>;</div><div class="line">	<span class="attribute">color</span>: <span class="number">#666</span>;</div><div class="line">	<span class="attribute">line-height</span>: <span class="number">40px</span>;</div><div class="line">	<span class="attribute">padding-right</span>: <span class="number">18px</span>;</div><div class="line">	<span class="attribute">width</span>: <span class="number">116px</span>;</div><div class="line">	<span class="attribute">text-align</span>: right;</div><div class="line">	<span class="attribute">float</span>: left;</div><div class="line">	<span class="attribute">padding-top</span>: <span class="number">20px</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.main</span> <span class="selector-class">.bd_2</span> <span class="selector-class">.bd_2r</span> &#123;</div><div class="line">	<span class="attribute">float</span>: left;</div><div class="line">	<span class="attribute">padding-top</span>: <span class="number">20px</span>;</div><div class="line">	<span class="attribute">width</span>: <span class="number">800px</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.main</span> <span class="selector-class">.bd_2</span> <span class="selector-class">.bd_2r</span>	 <span class="selector-class">.chkbox</span> &#123;</div><div class="line">	<span class="attribute">margin-top</span>: <span class="number">10px</span>;</div><div class="line">	<span class="attribute">float</span>: left;</div><div class="line">	<span class="attribute">position</span>: relative;</div><div class="line">	<span class="attribute">width</span>: <span class="number">120px</span>;</div><div class="line">	<span class="attribute">overflow</span>: hidden;</div><div class="line">	<span class="attribute">display</span>: inline-block;</div><div class="line">	<span class="attribute">margin-bottom</span>: <span class="number">5px</span>;</div><div class="line">	<span class="attribute">height</span>: <span class="number">23px</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.main</span> <span class="selector-class">.bd_2</span> <span class="selector-class">.bd_2r</span>	<span class="selector-class">.chkbox</span> <span class="selector-tag">span</span> &#123;</div><div class="line">	<span class="attribute">margin-left</span>: <span class="number">25px</span>;</div><div class="line">	<span class="attribute">margin-top</span>: <span class="number">3px</span>;</div><div class="line">	<span class="attribute">display</span>: inline;</div><div class="line">	<span class="attribute">height</span>: <span class="number">22px</span>;</div><div class="line">	<span class="attribute">color</span>: <span class="number">#666</span>;</div><div class="line">	<span class="attribute">width</span>: <span class="number">80px</span>;</div><div class="line">	<span class="attribute">overflow</span>: hidden;</div><div class="line">	<span class="attribute">text-overflow</span>: ellipsis;</div><div class="line">	<span class="attribute">white-space</span>: nowrap;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.main</span> <span class="selector-class">.bd_2</span> <span class="selector-class">.bd_2r</span>	<span class="selector-class">.chkbox</span> <span class="selector-tag">input</span><span class="selector-attr">[type="checkbox"]</span> &#123;</div><div class="line">	<span class="attribute">opacity</span>: <span class="number">0</span>;</div><div class="line">	<span class="attribute">float</span>: left;</div><div class="line">	<span class="attribute">left</span>: <span class="number">6px</span>;</div><div class="line">	<span class="attribute">top</span>: <span class="number">6px</span>;</div><div class="line">	<span class="attribute">position</span>: absolute;</div><div class="line">	<span class="attribute">z-index</span>: <span class="number">100</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.main</span> <span class="selector-class">.bd_2</span> <span class="selector-class">.bd_2r</span>	<span class="selector-class">.chkbox</span> <span class="selector-tag">input</span><span class="selector-attr">[type="checkbox"]</span><span class="selector-pseudo">:checked+label</span><span class="selector-pseudo">::after</span> &#123;</div><div class="line">	<span class="attribute">opacity</span>: <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.main</span> <span class="selector-class">.bd_2</span> <span class="selector-class">.bd_2r</span>	 <span class="selector-class">.chkbox</span> <span class="selector-tag">label</span><span class="selector-pseudo">::after</span> &#123;</div><div class="line">	<span class="attribute">border-color</span>: -moz-use-text-color -moz-use-text-color <span class="number">#272636</span> <span class="number">#272636</span>;</div><div class="line">	<span class="attribute">border-image</span>: none;</div><div class="line">	<span class="attribute">border-style</span>: none none solid solid;</div><div class="line">	<span class="attribute">border-width</span>: medium medium <span class="number">2px</span> <span class="number">2px</span>;</div><div class="line">	<span class="attribute">content</span>: <span class="string">""</span>;</div><div class="line">	<span class="attribute">height</span>: <span class="number">6px</span>;</div><div class="line">	<span class="attribute">left</span>: <span class="number">3px</span>;</div><div class="line">	<span class="attribute">opacity</span>: <span class="number">0</span>;</div><div class="line">	<span class="attribute">position</span>: absolute;</div><div class="line">	<span class="attribute">top</span>: <span class="number">0px</span>;</div><div class="line">	<span class="attribute">transform</span>: <span class="built_in">rotate</span>(-45deg);</div><div class="line">	<span class="attribute">width</span>: <span class="number">13px</span>;</div><div class="line">	<span class="attribute">border-radius</span>: <span class="number">1%</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.main</span> <span class="selector-class">.bd_2</span> <span class="selector-class">.bd_2r</span>	<span class="selector-class">.chkbox</span> <span class="selector-tag">label</span> &#123;</div><div class="line">	<span class="attribute">background</span>: <span class="built_in">rgba</span>(255, 255, 255, 1) none repeat scroll <span class="number">0</span> <span class="number">0</span>;</div><div class="line">	<span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#dbdbdb</span>;</div><div class="line">	<span class="attribute">cursor</span>: pointer;</div><div class="line">	<span class="attribute">height</span>: <span class="number">14px</span>;</div><div class="line">	<span class="attribute">position</span>: absolute;</div><div class="line">	<span class="attribute">left</span>: <span class="number">4px</span>;</div><div class="line">	<span class="attribute">top</span>: <span class="number">5px</span>;</div><div class="line">	<span class="attribute">width</span>: <span class="number">14px</span>;</div><div class="line">	<span class="attribute">border-radius</span>: <span class="number">1%</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.bd_5</span> &#123;</div><div class="line">	<span class="attribute">clear</span>: both;</div><div class="line">	<span class="attribute">width</span>: <span class="number">340px</span>;</div><div class="line">	<span class="attribute">margin</span>: <span class="number">0</span> auto;</div><div class="line">	<span class="attribute">padding-top</span>: <span class="number">80px</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.bd_5</span> <span class="selector-tag">li</span> &#123;</div><div class="line">	<span class="attribute">padding</span>: <span class="number">0</span>;</div><div class="line">	<span class="attribute">height</span>: <span class="number">36px</span>;</div><div class="line">	<span class="attribute">width</span>: <span class="number">132px</span>;</div><div class="line">	<span class="attribute">background</span>: <span class="number">#2a95e5</span>;</div><div class="line">	<span class="attribute">float</span>: left;</div><div class="line">	<span class="attribute">line-height</span>: <span class="number">36px</span>;</div><div class="line">	<span class="attribute">text-align</span>: center;</div><div class="line">	<span class="attribute">border-radius</span>: <span class="number">18px</span>;</div><div class="line">	<span class="attribute">margin-right</span>: <span class="number">20px</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.bd_5</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span> &#123;</div><div class="line">	<span class="attribute">display</span>: block;</div><div class="line">	<span class="attribute">color</span>: <span class="number">#fff</span>;</div><div class="line">	<span class="attribute">font-size</span>: <span class="number">18px</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.bd_5</span> <span class="selector-class">.qx</span> &#123;</div><div class="line">	<span class="attribute">background</span>: <span class="number">#e9e9e9</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.bd_5</span> <span class="selector-class">.qx</span> <span class="selector-tag">a</span> &#123;</div><div class="line">	<span class="attribute">color</span>: <span class="number">#666</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.baoming</span> &#123;</div><div class="line">	<span class="attribute">width</span>: <span class="number">100%</span>;</div><div class="line">	<span class="attribute">min-width</span>: <span class="number">1200px</span>;</div><div class="line">	<span class="attribute">background-color</span>: <span class="built_in">rgba</span>(0, 0, 0, 0.5);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.baoming</span> <span class="selector-tag">span</span> &#123;</div><div class="line">	<span class="attribute">float</span>: left;</div><div class="line">	<span class="attribute">width</span>: <span class="number">370px</span>;</div><div class="line">	<span class="attribute">color</span>: <span class="number">#fff</span>;</div><div class="line">	<span class="attribute">display</span>: block;</div><div class="line">	<span class="attribute">overflow</span>: hidden;</div><div class="line">	<span class="attribute">text-overflow</span>: ellipsis;</div><div class="line">	<span class="attribute">white-space</span>: nowrap;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.baoming</span> <span class="selector-tag">h1</span> &#123;</div><div class="line">	<span class="attribute">color</span>: <span class="number">#fff</span>;</div><div class="line">	<span class="attribute">line-height</span>: <span class="number">50px</span>;</div><div class="line">	<span class="attribute">padding</span>: <span class="number">15px</span> <span class="number">50px</span>;</div><div class="line">	<span class="attribute">word-wrap</span>: break-word;</div><div class="line">	<span class="attribute">word-break</span>: break-all;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.baoming</span> <span class="selector-tag">h1</span> <span class="selector-tag">a</span> &#123;</div><div class="line">	<span class="attribute">float</span>: right;</div><div class="line">	<span class="attribute">margin-right</span>: <span class="number">10px</span>;</div><div class="line">	<span class="attribute">margin-top</span>: <span class="number">10px</span>;</div><div class="line">	<span class="attribute">display</span>: inline-block;</div><div class="line">	<span class="attribute">margin-left</span>: <span class="number">20px</span>;</div><div class="line">	<span class="attribute">font-size</span>: <span class="number">18px</span>;</div><div class="line">	<span class="attribute">font-weight</span>: normal;</div><div class="line">	<span class="attribute">color</span>: <span class="number">#fff</span>;</div><div class="line">	<span class="attribute">width</span>: <span class="number">92px</span>;</div><div class="line">	<span class="attribute">height</span>: <span class="number">32px</span>;</div><div class="line">	<span class="attribute">line-height</span>: <span class="number">32px</span>;</div><div class="line">	<span class="attribute">background</span>: <span class="number">#00a8ff</span>;</div><div class="line">	<span class="attribute">border-radius</span>: <span class="number">3px</span>;</div><div class="line">	<span class="attribute">text-align</span>: center;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.baoming_a</span> &#123;</div><div class="line">	<span class="attribute">float</span>: right;</div><div class="line">	<span class="attribute">margin-right</span>: <span class="number">10px</span>;</div><div class="line">	<span class="attribute">display</span>: inline-block;</div><div class="line">	<span class="attribute">margin-left</span>: <span class="number">20px</span>;</div><div class="line">	<span class="attribute">font-size</span>: <span class="number">18px</span>;</div><div class="line">	<span class="attribute">font-weight</span>: normal;</div><div class="line">	<span class="attribute">color</span>: <span class="number">#fff</span>;</div><div class="line">	<span class="attribute">width</span>: <span class="number">92px</span>;</div><div class="line">	<span class="attribute">height</span>: <span class="number">32px</span>;</div><div class="line">	<span class="attribute">line-height</span>: <span class="number">32px</span>;</div><div class="line">	<span class="attribute">background</span>: <span class="number">#00a8ff</span>;</div><div class="line">	<span class="attribute">border-radius</span>: <span class="number">3px</span>;</div><div class="line">	<span class="attribute">text-align</span>: center;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.baoming</span> <span class="selector-tag">ul</span> &#123;</div><div class="line">	<span class="attribute">height</span>: <span class="number">40px</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.baoming</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> &#123;</div><div class="line">	<span class="attribute">float</span>: left;</div><div class="line">	<span class="attribute">color</span>: <span class="number">#fff</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.baoming</span> <span class="selector-tag">ul</span> <span class="selector-class">.bm_1</span> &#123;</div><div class="line">	<span class="attribute">margin-left</span>: <span class="number">50px</span>;</div><div class="line">	<span class="attribute">padding-left</span>: <span class="number">20px</span>;</div><div class="line">	<span class="attribute">background</span>: <span class="built_in">url</span>(../images/pic1.png) no-repeat left;</div><div class="line">	<span class="attribute">margin-right</span>: <span class="number">20px</span>;</div><div class="line">	<span class="attribute">max-width</span>: <span class="number">550px</span>;</div><div class="line">	<span class="attribute">overflow</span>: hidden;</div><div class="line">	<span class="attribute">line-height</span>: <span class="number">40px</span>;</div><div class="line">	<span class="attribute">text-overflow</span>: ellipsis;</div><div class="line">	<span class="attribute">white-space</span>: nowrap;</div><div class="line">	<span class="attribute">padding-left</span>: <span class="number">20px</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.baoming</span> <span class="selector-tag">ul</span> <span class="selector-class">.bm_2</span> &#123;</div><div class="line">	<span class="attribute">line-height</span>: <span class="number">40px</span>;</div><div class="line">	<span class="attribute">padding-left</span>: <span class="number">25px</span>;</div><div class="line">	<span class="attribute">background</span>: <span class="built_in">url</span>(../images/pic2.png) no-repeat left;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>对文本框中输入值的判断：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//判断当前值是否为空</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkIsBlank</span>(<span class="params">id, err</span>) </span>&#123;</div><div class="line">		<span class="keyword">var</span> val = $(<span class="string">"#"</span>+id).val();</div><div class="line">		<span class="keyword">if</span>( val == <span class="literal">null</span> || val == <span class="string">""</span> )&#123;				</div><div class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">	&#125;</div><div class="line"><span class="comment">//表单提交时对文本框中的内容进行判断</span></div><div class="line">$(<span class="string">"form"</span>).submit(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="comment">//验证所需服务</span></div><div class="line">	<span class="keyword">if</span>(checkIsBlank(<span class="string">"type"</span>) == <span class="literal">false</span>)&#123;</div><div class="line">		top.msgAlert(<span class="string">"错误"</span>, <span class="string">"请选择需要预约的服务！"</span>, <span class="string">"error"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">			$(<span class="string">"#type"</span>).focus();</div><div class="line">		&#125;, <span class="literal">null</span>, <span class="literal">null</span>);</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">//验证其他服务</span></div><div class="line">	<span class="keyword">if</span>(($(<span class="string">"#type"</span>).val() == <span class="string">"other"</span>) &amp;&amp; (checkIsBlank(<span class="string">"type_self"</span>) == <span class="literal">false</span>) )&#123;</div><div class="line">		top.msgAlert(<span class="string">"错误"</span>, <span class="string">"请填写其它服务内容！"</span>, <span class="string">"error"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">			$(<span class="string">"#type_self"</span>).focus();</div><div class="line">		&#125;, <span class="literal">null</span>, <span class="literal">null</span>);</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">//验证时间是否正确</span></div><div class="line">	<span class="keyword">if</span>(checkIsBlank(<span class="string">"time"</span>) == <span class="literal">false</span>)&#123;</div><div class="line">		top.msgAlert(<span class="string">"错误"</span>, <span class="string">"请选择预约日期！"</span>, <span class="string">"error"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">			$(<span class="string">"#time"</span>).focus();</div><div class="line">		&#125;, <span class="literal">null</span>, <span class="literal">null</span>);</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span>(checkIsBlank(<span class="string">"contact"</span>) == <span class="literal">false</span>)&#123;</div><div class="line">		top.msgAlert(<span class="string">"错误"</span>, <span class="string">"请填写联系人！"</span>, <span class="string">"error"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">			$(<span class="string">"#contact"</span>).focus();</div><div class="line">		&#125;, <span class="literal">null</span>, <span class="literal">null</span>);</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span>(checkIsBlank(<span class="string">"name"</span>) == <span class="literal">false</span>)&#123;</div><div class="line">	top.msgAlert(<span class="string">"错误"</span>, <span class="string">"请填写公司团队名称！"</span>, <span class="string">"error"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">		$(<span class="string">"#name"</span>).focus();</div><div class="line">	&#125;, <span class="literal">null</span>, <span class="literal">null</span>);</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">//电话号码的正则判断</span></div><div class="line">	<span class="keyword">var</span> mobileREG = <span class="regexp">/^1&#123;1&#125;\d&#123;10&#125;$/</span>;</div><div class="line">	<span class="keyword">var</span> mobile = $(<span class="string">"#mob"</span>).val();</div><div class="line">	<span class="keyword">if</span> (mobile == <span class="literal">null</span> || mobile == <span class="string">''</span> || !mobileREG.test(mobile)) &#123;</div><div class="line">		top.msgAlert(<span class="string">"错误"</span>, <span class="string">"请填写正确的手机号！"</span>, <span class="string">"error"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">			$(<span class="string">"#mob"</span>).focus();</div><div class="line">		&#125;, <span class="literal">null</span>, <span class="literal">null</span>);</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span>(checkIsBlank(<span class="string">"job"</span>) == <span class="literal">false</span>)&#123;</div><div class="line">		top.msgAlert(<span class="string">"错误"</span>, <span class="string">"请填写职务名称！"</span>, <span class="string">"error"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">			$(<span class="string">"#job"</span>).focus();</div><div class="line">		&#125;, <span class="literal">null</span>, <span class="literal">null</span>);</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">//邮箱的正则判断</span></div><div class="line">	<span class="keyword">if</span> (<span class="regexp">/^\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$/</span>.test($(<span class="string">"#email"</span>).val()) == <span class="literal">false</span>) &#123;</div><div class="line">		top.msgAlert(<span class="string">"错误"</span>, <span class="string">"请填写正确的邮箱！"</span>, <span class="string">"error"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">			$(<span class="string">"#email"</span>).focus();</div><div class="line">		&#125;, <span class="literal">null</span>, <span class="literal">null</span>);</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">var</span> chk_value =[];    </div><div class="line">	 $(<span class="string">'input[name="hy"]:checked'</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;    </div><div class="line">		 chk_value.push($(<span class="keyword">this</span>).val());    </div><div class="line">	 &#125;);    </div><div class="line">	 </div><div class="line">	<span class="keyword">if</span>(chk_value.length==<span class="number">0</span>)&#123;</div><div class="line">	 top.msgAlert(<span class="string">"错误"</span>, <span class="string">"请选择您所处的行业！"</span>, <span class="string">"error"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	&#125;, <span class="literal">null</span>, <span class="literal">null</span>);</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>; </div><div class="line">	 &#125;   </div><div class="line">	 <span class="comment">//表单提交</span></div><div class="line">	$.post(<span class="string">"index.jsp?m=client&amp;c=bespeak&amp;a=save"</span>, $(<span class="string">"form"</span>).serializeArray(), <span class="function"><span class="keyword">function</span>(<span class="params">result</span>) </span>&#123;</div><div class="line">		top.msgAlert(result.success ? <span class="string">"消息"</span> : <span class="string">"错误"</span>, result.msg, result.success ? <span class="string">"ok"</span> : <span class="string">"error"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">			<span class="keyword">if</span>(result.success)&#123;</div><div class="line">				top.window.location = <span class="string">"index.jsp?m=client&amp;c=index&amp;a=ucenter&amp;page=6"</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;, <span class="literal">null</span>, <span class="literal">null</span>);</div><div class="line">	&#125;, <span class="string">"json"</span>);</div><div class="line">	<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在前端工作中，form表单是很常用的样式，通常情况下我们也需要对其进行非空验证和一些常用的基本验证，比如邮箱，手机等。虽然h5的新特性中已经提供了部分API，但是由于需求不同，我们对表单的样式、写作方式也会不同，现对form表单进行整理如下：&lt;/p&gt;
&lt;p&gt;表单样式整体如下
    
    </summary>
    
      <category term="CSS" scheme="http://yoursite.com/categories/CSS/"/>
    
    
      <category term="form" scheme="http://yoursite.com/tags/form/"/>
    
      <category term="validate" scheme="http://yoursite.com/tags/validate/"/>
    
  </entry>
  
  <entry>
    <title>Ajax请求</title>
    <link href="http://yoursite.com/2017/05/24/$.post()%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2017/05/24/$.post()使用/</id>
    <published>2017-05-24T02:27:04.000Z</published>
    <updated>2018-03-14T06:48:44.850Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要对 $.post()的使用进行介绍，$.get()的使用与其类似。<br>我们在使用$.ajax()发送请求时，可以发送 GET请求和POST请求<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">$.ajax(&#123;</div><div class="line">     url:"page.php",</div><div class="line">     type:"post",</div><div class="line">     data:data,</div><div class="line">     dataType:"json",</div><div class="line">     success:function(data)&#123;&#125;,</div><div class="line">     error:function()&#123;&#125;</div><div class="line">&#125;)</div><div class="line">$.ajax(&#123;</div><div class="line">     url:"page.php?name='lisi'",</div><div class="line">     type:"get",</div><div class="line">     dataType:"json",</div><div class="line">     success:function(data)&#123;&#125;,</div><div class="line">     error:function()&#123;&#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>而 $.get()和 $.post()是 $.ajax()的简洁写法。<br>$.post(url, [data] , [callback] , [type] );</p>
<h4 id="参数："><a href="#参数：" class="headerlink" title="参数："></a>参数：</h4><ul>
<li>url: 发送请求的URL地址；</li>
<li>data: 可选，要发送给服务器的数据，以键值对的形式表示；</li>
<li>callback：可选，载入成功时回调函数(当response的返回状态是success时才调用该方法)</li>
<li>type: 客户端请求的类型(JSON，XML，HTML，text等等)；<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$.post(<span class="string">"action.php"</span>,&#123;<span class="attr">email</span>:$(<span class="string">'#email'</span>).val(),<span class="attr">address</span>:$(<span class="string">'#address'</span>).val()&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</div><div class="line">   	$(<span class="string">'#msg'</span>).html(data);  </div><div class="line">&#125;)</div></pre></td></tr></table></figure></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要对 $.post()的使用进行介绍，$.get()的使用与其类似。&lt;br&gt;我们在使用$.ajax()发送请求时，可以发送 GET请求和POST请求&lt;br&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gut
    
    </summary>
    
      <category term="jQuery" scheme="http://yoursite.com/categories/jQuery/"/>
    
    
      <category term="ajax" scheme="http://yoursite.com/tags/ajax/"/>
    
      <category term="post" scheme="http://yoursite.com/tags/post/"/>
    
      <category term="get" scheme="http://yoursite.com/tags/get/"/>
    
  </entry>
  
  <entry>
    <title>复选框选中，closest()用法以及e.target()</title>
    <link href="http://yoursite.com/2017/05/24/%E5%A4%8D%E9%80%89%E6%A1%86%E9%80%89%E4%B8%AD%EF%BC%8Cclosest()%E7%94%A8%E6%B3%95%E4%BB%A5%E5%8F%8Ae.target()/"/>
    <id>http://yoursite.com/2017/05/24/复选框选中，closest()用法以及e.target()/</id>
    <published>2017-05-24T02:24:04.000Z</published>
    <updated>2018-03-14T06:56:43.964Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//复选框，当点击文本时，复选框选中；</div><div class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"Field"</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">value</span>=<span class="string">"移动互联网"</span> /&gt;</span>移动互联网<span class="tag">&lt;/<span class="name">label</span>&gt;</span> &amp;nbsp&amp;nbsp</div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">required</span>  <span class="attr">name</span>=<span class="string">"Tel"</span> <span class="attr">placeholder</span>=<span class="string">"电话"</span> <span class="attr">pattern</span>=<span class="string">"\d&#123;11&#125;"</span> <span class="attr">oninvalid</span>=<span class="string">"setCustomValidity('请填写11位的手机号码')&gt;</span></span></div></pre></td></tr></table></figure>
<h2 id="closest-用法"><a href="#closest-用法" class="headerlink" title="closest()用法"></a>closest()用法</h2><p><code>closest()</code>从当前元素开始向上找，获得匹配选择器的第一个祖先元素；<br><code>parents()</code>从父元素开始找，向上遍历，直到文档的根元素为止。</p>
<p>例如：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">	<span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"one"</span> <span class="attr">class</span>=<span class="string">"level-1"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-i"</span>&gt;</span>I<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">"ii"</span> <span class="attr">class</span>=<span class="string">"item-ii"</span>&gt;</span>II</div><div class="line">      <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"level-2"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-a"</span>&gt;</span>A<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-b"</span>&gt;</span>B</div><div class="line">          <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"level-3"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-1"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-2"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-3"</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">          <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-c"</span>&gt;</span>C<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">     <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-iii"</span>&gt;</span>III<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div></pre></td></tr></table></figure>
<p><code>$(&#39;li.item-a&#39;).closest(&#39;ul&#39;).css(&#39;background-color&#39;, &#39;red&#39;);</code>此时所获得的是 level-2 的 ul 的颜色会变成红色；<br><code>$(&#39;li.item-a&#39;).closest(&#39;li&#39;).css(&#39;background-color&#39;, &#39;red&#39;);</code>此时A li 的背景颜色变成红色；</p>
<h2 id="e-target"><a href="#e-target" class="headerlink" title="e.target"></a>e.target</h2><p><code>e.target</code>需要看当前目标：<br>在event事件中，代表点击事件；<br>在loader事件中，代表加载对象；<br>e.target是目标对象，e.event是目标所发生的事件</p>
]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div
    
    </summary>
    
      <category term="jQuery" scheme="http://yoursite.com/categories/jQuery/"/>
    
    
  </entry>
  
  <entry>
    <title>Mac配置Apache-Tomcat服务</title>
    <link href="http://yoursite.com/2017/05/16/Mac%E9%85%8D%E7%BD%AEApache-Tomcat%E6%9C%8D%E5%8A%A1/"/>
    <id>http://yoursite.com/2017/05/16/Mac配置Apache-Tomcat服务/</id>
    <published>2017-05-16T09:03:04.000Z</published>
    <updated>2018-03-14T07:20:17.683Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第一步：下载Tomcat"><a href="#第一步：下载Tomcat" class="headerlink" title="第一步：下载Tomcat"></a>第一步：下载Tomcat</h2><p></p><p>直接上官网 <code>http://tomcat.apache.org/download-80.cgi</code>上下载对应版本的Tomcat包</p><br><img src="../img/tomcat-download.png" width="600" height="300" alt=""><p></p>
<h2 id="第二步：将下载好的包放到本地目录中"><a href="#第二步：将下载好的包放到本地目录中" class="headerlink" title="第二步：将下载好的包放到本地目录中"></a>第二步：将下载好的包放到本地目录中</h2><ol>
<li>在你的Finder中，通过<code>commnd+.</code>显示隐藏的文件夹</li>
<li>进入/usr/local,将下载好的Tomcat包放到/local目录中</li>
</ol>
<p><img src="../img/tomcat-mulu.png" width="600" height="300" alt=""></p>
<h2 id="第三步：配置环境变量"><a href="#第三步：配置环境变量" class="headerlink" title="第三步：配置环境变量"></a>第三步：配置环境变量</h2><p></p><p>为了方便以后对Tomcat的操作，可以将Tomcat的bin目录放到全局变量中，配置方法如下</p><p></p>
<ol>
<li>查看配置的变量：<code>echo $PATH</code></li>
<li>进入配置文件 <code>vim ~/.bash_profile</code></li>
<li>输入<code>i</code>进入编辑模式；</li>
<li>输入<code>export PATH=$PATH:/Users/gaonana/Documents/高娜娜文件/mongodb-osx-x86_64-3.4.3</code>;相当于在PATH变量后面多加一个自己定义的目录；</li>
<li>点击<code>esc</code>键进入末行模式；</li>
<li><code>:wq</code>保存配置文件并退出；</li>
<li>执行<code>source .bash_profile</code>使配置生效</li>
</ol>
<h2 id="第四步：-启动Tomcat"><a href="#第四步：-启动Tomcat" class="headerlink" title="第四步： 启动Tomcat"></a>第四步： 启动Tomcat</h2><ol>
<li>配置环境变量后，可以很便捷的terminal中通过 <code>startup.sh</code>启动Tomcat服务器；<blockquote>
<p>注意：如果当 <code>startup.sh</code>后出现<code>permission denied</code>时，需要对此目录进行权限设置。在terminal中，输入<code>sudo chmod 755 xxx/bin/*.sh</code>(xxx表示Tomcat的路径)；输入密码就可以了。</p>
</blockquote>
</li>
<li>在浏览器中输入 <code>localhost:8080</code>就可以直接入Tomcat服务,显示一下页面即成功</li>
</ol>
<p><img src="../img/tomcat-yemian.png" width="600" height="300" alt=""></p>
<ol>
<li>通过<code>shutdown.sh</code> 可以终止程序</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;第一步：下载Tomcat&quot;&gt;&lt;a href=&quot;#第一步：下载Tomcat&quot; class=&quot;headerlink&quot; title=&quot;第一步：下载Tomcat&quot;&gt;&lt;/a&gt;第一步：下载Tomcat&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;直接上官网 &lt;code&gt;http://tomc
    
    </summary>
    
      <category term="Apache-Tomcat" scheme="http://yoursite.com/categories/Apache-Tomcat/"/>
    
    
      <category term="Mac" scheme="http://yoursite.com/tags/Mac/"/>
    
      <category term="Apache-Tomcat" scheme="http://yoursite.com/tags/Apache-Tomcat/"/>
    
  </entry>
  
</feed>
