<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>高工@博客</title>
  <subtitle>记录学习的技能和遇到的问题</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-04-12T13:16:48.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Gaonana</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Cookie 和 Session 的使用</title>
    <link href="http://yoursite.com/2017/04/08/cookie%20%E5%92%8C%20session%20%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2017/04/08/cookie 和 session 的使用/</id>
    <published>2017-04-08T04:39:04.000Z</published>
    <updated>2017-04-12T13:16:48.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="cookie-和-session-的使用"><a href="#cookie-和-session-的使用" class="headerlink" title="cookie 和 session 的使用"></a>cookie 和 session 的使用</h1><h2 id="cookie和session"><a href="#cookie和session" class="headerlink" title="cookie和session"></a>cookie和session</h2><h3 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h3><pre><code>&gt; cookie进行状态管理。http是无状态管理
</code></pre><ol>
<li>sessionStorage 、 localStorage 和 cookie 都是在浏览器端存储的数据；</li>
<li>sessionStorage 在同源的同窗口始终存在数据。窗口关闭，数据销毁；  </li>
<li>url重写可以解决用户禁用cookie的情况下依然可以保持客户端和服务端的通信状态(这个是后台写的)</li>
<li><code>document.cookie</code>可以访问cookie;</li>
<li>cookie的格式:键值对;</li>
<li>多个cookie之间使用分号和空格隔开;例如:<code>username=zhangsan; age=12</code>;</li>
<li><code>document.cookie = &#39;username=zhangsan&#39;</code>在浏览器中是有缓存的,关闭浏览区可以清除;<h3 id="cookie的分类"><a href="#cookie的分类" class="headerlink" title="cookie的分类"></a>cookie的分类</h3></li>
<li>session cookie 会话cookie:关闭浏览器之后自动清除,但是可以增加其有效期,以下例子增加了5天的有效期。</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</div><div class="line">date.setDate(date.getDate()+<span class="number">5</span>); </div><div class="line"><span class="built_in">document</span>.cookie=<span class="string">"username=lisi; expires="</span>+date.toGMTString();</div></pre></td></tr></table></figure>
<ol>
<li>persistant cookie 持久cookie:关闭浏览器</li>
<li>获得cookie,封装函数</li>
<li>在子路径设置的cookie,在父路径下是获取不到的;反过来可以<br> 不可以跨域获取cookie,但是可以跨页面共享;</li>
<li><p>可以用jquery-cookie插件应用;</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">//设置cookie</span></div><div class="line"> <span class="function"><span class="keyword">function</span> <span class="title">setCookie</span>(<span class="params">key,value,expires</span>) </span>&#123;</div><div class="line">         <span class="built_in">document</span>.cookie = key +<span class="string">'='</span>+value+<span class="string">';expires='</span>+expires+<span class="string">"; path=/"</span>;</div><div class="line">     &#125;</div><div class="line"><span class="comment">//获得cookie</span></div><div class="line"> <span class="function"><span class="keyword">function</span> <span class="title">getCookie</span>(<span class="params">cname</span>) </span>&#123;</div><div class="line">     <span class="keyword">var</span> cookie = <span class="built_in">document</span>.cookie;</div><div class="line">     <span class="keyword">var</span> arr = cookie.split(<span class="string">'; '</span>);</div><div class="line">     <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;arr.length;i++)&#123;</div><div class="line">         <span class="keyword">var</span> kv = arr[i].split(<span class="string">'='</span>);</div><div class="line">         <span class="keyword">if</span>(cname == kv[<span class="number">0</span>])&#123;</div><div class="line">             <span class="keyword">return</span> kv[<span class="number">1</span>];</div><div class="line">         &#125;</div><div class="line">     &#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
</li>
<li><p><code>encodeURLComponent</code>该方法会对url地址中的特殊字符进行编码(当参数中包含URL特殊字符的时候可以使用该方法进行编码处理);</p>
</li>
<li>获取sessionID<br><code>console.log($.cookie(&#39;PHPSESSID&#39;))</code>;<h3 id="cookie-使用"><a href="#cookie-使用" class="headerlink" title="$.cookie()使用"></a>$.cookie()使用</h3></li>
<li>新添加一个cookie会话;<code>$.cookie(&#39;username&#39;,&#39;zhangsan&#39;)</code>;</li>
<li>创建cookie并设置有效期为7天;<code>$.cookie(&#39;age&#39;,&#39;18&#39;,{expires:7})</code>;此时的cookie称作持久cookie,即<code>persistant cookie</code>;</li>
<li>创建cookie并设置cookie的有效路径<code>$.cookie(&#39;username&#39;,&#39;lisi&#39;,{expires:7,path:&#39;/&#39;})</code>;<ul>
<li>在默认情况下,只有cookie的页面才能读取该cookie信息,如果想让另一个页面读取该cookie信息,必须设置cookie的路径;cookie的路径用于设置能够读取cookie的顶级目录,即根目录,可以让当前项目下所有的网页都能相互读取cookie,</li>
</ul>
</li>
<li><code>raw:true</code>;在读写cookie时自动使用<code>encodeURLComponen</code>进行编码和解码;</li>
<li>删除cookie可以使用null作为cookie的值就可以<code>$.cookie(&#39;username&#39;,null)</code><h3 id="session-和-cookie之间的区别"><a href="#session-和-cookie之间的区别" class="headerlink" title="session 和 cookie之间的区别"></a>session 和 cookie之间的区别</h3></li>
</ol>
<ul>
<li>共同点： 数据都是保存在浏览器端，且是同源的</li>
<li>区别：<ol>
<li>cookie 通过在客户端记录信息确定用户身份， 数据始终在同源的 http 请求中携带，即cookie在浏览器和服务器之间来回传递；</li>
<li>session 通过在服务器端记录信息确定用户身份；</li>
<li>cookie 数据还有路径(path)的概念，可以限制 cookie 只在某个另下访问。因为每次 http 请求都会携带 cookie，所以cookie 只适合保存很小的数据。</li>
<li>http 协议是无状态协议。是无法从连接上跟踪会话的；</li>
<li>第一次发送请求，res 会向客户端浏览器颁发一个 cookie， 客户端吧 cookie 存取来，再次访问的时候会一同提交给 服务器<h3 id="location的内置属性"><a href="#location的内置属性" class="headerlink" title="location的内置属性"></a>location的内置属性</h3></li>
</ol>
</li>
<li>页面跳转<code>location.href=&#39;/index/index.html&#39;</code><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">ancestorOrigins:DOMStringList,</div><div class="line">assign:()</div><div class="line">hash:""</div><div class="line">host:"mybxg.com"</div><div class="line">hostname:"mybxg.com"</div><div class="line">href:"http://mybxg.com/index/index"</div><div class="line">origin:"http://mybxg.com"</div><div class="line">pathname:"/index/index"</div><div class="line">port:""</div><div class="line">protocol:"http:"</div><div class="line">reload:reload()</div><div class="line">replace:()</div><div class="line">search:""</div><div class="line">toString:toString()</div><div class="line">valueOf:valueOf()</div><div class="line">__proto__:Location</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="Apache"><a href="#Apache" class="headerlink" title="Apache"></a>Apache</h2><ul>
<li>静态资源服务器</li>
<li>项目管理软件: JIRA 禅道(跟踪工程进度更新,项目管理软件)</li>
<li>jQuery中的return false既可以阻止默认行为也可以阻止冒泡;但是原生JS中的return false 只能阻止默认行为;</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;cookie-和-session-的使用&quot;&gt;&lt;a href=&quot;#cookie-和-session-的使用&quot; class=&quot;headerlink&quot; title=&quot;cookie 和 session 的使用&quot;&gt;&lt;/a&gt;cookie 和 session 的使用&lt;/h1&gt;&lt;
    
    </summary>
    
      <category term="storage" scheme="http://yoursite.com/categories/storage/"/>
    
    
  </entry>
  
  <entry>
    <title>Formidable插件使用</title>
    <link href="http://yoursite.com/2017/04/06/formidable%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2017/04/06/formidable插件使用/</id>
    <published>2017-04-06T00:50:15.000Z</published>
    <updated>2017-04-12T12:56:10.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="formidable插件使用"><a href="#formidable插件使用" class="headerlink" title="formidable插件使用"></a>formidable插件使用</h1><h2 id="CommonJS"><a href="#CommonJS" class="headerlink" title="CommonJS"></a>CommonJS</h2><ul>
<li>JS中的模块化为AMD（requireJS）或 CMD</li>
<li>在Node中，模块化成为CommonJS；</li>
<li>require</li>
<li>exports  是module.exports的别名</li>
<li>module.exports</li>
</ul>
<h2 id="require加载模块查找规则"><a href="#require加载模块查找规则" class="headerlink" title="require加载模块查找规则"></a>require加载模块查找规则</h2><ul>
<li>优先从缓存中进行加载<ul>
<li>如果一个模块被加载过以后，会直接被缓存起来，下次加载的时候直接从缓存中读取</li>
<li>加载的是模块中 module.exports的值，而不是应用；</li>
</ul>
</li>
<li>核心模块</li>
<li>自定义模块</li>
<li>第三方模块查找顺序</li>
</ul>
<h2 id="CURD-案例"><a href="#CURD-案例" class="headerlink" title="CURD 案例"></a>CURD 案例</h2><ul>
<li>表单如果想要上传文件，必须将表单设置<code>enctype=&#39;multipart/form-data&#39;</code></li>
<li>npm init -y 快速初始化npm</li>
</ul>
<h3 id="文件上传插件-formidable-实际开发还是使用uploadify第三方插件"><a href="#文件上传插件-formidable-实际开发还是使用uploadify第三方插件" class="headerlink" title="文件上传插件 formidable,实际开发还是使用uploadify第三方插件"></a>文件上传插件 formidable,实际开发还是使用uploadify第三方插件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> form = <span class="keyword">new</span> formidable.IncomingForm();</div><div class="line">form.parse</div></pre></td></tr></table></figure>
<ul>
<li>普通的ajax请求是无法上传file的，在XMLHttpRequest2中对formData进行了支持；</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> formData = <span class="keyword">new</span> FormData();</div><div class="line">$.ajax(&#123;</div><div class="line">       <span class="attr">url</span>:<span class="string">'/add'</span>,</div><div class="line">       <span class="attr">type</span>:<span class="string">'post'</span>,</div><div class="line">       <span class="attr">dataType</span>:<span class="string">'json'</span>,</div><div class="line">       <span class="attr">data</span>:formData,</div><div class="line">       <span class="attr">processData</span>:<span class="literal">false</span>,<span class="comment">//告诉jQuery不去处理data数据</span></div><div class="line">        contentType:<span class="literal">false</span>,<span class="comment">//jquery会自动去设置请求头为application/x-www-urlencode;设置这个参数会高数jQuery不要去设置，使用其默认的enctype='multipart/form-data;</span></div><div class="line">         success:<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</div><div class="line">           <span class="comment">//自动跳转到HTML页面,进行渲染</span></div><div class="line">            <span class="keyword">if</span>(data.code==<span class="number">200</span>)&#123;</div><div class="line">                <span class="comment">//console.log(location.href);</span></div><div class="line">                location.href=<span class="string">'/'</span>;</div><div class="line">            &#125;</div><div class="line">       &#125;</div><div class="line">   &#125;)</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"> fs.readFile(<span class="string">'./data.json'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err,data</span>)</span>&#123;</div><div class="line">    <span class="comment">//读取文件得到的数据data都是二进制格式，可以将其转换成JSON对象</span></div><div class="line">    data = <span class="built_in">JSON</span>.parse(data);</div><div class="line"></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;formidable插件使用&quot;&gt;&lt;a href=&quot;#formidable插件使用&quot; class=&quot;headerlink&quot; title=&quot;formidable插件使用&quot;&gt;&lt;/a&gt;formidable插件使用&lt;/h1&gt;&lt;h2 id=&quot;CommonJS&quot;&gt;&lt;a href
    
    </summary>
    
      <category term="Node" scheme="http://yoursite.com/categories/Node/"/>
    
    
  </entry>
  
  <entry>
    <title>Gulp基本使用</title>
    <link href="http://yoursite.com/2017/03/14/Gulp%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2017/03/14/Gulp基本使用/</id>
    <published>2017-03-14T04:39:04.000Z</published>
    <updated>2017-04-12T03:47:48.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Gulp的基本使用"><a href="#Gulp的基本使用" class="headerlink" title="Gulp的基本使用"></a>Gulp的基本使用</h1><h2 id="数据双向绑定"><a href="#数据双向绑定" class="headerlink" title="数据双向绑定"></a>数据双向绑定</h2><ul>
<li>则在该ngCtl的作用域内的HTML标签, 其值或者操作都可以通过$scope的方式跟js中的属性和方法进行绑定. </li>
</ul>
<h2 id="脏值检测"><a href="#脏值检测" class="headerlink" title="脏值检测"></a>脏值检测</h2><ul>
<li>当数值发生变化时，触发了一个事件，去调用这个脏值检测的函数；</li>
<li>路径与目录的关系；</li>
</ul>
<h2 id="php中数据格式的转换"><a href="#php中数据格式的转换" class="headerlink" title="php中数据格式的转换"></a>php中数据格式的转换</h2><ul>
<li>在PHP中，将数组以json对象的格式进行输出， json_encode(array);</li>
<li>在PHP中，将对象形式的数据转换成数组， json_decode(obj,true);<ul>
<li>注意参数为true时，才会转换成数组；</li>
</ul>
</li>
<li>PHP中如果需要同时输出两组数据，可以将这个对象格式的数据转换成数组，然后</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"> header(<span class="string">'Content-Type:application/json'</span>);</div><div class="line">  $recUrl = <span class="string">'https://moment.douban.com/api/auth_authors/rec?alt=json&amp;apikey=0bcf52793711959c236df76ba534c0d4&amp;app_version=1.7.4&amp;count=20&amp;douban_udid=d623045db9fcb0d5243174c1bf1a675f887047c0&amp;start=0&amp;udid=9a34d8b038ff38971050199b0c5ee9c60c6d1ca3&amp;version=6'</span>;</div><div class="line"> $allUrl = <span class="string">'https://moment.douban.com/api/auth_authors/all?alt=json&amp;apikey=0bcf52793711959c236df76ba534c0d4&amp;app_version=1.7.4&amp;count=20&amp;douban_udid=d623045db9fcb0d5243174c1bf1a675f887047c0&amp;start=0&amp;udid=9a34d8b038ff38971050199b0c5ee9c60c6d1ca3&amp;version=6'</span>;</div><div class="line">$recResult = file_get_contents($recUrl); <span class="comment">//&#123;&#125;</span></div><div class="line">$allResult = file_get_contents($allResult);  <span class="comment">//  &#123;&#125;</span></div><div class="line"></div><div class="line"> <span class="comment">//先将json 数据转换成PHP数组</span></div><div class="line"> <span class="comment">//然后再讲PHP数组处理成二维数组,再转成json</span></div><div class="line"> $recResult = json_decode($recResult,<span class="literal">true</span>);<span class="comment">//参数为true的话,才转换成一个数组;</span></div><div class="line"> $allResult = json_decode($allResult);</div><div class="line"></div><div class="line"> $result = array(<span class="string">'rec'</span> =&gt; $recResult,<span class="string">'all'</span> =&gt; $allResult);</div><div class="line"> <span class="comment">//最后将这个数组格式的数据转换成json进行输出；</span></div><div class="line"> echo json_encode($result);</div></pre></td></tr></table></figure>
<h2 id="gulp"><a href="#gulp" class="headerlink" title="gulp"></a>gulp</h2><h3 id="Gulp-构建工具"><a href="#Gulp-构建工具" class="headerlink" title="Gulp 构建工具"></a>Gulp 构建工具</h3><ul>
<li><p>常见的构建工具： Gulp Grunt F.I.S  webpack;</p>
</li>
<li><p>gulp jianshi//调用监视任务</p>
</li>
<li>gulp init 回车之后会生成一个 package.json的文件，主要是说明文件的一些基本信息，说明书；</li>
<li>npm install gulp –save-dev项目依赖；直接在package.json中添加依赖信息；</li>
<li>autoprefixer()自动添加css私有前缀</li>
<li><p>注释：build:js</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;-- build:js scripts/all.js--&gt;</div><div class="line"><span class="comment">//会自动创建scripts文件夹，并将里面的script进行合并</span></div><div class="line">    &lt;script src=‘’&gt;</div><div class="line">    <span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">‘’</span>&gt;</span><span class="xml"></span></span></div><div class="line"><span class="tag">&lt;<span class="name">--endbuild--</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>gulp 一次执行多个任务</p>
<ul>
<li>gulp.task(‘default’,[‘a’,’b’,’c’]);</li>
<li>命令行：gulp default;</li>
</ul>
</li>
</ul>
<h3 id="缓存问题的解决–参考浏览器-协商缓存；雅虎13条"><a href="#缓存问题的解决–参考浏览器-协商缓存；雅虎13条" class="headerlink" title="缓存问题的解决–参考浏览器 协商缓存；雅虎13条"></a>缓存问题的解决–参考浏览器 协商缓存；雅虎13条</h3><ul>
<li>浏览器是以请求地址作为缓存条件的，只要是地址没变，浏览器就是会用缓存，地址变了，就会重新请求；</li>
<li>内容更改的时候地址更新；可以使用md5加密；（md5是一种加密方式，加密的内容不变，加密后的信息是一致的，）–md5在线加密；</li>
<li><code>md5加密</code>这种方式叫做指纹加密</li>
<li>gulp有一个插件 rev</li>
</ul>
<h2 id="Gulp-基本使用案例"><a href="#Gulp-基本使用案例" class="headerlink" title="Gulp 基本使用案例"></a>Gulp 基本使用案例</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>),</div><div class="line"></div><div class="line">    less = <span class="built_in">require</span>(<span class="string">'gulp-less'</span>),</div><div class="line"></div><div class="line">    cssmin = <span class="built_in">require</span>(<span class="string">'gulp-cssmin'</span>),</div><div class="line"></div><div class="line">    autoprefixer = <span class="built_in">require</span>(<span class="string">'gulp-autoprefixer'</span>),</div><div class="line"></div><div class="line">    rev = <span class="built_in">require</span>(<span class="string">'gulp-rev'</span>),</div><div class="line"></div><div class="line">    rename = <span class="built_in">require</span>(<span class="string">'gulp-rename'</span>),</div><div class="line"></div><div class="line">    imagemin = <span class="built_in">require</span>(<span class="string">'gulp-imagemin'</span>),</div><div class="line"></div><div class="line">    useref = <span class="built_in">require</span>(<span class="string">'gulp-useref'</span>),</div><div class="line"></div><div class="line">    uglify = <span class="built_in">require</span>(<span class="string">'gulp-uglify'</span>),</div><div class="line"></div><div class="line">    gulpif = <span class="built_in">require</span>(<span class="string">'gulp-if'</span>),</div><div class="line"></div><div class="line">    htmlmin = <span class="built_in">require</span>(<span class="string">'gulp-htmlmin'</span>),</div><div class="line"></div><div class="line">    revCollector = <span class="built_in">require</span>(<span class="string">'gulp-rev-collector'</span>)</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//处理css</span></div><div class="line">gulp.task(<span class="string">'css'</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">   <span class="keyword">return</span> gulp.src(<span class="string">'./public/less/main.less'</span>)</div><div class="line">        .pipe(less()) <span class="comment">//将less编译成css</span></div><div class="line">        .pipe(autoprefixer())<span class="comment">//给css添加私有前缀</span></div><div class="line">        .pipe(cssmin())<span class="comment">//将css进行压缩</span></div><div class="line">        .pipe(rev())<span class="comment">//将压缩后的css文件添加版本号</span></div><div class="line">        .pipe(gulp.dest(<span class="string">'./release/public/css'</span>))<span class="comment">//将当前的版本存储起来</span></div><div class="line">        .pipe(rev.manifest())<span class="comment">//如果文件进行了修改,记录前后修改的信息,如果有多个,后面的会把前面的覆盖,所以需要重命名</span></div><div class="line">        .pipe(rename(<span class="string">'css-mainfest.json'</span>))</div><div class="line">        .pipe(gulp.dest(<span class="string">'./release/rev'</span>))<span class="comment">//将json文件放到rev文件夹里面</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">//处理图片信息</span></div><div class="line">gulp.task(<span class="string">'image'</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> gulp.src([<span class="string">'./public/images/**/*'</span>,<span class="string">'./uploads/*'</span>],&#123;<span class="attr">base</span>:<span class="string">'./'</span>&#125;)<span class="comment">//如果路径文件夹下面还有子文件夹,路径使用/**/*;为了不同的文件保存在不同的文件夹里面,设定base,会自动对应存储;</span></div><div class="line">        .pipe(imagemin())<span class="comment">//压缩图片</span></div><div class="line">        .pipe(rev())<span class="comment">//将图片重新编号</span></div><div class="line">        .pipe(gulp.dest(<span class="string">'./release'</span>))<span class="comment">//图片压缩添加序列号后保存</span></div><div class="line">        .pipe(rev.manifest())</div><div class="line">        .pipe(rename(<span class="string">'images-mainfest.json'</span>))</div><div class="line">        .pipe(gulp.dest(<span class="string">'./release.rev'</span>))</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">//处理js</span></div><div class="line">gulp.task(<span class="string">'useref'</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">//js文件是在HTML中引入的,所以是在HTML中处理JS文件</span></div><div class="line">    <span class="keyword">return</span> gulp.src(<span class="string">'./index.html'</span>)</div><div class="line">        .pipe(useref())<span class="comment">//去HTML文件中查找注释,进行编译压缩等</span></div><div class="line">        .pipe(gulpif(<span class="string">'*.js'</span>,uglify()))<span class="comment">//如果文件中有JS文件,进行压缩JS</span></div><div class="line">        .pipe(gulpif(<span class="string">'*.js'</span>, rev()))<span class="comment">//文件添加序列号</span></div><div class="line">        .pipe(gulp.dest(<span class="string">'./release'</span>))</div><div class="line">        .pipe(rev.manifest())</div><div class="line">        .pipe(rename(<span class="string">'js-mainfest.json'</span>))</div><div class="line">        .pipe(gulp.dest(<span class="string">'./release/rev'</span>));</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">//处理所有的视图页面HTML</span></div><div class="line">gulp.task(<span class="string">'html'</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">   <span class="keyword">return</span> gulp.src(<span class="string">'./views/*.html'</span>)</div><div class="line">        .pipe(htmlmin(&#123;</div><div class="line">            <span class="attr">collapseWhitespace</span>:<span class="literal">true</span></div><div class="line">        &#125;))<span class="comment">//压缩HTML,需要传递参数;将空白区域进行压缩</span></div><div class="line">        .pipe(gulp.dest(<span class="string">'./release/views'</span>));</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">//处理其他部分</span></div><div class="line"></div><div class="line">gulp.task(<span class="string">'other'</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">   <span class="keyword">return</span> gulp.src([<span class="string">'./api/*.php'</span>,<span class="string">'./public/fonts/*'</span>,<span class="string">'./favicon.ico'</span>],&#123;<span class="attr">base</span>:<span class="string">'./'</span>&#125;)</div><div class="line">    <span class="comment">//因为PHP,字体,图标等文件不需要压缩,直接保存就可以</span></div><div class="line">        .pipe(gulp.dest(<span class="string">'./release'</span>));</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">//替换路径</span></div><div class="line">gulp.task(<span class="string">'rev'</span>,[<span class="string">'css'</span>,<span class="string">'useref'</span>,<span class="string">'image'</span>],<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">//将记录文件边的的文件,将其在index里面的路径进行替换;</span></div><div class="line">    <span class="comment">//因为只有等其余文件都加载完成之后,index才能加载,所以需要进行依赖</span></div><div class="line">    <span class="comment">//为了保证其余加载完毕后再加载当前功能,其余功能必须return才行</span></div><div class="line">    gulp.src([<span class="string">'./release/rev/*.json'</span>,<span class="string">'./release/index.html'</span>])</div><div class="line">        .pipe(revCollector())<span class="comment">//进行文件合并</span></div><div class="line">        .pipe(gulp.dest(<span class="string">'./release'</span>));</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">//最后,将所有的任务放到一个任务中,只执行最后一个任务就可以</span></div><div class="line"></div><div class="line">gulp.task(<span class="string">'release'</span>,[<span class="string">'rev'</span>,<span class="string">'other'</span>,<span class="string">'html'</span>]);</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Gulp的基本使用&quot;&gt;&lt;a href=&quot;#Gulp的基本使用&quot; class=&quot;headerlink&quot; title=&quot;Gulp的基本使用&quot;&gt;&lt;/a&gt;Gulp的基本使用&lt;/h1&gt;&lt;h2 id=&quot;数据双向绑定&quot;&gt;&lt;a href=&quot;#数据双向绑定&quot; class=&quot;head
    
    </summary>
    
      <category term="Gulp" scheme="http://yoursite.com/categories/Gulp/"/>
    
    
  </entry>
  
  <entry>
    <title>MVC</title>
    <link href="http://yoursite.com/2017/03/10/MVC/"/>
    <id>http://yoursite.com/2017/03/10/MVC/</id>
    <published>2017-03-10T00:50:15.000Z</published>
    <updated>2017-04-12T06:41:27.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="小知识点"><a href="#小知识点" class="headerlink" title="小知识点"></a>小知识点</h1><ul>
<li>绝大多数网站目前都是 服务端渲染 + 客户端渲染 相结合；</li>
<li>交互方式： 异步请求 和 同步请求；</li>
<li>服务端：请求 + 处理 + 响应；</li>
<li>URL：<a href="http://www.example.com/a/b/c?name=lisi$age=18#123" target="_blank" rel="external">http://www.example.com/a/b/c?name=lisi$age=18#123</a>;<ul>
<li>端口号之后的 / 是用来个主机名端口号 做区分的；</li>
<li>请求路径URL就是一个标识，在真是的文件中不一定有对应的实际目录；URL标识是由开发人员自己制定的；</li>
</ul>
</li>
<li>图片的请求方式永远是 post;</li>
</ul>
<h2 id="服务端渲染-MVC"><a href="#服务端渲染-MVC" class="headerlink" title="服务端渲染 MVC"></a>服务端渲染 MVC</h2><ul>
<li>通过model拿数据</li>
<li>读文件把模板字符串读取出来</li>
<li>利用模板引擎解析替换渲染</li>
<li>最后将结果发送给用户； </li>
<li>view 一个文件，存储了模板字符串</li>
<li>model.js负责提供数据 （也叫作数据业务model）</li>
<li>handle相当于controller：核心作用就是处理请求，如果是服务端渲染，通过model拿数据，view，将model业务数据和view数据进行整合，最后发送给用户；</li>
<li>MVC是一种架构方式，或者是模块化的一种划分方式；核心：模块的单一职责；讲整个应用程序划分为多个模块去协同处理；</li>
</ul>
<h3 id="MVC-模块划分"><a href="#MVC-模块划分" class="headerlink" title="MVC 模块划分"></a>MVC 模块划分</h3><ul>
<li>MVC模块划分方式在任何技术领域都存在；</li>
<li>MVVM：model；view；view-model</li>
</ul>
<h3 id="事件委派"><a href="#事件委派" class="headerlink" title="事件委派"></a>事件委派</h3><ul>
<li>$(‘body’).on(‘click’,’.remove’,function(){});</li>
<li>给body里面的remove绑定事件；</li>
</ul>
<h3 id="客户端渲染和服务端渲染"><a href="#客户端渲染和服务端渲染" class="headerlink" title="客户端渲染和服务端渲染"></a>客户端渲染和服务端渲染</h3><ul>
<li>如果要处理SEO,一定要服务端渲染；</li>
<li>如果是不考虑SEO，优先考虑客户端渲染</li>
<li>客户端渲染的好处是，减轻服务端压力，提高用户体验；</li>
</ul>
<h1 id="express-外置路由使用"><a href="#express-外置路由使用" class="headerlink" title="express 外置路由使用"></a>express 外置路由使用</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//1:加载 express模块</span></div><div class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</div><div class="line"><span class="comment">//2:调用express.Router()方法</span></div><div class="line"><span class="keyword">var</span> subApp = express.Router();</div><div class="line"></div><div class="line"><span class="comment">//3：为router添加不同的路由</span></div><div class="line">subApp.get(<span class="string">'/'</span>,<span class="function"><span class="keyword">function</span> (<span class="params">req,res</span>) </span>&#123;</div><div class="line"></div><div class="line">&#125;)</div><div class="line">subApp.get(<span class="string">'/add'</span>,<span class="function"><span class="keyword">function</span> (<span class="params">req,res</span>) </span>&#123;</div><div class="line"></div><div class="line">&#125;)</div><div class="line">subApp.get(<span class="string">'/info'</span>,<span class="function"><span class="keyword">function</span> (<span class="params">req,res</span>) </span>&#123;</div><div class="line"></div><div class="line">&#125;)</div><div class="line"><span class="comment">//4.将router路由容器到处</span></div><div class="line"><span class="built_in">module</span>.exports = subApp;</div></pre></td></tr></table></figure>
<ul>
<li>在app.js中</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//在appJS 文件中引入router，将router中的路由引入到appJS 中；</span></div><div class="line">app.use(router);</div></pre></td></tr></table></figure>
<h3 id="动态绝对路径"><a href="#动态绝对路径" class="headerlink" title="动态绝对路径"></a>动态绝对路径</h3><ul>
<li>动态绝对路径</li>
<li>_dirname 可以动态获取当前文件模块所属目录的绝对路径，而且不受你 执行 node 命令所处终端目录影响；利用这个属性可以拼接一个动态绝对路径；</li>
<li><code>fs.readFile(_dirname+&#39;/&#39;+&#39;a.txt&#39;,function(err,data){})</code></li>
<li><code>var path = require(&#39;path&#39;); fs.readFile(path.join(_dirname,&#39;./data/a.txt&#39;))</code>;使用path，不管文件路径中有没有./；他都会自动拼接</li>
<li>node中，为每一个模块提供了一个属性 _dirname;<ul>
<li>可以动态的获取当前文件所属目录的绝对路径</li>
<li>_dirname </li>
</ul>
</li>
<li><p>一般操作文件的相对路径只有在开发一些全局命令行工具的时候才会用到；</p>
</li>
<li><p>express没有内置模板，使用ejs, ()</p>
</li>
<li>使用ejs，会默认去views文件夹中去找数据，页面必须以后缀名为 .ejs 命名；index.ejs;</li>
<li><code>app.set(&#39;view engine&#39;,&#39;ejs&#39;)</code></li>
<li>ejs的模板语法是 &lt;% %&gt;格式，</li>
<li>设置模板文件存取目录<code>app.set(&#39;views&#39;,&#39;./test-view&#39;)</code>;这样就不自动去views目录去查找文件了，而是去<code>./test/view</code>目录去查找文件了；</li>
</ul>
<h2 id="node中文件上传模块-formidable"><a href="#node中文件上传模块-formidable" class="headerlink" title="node中文件上传模块 formidable"></a>node中文件上传模块 formidable</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">  <span class="keyword">var</span> form = <span class="keyword">new</span> formidable.IncomingForm()</div><div class="line"></div><div class="line"><span class="comment">// 配置上传的文件路径</span></div><div class="line">form.uploadDir = <span class="string">"./img/"</span>;</div><div class="line"></div><div class="line"><span class="comment">// 配置保持文件扩展名</span></div><div class="line">form.keepExtensions = <span class="literal">true</span></div><div class="line"></div><div class="line"><span class="comment">// 同时将普通数据放到了回调函数的 fields 中了（是一个对象）</span></div><div class="line"><span class="comment">// 默认 formidable 将表单中的数据存储到了操作系统的临时目录中了</span></div><div class="line"><span class="comment">// 同时将该文件的大小、路径等信息存储到了 files 对象中了</span></div><div class="line">form.parse(req, <span class="function"><span class="keyword">function</span> (<span class="params">err, fields, files</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (err) &#123;</div><div class="line">    <span class="keyword">throw</span> err</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">var</span> body = fields</div><div class="line">  <span class="keyword">var</span> avatarPath = files.avatar.path</div><div class="line">  avatarPath = avatarPath.substr(avatarPath.lastIndexOf(<span class="string">'\\'</span>) + <span class="number">1</span>)</div><div class="line">  body.avatar = <span class="string">'img/'</span> + avatarPath</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;小知识点&quot;&gt;&lt;a href=&quot;#小知识点&quot; class=&quot;headerlink&quot; title=&quot;小知识点&quot;&gt;&lt;/a&gt;小知识点&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;绝大多数网站目前都是 服务端渲染 + 客户端渲染 相结合；&lt;/li&gt;
&lt;li&gt;交互方式： 异步请求 和 同步请求
    
    </summary>
    
      <category term="Node" scheme="http://yoursite.com/categories/Node/"/>
    
    
  </entry>
  
  <entry>
    <title>Mac上mongobd 的使用</title>
    <link href="http://yoursite.com/2017/03/09/Mac%E4%B8%8Amongobd%20%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2017/03/09/Mac上mongobd 的使用/</id>
    <published>2017-03-09T01:33:15.000Z</published>
    <updated>2017-04-12T06:43:52.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="小知识点"><a href="#小知识点" class="headerlink" title="小知识点"></a>小知识点</h1><ol>
<li><p>对MVC的理解</p>
<ul>
<li>MVC是一种软件开发模块化架构方式，适用于web开发的代码架构阻止模式；就是用来解耦视图和数据，利用c控制器去调度视图和模型数据的交互；</li>
<li>提高代码的可维护性<ul>
<li>解耦了视图和数据的直接交互；</li>
<li>视图数据和业务数据是完全分开的；</li>
<li>视图数据：例如表单提交上来的数据；</li>
<li>业务数据：真是的数据库中的数据； </li>
</ul>
</li>
<li>增加代码的可重用性</li>
<li>划分方式： 模块职责的单一；</li>
<li>MVVM的核心：数据驱动视图</li>
</ul>
</li>
<li><p>mongod –dbpath /Users/gaonana/Documents/高娜娜文件/data/db </p>
</li>
</ol>
<h2 id="Mac上mongobd-的使用"><a href="#Mac上mongobd-的使用" class="headerlink" title="Mac上mongobd 的使用"></a>Mac上mongobd 的使用</h2><ol>
<li>官网下载  <code>mongocd.org</code></li>
<li>配置环境变量<ul>
<li>具体配置参考<code>Mac操作系统总结</code>文档</li>
</ul>
</li>
<li><code>mongod --version</code>有版本号表示安装成功</li>
<li><code>mogond --dbpath $dbpath(数据库数据文件路径)</code>进入data所在的路径，启动服务；</li>
<li>4步骤中，可以讲data文件夹建立在<code>Macintosh HD</code>的根目录下面，data文件夹，db文件夹；以后再启动mongod服务的时候直接使用<code>mongod</code>就可以启动；</li>
<li>在另一个命令行界面，<code>mongo</code>命令就可以操作数据库了；</li>
<li><code>show dbs</code>查看当前服务实力上所有的实例</li>
</ol>
<h2 id="数据库介绍"><a href="#数据库介绍" class="headerlink" title="数据库介绍"></a>数据库介绍</h2><ul>
<li>数据库实例 -&gt; 数据库 -&gt; 表 -&gt; 记录；</li>
<li>一个数据服务中可以有多个数据库</li>
<li>一个数据库中可以有多个集合<ul>
<li>MongoDB中，把表称之为集合</li>
<li>集合，简单理解就是一个数组</li>
<li>在一个集合中，可以有多个对象（json）,上一个人特殊的json对象，在mongodb中，叫做bson;</li>
</ul>
</li>
</ul>
<h2 id="使用-MongoDB-官方提供的-mongodb-驱动包-操作-mongodb数据库；"><a href="#使用-MongoDB-官方提供的-mongodb-驱动包-操作-mongodb数据库；" class="headerlink" title="使用 MongoDB 官方提供的 mongodb     驱动包 操作 mongodb数据库；"></a>使用 MongoDB 官方提供的 mongodb     驱动包 操作 mongodb数据库；</h2>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;小知识点&quot;&gt;&lt;a href=&quot;#小知识点&quot; class=&quot;headerlink&quot; title=&quot;小知识点&quot;&gt;&lt;/a&gt;小知识点&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;对MVC的理解&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MVC是一种软件开发模块化架构方式，适用于web开发的代码架构阻
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>常用的JS文件上传与表单插件</title>
    <link href="http://yoursite.com/2017/02/12/%E5%8D%9A%E5%AD%A6%E8%B0%B7%E9%A1%B9%E7%9B%AE%20%3C%E5%9B%9B%3E/"/>
    <id>http://yoursite.com/2017/02/12/博学谷项目 &lt;四&gt;/</id>
    <published>2017-02-12T04:39:04.000Z</published>
    <updated>2017-04-12T03:29:23.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="常用的JS文件上传与表单插件"><a href="#常用的JS文件上传与表单插件" class="headerlink" title="常用的JS文件上传与表单插件"></a>常用的JS文件上传与表单插件</h1><h2 id="BFC"><a href="#BFC" class="headerlink" title="BFC"></a>BFC</h2><ul>
<li>BFC（格式化上下文）：BFC盒子是独立布局的，盒子内元素的布局不会影响盒子外面的元素。在同一个BFC中两个相邻的盒子在垂直方向上会发生margin垂直内边距塌陷的问题；</li>
<li>BFC是指浏览器中创建来了一个独立的渲染区域，该区域内所有元素的布局不会影响到区域外元素的布局，这个渲染区域支队块级元素起作用；</li>
</ul>
<h2 id="jS插件"><a href="#jS插件" class="headerlink" title="jS插件"></a>jS插件</h2><ul>
<li>bootstrap</li>
<li>jquery</li>
<li>模块化开发：requirejs</li>
<li>滚动下拉刷新，滚动加载：onscroll</li>
<li>文件上传：uplodify</li>
<li>表单提交：jquery form</li>
<li>日期插件：bootstrap-detepicker</li>
<li>表单验证 validate</li>
<li>富文本编辑器 CKeditor</li>
<li>图片裁切 Jcrop</li>
<li>三级联动 jQuery-region</li>
<li>模板引擎 artTemplate</li>
<li>angular js</li>
<li>vue</li>
<li>react</li>
<li>node js</li>
<li>混合开发 ionic; react native</li>
</ul>
<h3 id="日期插件地址"><a href="#日期插件地址" class="headerlink" title="日期插件地址"></a>日期插件地址</h3><ul>
<li><a href="https://github.com/uxsolutions/bootstrap-datepicker" target="_blank" rel="external">bootstrap-datepicker</a></li>
</ul>
<h3 id="表单验证插件"><a href="#表单验证插件" class="headerlink" title="表单验证插件"></a>表单验证插件</h3><ul>
<li>地址： <a href="https://github.com/DiegoLopesLima/validate" target="_blank" rel="external">validate</a></li>
<li>data-required 非空判断</li>
<li>data-pattern 匹配正则</li>
<li>data-description 提示信息</li>
<li>data-describedby 指定提示信息的位置</li>
<li>data-validate 指定自定义规则的属性</li>
<li>data-conditional 自定义规则判断，值是一个规则判断函数 </li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">&lt;input name=<span class="string">'tc_join_date'</span> data-description=<span class="string">'joinDate'</span> data-describedby=<span class="string">'tcJoinDateInfo'</span> type=<span class="string">"text"</span> data-date-language=<span class="string">'zh-CN'</span> data-provide=<span class="string">'datepicker'</span> data-date-end-date=<span class="string">'0d'</span> data-date-format=<span class="string">'yyyy-mm-dd'</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"form-control input-sm "</span> value=<span class="string">"&#123;&#123;tc_join_date&#125;&#125;"</span>&gt;</div><div class="line"></div><div class="line"> $(<span class="string">'#ajaxForm'</span>).validate(&#123;</div><div class="line">      <span class="attr">sendForm</span> : <span class="literal">false</span>,</div><div class="line">      <span class="attr">valid</span>:<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</div><div class="line">          $(<span class="keyword">this</span>).ajaxSubmit(&#123;</div><div class="line">              <span class="attr">type</span>:<span class="string">'post'</span>,</div><div class="line">              <span class="attr">url</span>:url,</div><div class="line">              <span class="attr">dataType</span>:<span class="string">'json'</span>,</div><div class="line">              <span class="attr">success</span>:<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</div><div class="line">                  <span class="keyword">if</span>(data.code==<span class="number">200</span>)&#123;</div><div class="line">                      location.href = <span class="string">'/teacher/teacher_list'</span></div><div class="line">                  &#125;</div><div class="line"></div><div class="line"></div><div class="line">              &#125;</div><div class="line">          &#125;)</div><div class="line">      &#125;,</div><div class="line">      <span class="attr">description</span>:&#123;</div><div class="line">          <span class="attr">tcName</span>:&#123;</div><div class="line">              <span class="attr">required</span>:<span class="string">'用户名不能为空'</span></div><div class="line">          &#125;,</div><div class="line">          <span class="attr">tcPass</span>:&#123;</div><div class="line">              <span class="attr">required</span>:<span class="string">'密码不能为空'</span>,</div><div class="line">              <span class="attr">pattern</span>:<span class="string">'只能是六位数字'</span></div><div class="line">          &#125;,</div><div class="line">          <span class="attr">joinDate</span>:&#123;</div><div class="line">              <span class="attr">require</span>:<span class="string">'入职日期不能为空'</span></div><div class="line">          &#125;</div><div class="line"></div><div class="line">      &#125;</div><div class="line">  &#125;);</div></pre></td></tr></table></figure>
<h3 id="表单提交插件"><a href="#表单提交插件" class="headerlink" title="表单提交插件"></a>表单提交插件</h3><ul>
<li>地址：  </li>
</ul>
<ul>
<li><a href="https://github.com/jquery-form/form" target="_blank" rel="external">form</a></li>
<li>省略提交地址</li>
<li>添加新数据</li>
<li>处理回调函数  </li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"#profileForm"</span>).validate(&#123;</div><div class="line">            <span class="attr">sendForm</span> : <span class="literal">false</span>,</div><div class="line">            <span class="attr">valid</span>:<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">                <span class="comment">//同步更新富文本内容变化</span></div><div class="line">                <span class="keyword">for</span>(<span class="keyword">var</span> instance <span class="keyword">in</span> CKEDITOR.instances)&#123;</div><div class="line">                    CKEDITOR.instances[instance].updateElement();</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">var</span> p = $(<span class="string">'#p'</span>).find(<span class="string">'option:selected'</span>).text();</div><div class="line">                <span class="keyword">var</span> c = $(<span class="string">'#c'</span>).find(<span class="string">'option:selected'</span>).text();</div><div class="line">                <span class="keyword">var</span> d = $(<span class="string">'#d'</span>).find(<span class="string">'option:selected'</span>).text();</div><div class="line">                <span class="keyword">var</span> hometown = p+<span class="string">'|'</span>+c+<span class="string">'|'</span>+d;</div><div class="line">                $(<span class="keyword">this</span>).ajaxSubmit(&#123;</div><div class="line">                    <span class="attr">type</span>:<span class="string">'post'</span>,</div><div class="line"></div><div class="line">                    <span class="attr">url</span>:<span class="string">'/api/teacher/modify'</span>,</div><div class="line">                    <span class="attr">data</span>:&#123;<span class="attr">tc_hometown</span>:hometown&#125;,</div><div class="line">                    <span class="attr">dataType</span>:<span class="string">'json'</span>,</div><div class="line">                    <span class="attr">success</span>:<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</div><div class="line">                        <span class="keyword">if</span>(data.code==<span class="number">200</span>)&#123;</div><div class="line">                            <span class="built_in">console</span>.log(data);</div><div class="line">                            location.reload();</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                &#125;)</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;)</div></pre></td></tr></table></figure>
<h3 id="uploadify基本使用"><a href="#uploadify基本使用" class="headerlink" title="uploadify基本使用"></a>uploadify基本使用</h3><ul>
<li><a href="http://www.uploadify.com/" target="_blank" rel="external">uploadify</a></li>
<li>fileObjName 文件名称</li>
<li>buttonText 按钮文本</li>
<li>buttonClass 按钮样式</li>
<li>fileTypeExts 支持的扩展名</li>
<li>fileSizeLimit 文件的大小限制</li>
<li>uploader 上传的路径</li>
<li>swf flash文件的位置</li>
<li>onUploadSuccess 上传成功的回调函数</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'#upfile'</span>).uploadify(&#123;</div><div class="line">            <span class="attr">width</span>:<span class="number">120</span>,</div><div class="line">            <span class="attr">height</span>:<span class="number">120</span>,</div><div class="line">            <span class="attr">buttonText</span>:<span class="string">""</span>,</div><div class="line">            <span class="attr">fileObjName</span>:<span class="string">'tc_avatar'</span>,</div><div class="line">            <span class="attr">swf</span>:<span class="string">'/public/assets/uploadify/uploadify.swf'</span>,</div><div class="line">            <span class="attr">uploader</span>:<span class="string">'/api/uploader/avatar'</span>,</div><div class="line">            <span class="attr">onUploadSuccess</span>:<span class="function"><span class="keyword">function</span> (<span class="params">file,data</span>) </span>&#123;</div><div class="line">                <span class="keyword">var</span> data = <span class="built_in">JSON</span>.parse(data);</div><div class="line">                $(<span class="string">'.preview img'</span>).attr(<span class="string">'src'</span>,data.result.path);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure>
<h3 id="php文件上传处理"><a href="#php文件上传处理" class="headerlink" title="php文件上传处理"></a>php文件上传处理</h3><ul>
<li>$_FILES 用来获取上传的文件（具体包含了一些参数）</li>
</ul>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">Array</span></div><div class="line">(</div><div class="line">    [picture] =&gt; <span class="keyword">Array</span></div><div class="line">        (</div><div class="line">            [name] =&gt; abc.png  文件的名称</div><div class="line">            [type] =&gt; application/octet-stream  文件的传输格式</div><div class="line">            [tmp_name] =&gt; D:\wamp\tmp\phpDE88.tmp  服务器临时文件路径</div><div class="line">            [error] =&gt; <span class="number">0</span> 错误代码</div><div class="line">            [size] =&gt; <span class="number">1792</span> 文件大小</div><div class="line">        )</div><div class="line">)</div></pre></td></tr></table></figure>
<ul>
<li>move_uploaded_file 移动文件</li>
</ul>
<h3 id="背景图片截图插件"><a href="#背景图片截图插件" class="headerlink" title="背景图片截图插件"></a>背景图片截图插件</h3><ul>
<li>Jcrop</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">   <span class="keyword">var</span> picture = $(<span class="string">'.preview img'</span>),jcrop_api;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">cropPic</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    jcrop_api&amp;&amp;jcrop_api.destroy();</div><div class="line">    picture.Jcrop(&#123;</div><div class="line">        <span class="comment">// bgColor:'pink',//设置选取的背景颜色</span></div><div class="line">        acpectRatio:<span class="number">2</span>,<span class="comment">//设置宽高比</span></div><div class="line">        keySupport:<span class="literal">true</span>,<span class="comment">//支持键盘控制</span></div><div class="line">        boxWidth:<span class="number">400</span>,<span class="comment">//设置背景图片,即画布的宽高</span></div><div class="line">        <span class="comment">//boxHeight:400,</span></div><div class="line">    &#125;,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;<span class="comment">//回调函数</span></div><div class="line">        picture_api = <span class="keyword">this</span>;</div><div class="line">        <span class="comment">//获取画布的宽度和高度;</span></div><div class="line">        <span class="keyword">var</span> width = <span class="keyword">this</span>.ui.stage.width,</div><div class="line">            height = <span class="keyword">this</span>.ui.stage.height,</div><div class="line">            x = <span class="number">0</span>,</div><div class="line">            y = height/<span class="number">4</span>;</div><div class="line">        <span class="comment">//console.log(height);</span></div><div class="line">        picture_api.newSelection();</div><div class="line">        <span class="comment">//设置图片加载完成后,选框自动选中的位置</span></div><div class="line">        <span class="comment">//picture_api.setSelect([x,y,width,height/2]);</span></div><div class="line">        picture_api.animateTo([x,y,width,height/<span class="number">2</span>]);</div><div class="line">        <span class="comment">//获取截取图片的x,y,w,h;</span></div><div class="line">    &#125;)</div></pre></td></tr></table></figure>
<h3 id="富文本编辑器"><a href="#富文本编辑器" class="headerlink" title="富文本编辑器"></a>富文本编辑器</h3><ul>
<li><a href="http://ueditor.baidu.com/website/" target="_blank" rel="external">ueditor</a></li>
<li><a href="http://ckeditor.com/" target="_blank" rel="external">ckeditor</a></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;textarea id=<span class="string">'text'</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span></div><div class="line"><span class="comment">//加载富文本</span></div><div class="line">        CKEDITOR.replace(<span class="string">'ckeditor'</span>, &#123;</div><div class="line">            <span class="comment">//toolbarGroups:[]</span></div><div class="line">        &#125;);</div><div class="line">        <span class="comment">//同步更新富文本内容变化</span></div><div class="line">           <span class="keyword">for</span>(<span class="keyword">var</span> instance <span class="keyword">in</span> CKEDITOR.instances)&#123;</div><div class="line">               CKEDITOR.instances[instance].updateElement();</div><div class="line">           &#125;</div></pre></td></tr></table></figure>
<h3 id="三级联动"><a href="#三级联动" class="headerlink" title="三级联动"></a>三级联动</h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&lt;div class='region'&gt;</div><div class="line">    &lt;select name="tc_province" id='p' data-id=&#123;&#123;tc_province&#125;&#125; class="form-control input-sm"&gt;</div><div class="line">                &lt;option &gt;请选择省&lt;/option&gt;</div><div class="line"></div><div class="line">  &lt;/select&gt;</div><div class="line">  &lt;select name="tc_city" id='c' data-id=&#123;&#123;tc_city&#125;&#125; class="form-control input-sm"&gt;</div><div class="line">      &lt;option &gt;请选择市&lt;/option&gt;</div><div class="line">  &lt;/select&gt;</div><div class="line">  &lt;select name="tc_district" id='d' data-id=&#123;&#123;tc_district&#125;&#125; class="form-control input-sm"&gt;</div><div class="line">      &lt;option &gt;请选择区县&lt;/option&gt;</div><div class="line">  &lt;/select&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">    //三级联动,加载数据</div><div class="line">$('.region').region(&#123;</div><div class="line">    url:'../lib/jquery-region/region.json'</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h2 id="编程理论基础"><a href="#编程理论基础" class="headerlink" title="编程理论基础"></a>编程理论基础</h2><ul>
<li>服务器</li>
<li>项目开发流程</li>
<li>编程，逻辑思维</li>
<li>模块化（nodejs/fis/webpack）</li>
<li>路径</li>
<li>路由</li>
<li>数据库</li>
<li>协议（网络通信）</li>
<li>网站（静态网站和动态网站）</li>
<li>后台接口</li>
<li>前端渲染和后台渲染</li>
</ul>
<h2 id="小知识点"><a href="#小知识点" class="headerlink" title="小知识点"></a>小知识点</h2><ul>
<li><p>原生的绑定事件会发生覆盖</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">btn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>jquery的绑定事件都是会叠加</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'#btn'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;);</div><div class="line">$(<span class="string">'#btn'</span>).bind(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;);</div></pre></td></tr></table></figure>
</li>
<li><p><code>location.search</code>得到的是URL地址中所有的参数<code>?tc_id=3&amp;username=12</code>;</p>
</li>
</ul>
<ul>
<li><p>可以通过<code>location</code>来获取地址栏中所携带的所有信息；</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> pathname = location.search;</div><div class="line"><span class="keyword">var</span> pcname = pathname.sclice(<span class="number">1</span>); <span class="comment">//将？截取掉</span></div><div class="line"><span class="keyword">var</span> obj = &#123;&#125;;</div><div class="line"><span class="keyword">var</span> arr = pcname.split(<span class="string">'&amp;'</span>);</div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> obj)&#123;</div><div class="line">    <span class="keyword">var</span> kv = arr[i].split(<span class="string">'='</span>);</div><div class="line">    obj[kv[<span class="number">0</span>]]=kv[<span class="number">1</span>];</div><div class="line">    <span class="keyword">return</span> obj;</div><div class="line">    <span class="comment">//将URL中的参数和值以键值对的形式放到obj中；</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>PHP中，将数组以json对象的形式输出： <code>json_encode($arr)</code>；</li>
</ul>
<h2 id="表单验证插件-1"><a href="#表单验证插件-1" class="headerlink" title="表单验证插件"></a>表单验证插件</h2><ul>
<li>form表单中，不写提交地址，默认提交到当前页面，地址栏中；</li>
<li><code>jquery-validate</code>表单验证的插件；</li>
<li><code>jquery-form</code>表单提交的插件 <code>$(&#39;form&#39;).ajaxSubmit({ })</code></li>
<li>文件上传插件 <code>webupload</code>和<code>uploadify</code></li>
</ul>
<p>你都做过什么，遇到什么问题，你是怎么解决的；<br>nodejs是怎么用的；</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;常用的JS文件上传与表单插件&quot;&gt;&lt;a href=&quot;#常用的JS文件上传与表单插件&quot; class=&quot;headerlink&quot; title=&quot;常用的JS文件上传与表单插件&quot;&gt;&lt;/a&gt;常用的JS文件上传与表单插件&lt;/h1&gt;&lt;h2 id=&quot;BFC&quot;&gt;&lt;a href=&quot;#BF
    
    </summary>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
  </entry>
  
  <entry>
    <title>前端发送请求的方式</title>
    <link href="http://yoursite.com/2017/02/12/%E5%8D%9A%E5%AD%A6%E8%B0%B7%E9%A1%B9%E7%9B%AE%20%3C%E4%BA%8C%3E/"/>
    <id>http://yoursite.com/2017/02/12/博学谷项目 &lt;二&gt;/</id>
    <published>2017-02-12T02:39:04.000Z</published>
    <updated>2017-04-12T02:51:36.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="域名解析系统"><a href="#域名解析系统" class="headerlink" title="域名解析系统"></a>域名解析系统</h2><ul>
<li>先去本机的host的文件查找对应的IP,如果在本机host文件中找到,就返回对应的IP;如果没有的话,就去公网查找,公网没有的话就无法上网;</li>
</ul>
<h2 id="前端发送请求的方式"><a href="#前端发送请求的方式" class="headerlink" title="前端发送请求的方式"></a>前端发送请求的方式</h2><ul>
<li>地址栏直接输入URL</li>
<li>表单的action属性</li>
<li>a标签的href属性;link的href</li>
<li>src属性:img的src;script的src; iframe的src</li>
<li>ajax发送请求</li>
<li>postMessage H5新的API</li>
<li>flash插件</li>
<li>location.href<ol>
<li>补充:URL的规范格式 scheme://host:port /path?query#frament;</li>
</ol>
<ul>
<li>scheme 表示协议 http https ftp file ssh;</li>
<li>host 表示域名或者IP地址;</li>
<li>port 端口;用来确定计算机上某个网络应用程序;</li>
<li>path 路径;域名之后,参数(?)之前的内容:/abc/qqq等</li>
<li>query 查询字符串;作用,向服务器传递参数数据;格式:键=值&amp;键=值</li>
<li>frament: hash 锚点,定位页面的某一部分;结合ID;</li>
</ul>
</li>
</ul>
<h2 id="路径问题"><a href="#路径问题" class="headerlink" title="路径问题"></a>路径问题</h2><ul>
<li>绝对路径 / 等效于直接写IP地址<a href="http://localhost" target="_blank" rel="external">http://localhost</a></li>
<li>相对路径:  ./代表当前路径 ../代表上层路径</li>
<li>跳转到根路径<code>&lt;a href=&quot;/tom.html&quot;&gt;</code></li>
</ul>
<h2 id="cookie和session"><a href="#cookie和session" class="headerlink" title="cookie和session"></a>cookie和session</h2><ul>
<li>cookie写入之后,只要是访问同一个网站,都会带着cookie进行访问;</li>
<li>在PHP中session start();开启session会话;让服务器知道曾经来过,保存访问状态;SESSID</li>
<li>session是服务端的,客户端向服务端发送SESSID,进行服务器与客户端的关联,服务器返回该用户的信息;</li>
<li>SESSID可以保持客户端与服务器之间的联系状态;实现不同页面间的数据共享</li>
</ul>
<h2 id="跨域解决方案"><a href="#跨域解决方案" class="headerlink" title="跨域解决方案"></a>跨域解决方案</h2><ul>
<li><p>jsonp</p>
<ul>
<li>jsonp返回的数据应该是函数的调用<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ecName = $_GET[<span class="string">'callback'</span>];<span class="comment">//获取到函数名;</span></div><div class="line">echo $ecName.<span class="string">"("</span>data.<span class="string">")"</span>;<span class="comment">//返回函数的调用;</span></div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>cors 配置服务器,</p>
</li>
<li>反向代理 其原理类似于CORS</li>
<li>flash插件,但是现在已经很少用了;</li>
</ul>
<h2 id="PHP-相关问题"><a href="#PHP-相关问题" class="headerlink" title="PHP 相关问题"></a>PHP 相关问题</h2><ul>
<li>PHP既可以做前端页面渲染,也可以单独作为接口返回数据;</li>
<li>&lt;?php include()?&gt;(PHP中导入页面)<br><code>count($arr == 2)</code> 等同于js中<code>arr.length == 2</code>;</li>
</ul>
<h2 id="模块化规范"><a href="#模块化规范" class="headerlink" title="模块化规范"></a>模块化规范</h2><ul>
<li>浏览器端的规范：<ol>
<li>AMD：requirejs</li>
<li>CMD:seajs （淘宝的技术）</li>
<li>commonjs - nodejs 同步加载，后端的奇数</li>
</ol>
</li>
<li>服务器端的规范<ol>
<li>commonjs:nodejs </li>
</ol>
</li>
</ul>
<h2 id="requirejs使用"><a href="#requirejs使用" class="headerlink" title="requirejs使用"></a>requirejs使用</h2><ol>
<li>解决了命名冲突 （不同模块中的相同变量不会冲突）</li>
<li>解决了文件依赖问题</li>
<li>如果requirejs加载的时候，指定了data-main属性，那么根路径就变成了入口文件所处的路径;<ol>
<li>不使用data-main的时候，在通过require加载文件时可以直接使用相对路径；</li>
<li>但是在使用data-main的同时，再使用require加载其他模块文件，文件的根路径发生了改变，此时可以重新定义默认的根路径；</li>
<li>requirejs处理非模块化文件</li>
</ol>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"> &lt;script src=<span class="string">'require.js'</span> data-main=<span class="string">'main.js'</span> &gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div><div class="line"> &lt;script&gt;</div><div class="line">     <span class="comment">//加载文件，通过data-main的路径进行定位</span></div><div class="line">     <span class="built_in">require</span>([<span class="string">'./m4'</span>]);</div><div class="line">     <span class="comment">//或者重新设置默认的根路径</span></div><div class="line">     <span class="built_in">require</span>.config(&#123;</div><div class="line">         <span class="attr">baseUrl</span>:<span class="string">'./js/'</span></div><div class="line">     &#125;);</div><div class="line">     <span class="comment">//相对于根路径的路径</span></div><div class="line">     <span class="built_in">require</span>([<span class="string">'/module/m4'</span>]);</div><div class="line">      <span class="comment">//将abc文件中foo的非模块化文件到处成为模块化文件</span></div><div class="line">    shim:&#123;</div><div class="line">        <span class="string">'../abc'</span>:&#123;</div><div class="line">         <span class="comment">//给模块起一个别名；如果自定义模块起了一个名字，在用的时候必须与那个名字保持一致；</span></div><div class="line">            exports:<span class="string">'foo'</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">          paths:&#123;</div><div class="line">         <span class="attr">ggg</span>:<span class="string">"js/jquery"</span>;</div><div class="line">    &#125;</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;域名解析系统&quot;&gt;&lt;a href=&quot;#域名解析系统&quot; class=&quot;headerlink&quot; title=&quot;域名解析系统&quot;&gt;&lt;/a&gt;域名解析系统&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;先去本机的host的文件查找对应的IP,如果在本机host文件中找到,就返回对应的IP;如果没有
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>同步操作与异步操作的异同</title>
    <link href="http://yoursite.com/2017/01/19/%E5%90%8C%E6%AD%A5%E6%93%8D%E4%BD%9C%E4%B8%8E%E5%BC%82%E6%AD%A5%E6%93%8D%E4%BD%9C%E7%9A%84%E5%BC%82%E5%90%8C/"/>
    <id>http://yoursite.com/2017/01/19/同步操作与异步操作的异同/</id>
    <published>2017-01-19T04:39:04.000Z</published>
    <updated>2017-04-12T06:42:54.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="小知识点"><a href="#小知识点" class="headerlink" title="小知识点"></a>小知识点</h1><ol>
<li>Node命令本质上是一个 应用程序；</li>
<li>Node的核心模块<ul>
<li>文件读写 fs</li>
<li>构建Http服务 http</li>
</ul>
</li>
<li>第三方模块<ul>
<li>npm install 第三方模块名称</li>
<li>使用require 函数加载</li>
<li>看文档使用  </li>
<li>moment 格式化事件moment(time).format(‘YYYY-MM-DD HH:mm:ss’)</li>
</ul>
</li>
<li>在Node中使用art-template 模块引擎；</li>
<li>浏览器默认不支持JavaScript模块化，只能通过script标签去加载模块以及他们之间的依赖；</li>
<li>node天生支持模块化<ul>
<li>模块与模块之间提供可特定的通信交互规则<ul>
<li>module.exports  相当于return</li>
<li>require 相当于requireJS中的额 define[依赖项]，function（依赖项）；</li>
<li>exports</li>
</ul>
</li>
</ul>
</li>
</ol>
<ul>
<li>一个JS文件就是一个模块化；</li>
<li>一个模块化就是私有作用域（没有全局作用域的概念）； </li>
</ul>
<ol>
<li>将编码之后的中文解码： decodeURI(URL) ；将中文转换成code编码格式：encodeURI(URL);</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">encodeURI</span>(<span class="string">'中国'</span>)</div><div class="line">---&gt; <span class="string">"%E4%B8%AD%E5%9B%BD"</span></div><div class="line"><span class="built_in">decodeURI</span>(<span class="string">'%E4%B8%AD%E5%9B%BD'</span>)</div><div class="line">===&gt; <span class="string">"中国"</span></div></pre></td></tr></table></figure>
<ol>
<li><code>data = JSON.stringify(data,null,&quot;  &quot;)</code>将对象格式的文件转换成字符串格式，第三个参数为<code>“  ”</code>，中间是两个空格，表示向后台提交数据的时候，仍然保持两个空格的缩进；</li>
<li>没有文件的 POST 提交，还是会把数据格式化成为查询字符串的格式，也就是相当于（get参数）的方式进行提交；有文件上传的是form Data的格式提交</li>
</ol>
<h2 id="同步操作与异步操作的异同"><a href="#同步操作与异步操作的异同" class="headerlink" title="同步操作与异步操作的异同"></a>同步操作与异步操作的异同</h2><ol>
<li>异步API</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(<span class="number">111</span>);</div><div class="line">fs.readfile(<span class="string">'./data/a.txt'</span>),<span class="function"><span class="keyword">function</span>(<span class="params">err,data</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="number">222</span>);</div><div class="line">&#125;</div><div class="line">fs.readfile(<span class="string">'./data/a.txt'</span>),<span class="function"><span class="keyword">function</span>(<span class="params">err,data</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="number">444</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">consle.log(<span class="number">333</span>);</div><div class="line"><span class="comment">//输出的结果是：</span></div><div class="line"><span class="comment">//111;333; 222和444的顺序的不一定的；</span></div><div class="line"><span class="comment">//222和444是异步进行的，无法保证其先后顺序；</span></div></pre></td></tr></table></figure>
<ol>
<li>同步API fs.readFileSync(‘./data/a.txt’)<ul>
<li>var dataA = fs.readFileSync(‘./data/a.txt’).toString();默认读取到的是二进制数据；</li>
<li>同步ＡＰＩ是按照先后顺序执行的； </li>
</ul>
</li>
<li>关于文件中的同步和异步，优先使用异步操作<ul>
<li>异步操作都是通过一个回调函数来获取异步操作结果，第一个参数是err;<ul>
<li>有限判断err是否出错</li>
<li>操作成功，err就是null；</li>
<li>操作失败，err 就是错误对象</li>
<li>在异步操作中，无法使用try-catch捕获异常；</li>
</ul>
</li>
</ul>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">    <span class="comment">//异步读取不能使用try catch 捕获异常</span></div><div class="line"> <span class="keyword">try</span>&#123;</div><div class="line">    fs.readFile(<span class="string">'./0-hello word.js'</span>,<span class="function"><span class="keyword">function</span> (<span class="params">err,data</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(data);</div><div class="line">    <span class="comment">//得到的data是undefined；因为错误，读取不到信息</span></div><div class="line">    &#125;);</div><div class="line">&#125;<span class="keyword">catch</span> (e)&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'失败'</span>)</div><div class="line">&#125;</div><div class="line"><span class="comment">//同步读取可以使用 try-catch捕获异常</span></div></pre></td></tr></table></figure>
<ul>
<li>同步操作直接使用变量去接收操作结果； </li>
</ul>
<h2 id="封装异步API"><a href="#封装异步API" class="headerlink" title="封装异步API"></a>封装异步API</h2><ul>
<li>通过callback去拿结果</li>
<li>如果自定义异步API中有异常错误，继续使用callback向外抛出</li>
</ul>
<h3 id="使用nodemon-实现改完代码服务自动重启"><a href="#使用nodemon-实现改完代码服务自动重启" class="headerlink" title="使用nodemon 实现改完代码服务自动重启"></a>使用nodemon 实现改完代码服务自动重启</h3><ul>
<li>npm install –g nodemon</li>
<li>使用<ul>
<li>nodemon.app.js </li>
</ul>
</li>
</ul>
<h1 id="Web中的路径"><a href="#Web中的路径" class="headerlink" title="Web中的路径"></a>Web中的路径</h1><ul>
<li>url本质上只是一个标识而已，所以看到的文件名不一定是真实的文件名</li>
<li>绝大多数情况下，需要开发人员自定义标识<ul>
<li>为了好看，路由更简单</li>
<li>为了更加灵活的控制</li>
<li>URL路径以<code>“/”</code>开头，是绝对路径</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;link href=<span class="string">"/assets/css/main.css"</span>&gt;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;小知识点&quot;&gt;&lt;a href=&quot;#小知识点&quot; class=&quot;headerlink&quot; title=&quot;小知识点&quot;&gt;&lt;/a&gt;小知识点&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;Node命令本质上是一个 应用程序；&lt;/li&gt;
&lt;li&gt;Node的核心模块&lt;ul&gt;
&lt;li&gt;文件读写 fs&lt;/l
    
    </summary>
    
      <category term="Node" scheme="http://yoursite.com/categories/Node/"/>
    
    
  </entry>
  
  <entry>
    <title>Angular项目基本构建模块</title>
    <link href="http://yoursite.com/2016/12/14/%20Angular%E9%A1%B9%E7%9B%AE%E5%9F%BA%E6%9C%AC%E6%9E%84%E5%BB%BA%E6%A8%A1%E5%9D%97/"/>
    <id>http://yoursite.com/2016/12/14/ Angular项目基本构建模块/</id>
    <published>2016-12-14T04:39:04.000Z</published>
    <updated>2017-04-12T03:45:28.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Angular项目基本构建模块"><a href="#Angular项目基本构建模块" class="headerlink" title="Angular项目基本构建模块"></a>Angular项目基本构建模块</h1><h2 id="angular中jQuery的使用"><a href="#angular中jQuery的使用" class="headerlink" title="angular中jQuery的使用"></a>angular中jQuery的使用</h2><ul>
<li>angular可以讲一个原生的DOM对象转换成一个jQuery对象；</li>
<li>如果angular中没有引入jQuery，那么angular中只包含了部分jQuery方法；</li>
<li>引入了jQuery后，jqList</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.querySelector(<span class="string">'.btn'</span>);</div><div class="line">   angular.element = jQuery;</div><div class="line">   angular.element(btn).on(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">       angular.element(box).css(<span class="string">'backgroundColor'</span>,<span class="string">'pink'</span>);</div><div class="line">       angular.element(box).animate(&#123;</div><div class="line">           <span class="attr">width</span>:<span class="number">200</span>,</div><div class="line">           <span class="attr">height</span>:<span class="number">200</span>,</div><div class="line">       &#125;,<span class="number">500</span>);</div><div class="line">   &#125;)</div></pre></td></tr></table></figure>
<h2 id="bower"><a href="#bower" class="headerlink" title="bower"></a>bower</h2><ul>
<li>基于NodeJS的一个静态资源管路工具；</li>
</ul>
<h3 id="豆瓣一刻"><a href="#豆瓣一刻" class="headerlink" title="豆瓣一刻"></a>豆瓣一刻</h3><ul>
<li>前端分包<ul>
<li>视图： views<ul>
<li>views</li>
<li>tpls</li>
<li>templates</li>
</ul>
</li>
<li>静态资源 public<ul>
<li>public(imgs/less/fonts/libs等)</li>
<li>static</li>
<li>assets  </li>
</ul>
</li>
<li>脚本 scripts </li>
</ul>
</li>
</ul>
<ul>
<li><ul>
<li>uploads</li>
</ul>
</li>
</ul>
<ul>
<li><meta name="referrer" content="never"> 可以突破防盗链</li>
<li>使用time()函数可以获取当前服务器的时间（时间戳）；<code>echo time()</code>;</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">echo time();</div><div class="line">echo <span class="string">"&lt;br/&gt;"</span>;</div><div class="line">echo date(<span class="string">'Y-m-d H:i:s'</span>,time());--<span class="number">-2017</span><span class="number">-03</span><span class="number">-29</span> <span class="number">09</span>:<span class="number">23</span>:<span class="number">40</span></div><div class="line"></div><div class="line">phpinfo()<span class="comment">//可以火气PHP的详细信息，包括安装目录所支持的模块扩展等很多信息；</span></div><div class="line">strtotime(<span class="string">'-1day'</span>);前一天</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Angular项目基本构建模块&quot;&gt;&lt;a href=&quot;#Angular项目基本构建模块&quot; class=&quot;headerlink&quot; title=&quot;Angular项目基本构建模块&quot;&gt;&lt;/a&gt;Angular项目基本构建模块&lt;/h1&gt;&lt;h2 id=&quot;angular中jQuer
    
    </summary>
    
      <category term="Angular" scheme="http://yoursite.com/categories/Angular/"/>
    
    
  </entry>
  
  <entry>
    <title>Requirejs基本使用</title>
    <link href="http://yoursite.com/2016/12/12/%E5%8D%9A%E5%AD%A6%E8%B0%B7%E9%A1%B9%E7%9B%AE%20%3C%E4%B8%89%3E/"/>
    <id>http://yoursite.com/2016/12/12/博学谷项目 &lt;三&gt;/</id>
    <published>2016-12-12T02:39:04.000Z</published>
    <updated>2017-04-12T03:25:41.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="模块化的意义"><a href="#模块化的意义" class="headerlink" title="模块化的意义"></a>模块化的意义</h2><ul>
<li>团队协作会有命名冲突</li>
<li>复杂的文件依赖关系不方便维护</li>
</ul>
<h2 id="requirejs基本使用"><a href="#requirejs基本使用" class="headerlink" title="requirejs基本使用"></a>requirejs基本使用</h2><ul>
<li>引入requirejs文件库，（一般需要做一些基础配置config）<ul>
<li><code>baseUrl</code>; 定义url为根路径，在引入其他文件时在根路径的基础上再写</li>
<li><code>paths</code> 将路径定义一个别名进行使用</li>
<li><code>shim</code> 将非模块化的文件进行处理</li>
</ul>
</li>
<li>定义模块 define<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">define([<span class="string">'jquery'</span>,<span class="string">'echart'</span>],<span class="function"><span class="keyword">function</span>(<span class="params">$,echarts</span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log($);</div><div class="line">    <span class="comment">//前面两个值是依赖的模块，function的参数是对应模块的返回值；</span></div><div class="line">    &#125;)</div></pre></td></tr></table></figure>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Vue 和 angualar 主要做单页程序;</div><div class="line">MVC:Model View Controller;模型-视图-控制器；java流行的三个框架（ssh ssm）;</div><div class="line">MVVM:模型试图 双向数据绑定（前端）</div></pre></td></tr></table></figure>
<ul>
<li>维护模块之间的依赖 <code>define（[&#39;jquery&#39;,&#39;echart&#39;],function）</code>;</li>
<li>公开模块成员</li>
<li>引入模块 <code>require([&#39;../jquery.js&#39;])</code>引入模块中的.js 不能省略；</li>
</ul>
<h2 id="artTemplate"><a href="#artTemplate" class="headerlink" title="artTemplate"></a>artTemplate</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="string">`&#123;&#123;each list as item index&#125;&#125;  &#123;&#123;/each&#125;&#125;`</span>遍历的语法</div><div class="line">   <span class="keyword">var</span> tpl = <span class="string">'字符串拼接'</span>;</div><div class="line">   <span class="keyword">var</span> render = template.complie();</div><div class="line">   $()</div></pre></td></tr></table></figure>
<ul>
<li><code>git pull origin teacher:teacher</code></li>
</ul>
<h2 id="小知识点"><a href="#小知识点" class="headerlink" title="小知识点"></a>小知识点</h2><ul>
<li><code>$(this).closest(&#39;td&#39;)</code> 找到当前元素的最近的td父元素；</li>
<li>模板中，如果有HTML标签，就需要转译，<code>花括号# tc_introduce花括号</code>;在 tc_introduce的内容中如果有<code>&lt;p&gt;&lt;/p&gt;</code>，通过<code>#</code>转译，就可以对标签进行渲染；</li>
<li>ajax异步多层嵌套，使用<code>promise</code>；是ESC6的新属性；</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;模块化的意义&quot;&gt;&lt;a href=&quot;#模块化的意义&quot; class=&quot;headerlink&quot; title=&quot;模块化的意义&quot;&gt;&lt;/a&gt;模块化的意义&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;团队协作会有命名冲突&lt;/li&gt;
&lt;li&gt;复杂的文件依赖关系不方便维护&lt;/li&gt;
&lt;/ul&gt;
&lt;h
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>Angular 自定义模块以及路由的配置</title>
    <link href="http://yoursite.com/2016/12/08/Angular%20%E8%87%AA%E5%AE%9A%E4%B9%89%E6%A8%A1%E5%9D%97%E4%BB%A5%E5%8F%8A%E8%B7%AF%E7%94%B1%E7%9A%84%E9%85%8D%E7%BD%AE/"/>
    <id>http://yoursite.com/2016/12/08/Angular 自定义模块以及路由的配置/</id>
    <published>2016-12-08T04:39:04.000Z</published>
    <updated>2017-04-12T03:42:37.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Angular-自定义模块以及路由的配置"><a href="#Angular-自定义模块以及路由的配置" class="headerlink" title="Angular 自定义模块以及路由的配置"></a>Angular 自定义模块以及路由的配置</h1><h2 id="自定义服务，-service和-factory"><a href="#自定义服务，-service和-factory" class="headerlink" title="自定义服务，$service和$factory"></a>自定义服务，<code>$service</code>和<code>$factory</code></h2><ul>
<li>App.controller(); 内置控制器</li>
<li>App.directive(); 内置指令</li>
<li>App.filter(); 内置过滤器</li>
<li>App.factory(); 内置服务</li>
<li>App.service(); 内置服务</li>
<li>App.config(); 配置块</li>
<li>App.run(); 运行块</li>
</ul>
<h2 id="配置块和运行块"><a href="#配置块和运行块" class="headerlink" title="配置块和运行块"></a>配置块和运行块</h2><ul>
<li>App.config():一个参数，为数组；[]；App.config([]);</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">App.config([<span class="string">'$logProvider'</span>,<span class="string">'$filterProvider'</span>,<span class="function"><span class="keyword">function</span> (<span class="params">$logProvider,$filterProvider</span>) </span>&#123;</div><div class="line"><span class="comment">//通过$logProvider对$log进行配置;</span></div><div class="line">$logProvider.debugEnabled(<span class="literal">false</span>);</div><div class="line">$filterProvider.register(<span class="string">'capitalize'</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">   <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">input</span>) </span>&#123;</div><div class="line">       <span class="keyword">return</span> (input[<span class="number">0</span>].toUpperCase() + input.slice(<span class="number">1</span>));</div><div class="line">   &#125;</div><div class="line">&#125;)</div><div class="line">&#125;]);</div><div class="line"><span class="comment">//这样在配置好之后，在HTML中就可以直接使用‘capitalize’服务了</span></div><div class="line">&lt;p ng-controller=<span class="string">'DemoCtrl'</span>&gt; 《name | capitalize》&lt;<span class="regexp">/p&gt;</span></div></pre></td></tr></table></figure>
<h3 id="运行块"><a href="#运行块" class="headerlink" title="运行块"></a>运行块</h3><ul>
<li>$rootScope:  AngularJS的根作用域，可定于全局变量</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">App.run([<span class="string">'$rootScope'</span>,<span class="function"><span class="keyword">function</span> (<span class="params">$rootScope</span>) </span>&#123;</div><div class="line">       $rootScope.name = <span class="string">'顺治'</span>;</div><div class="line">   &#125;])</div><div class="line">   <span class="comment">//这个name在此文件中的任何一个控制器中都可以使用；</span></div></pre></td></tr></table></figure>
<h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><ul>
<li>路由是URL地址与程序的映射关系；通过调整地址的变化，可以‘调用或执行’ 某一具体的程序；</li>
<li>SPA：single page application 单页面展示所有功能；</li>
<li>多页面最明显的一个缺点就是每次更新页面都要进行刷新，不能得到很好的用户体验；</li>
<li>AngularJS的路由是建立在单页面的基础之上的；</li>
<li><code>onhashchange</code>:检测地址栏中地址的变化，绑在window上的</li>
<li>PHP中：<code>file_get_contents(&#39;./views/&#39;.$hash.&#39;.html&#39;)</code>;获取文件中的内容</li>
<li>锚链接就是点断的路由，就是地址与程序的映射关系；</li>
</ul>
<h3 id="路由的配置"><a href="#路由的配置" class="headerlink" title="路由的配置"></a>路由的配置</h3><ul>
<li>路由经过设置才能使用</li>
<li>模块需要依赖路由 <code>var Music = angular.module(&#39;Music&#39;,[&#39;ngRoute&#39;]);</code></li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"> &lt;nav&gt;</div><div class="line"> //锚点中有参数的时候，不会影响到路由；ß</div><div class="line">    &lt;a href="#!/login?name=小明"&gt;登录&lt;/a&gt; //地址必须写成  #！/的形式</div><div class="line">    &lt;a href="#!/register"&gt;注册&lt;/a&gt;</div><div class="line">&lt;/nav&gt;</div><div class="line">    &lt;!-- ng-view 是一个占位符--&gt;</div><div class="line">&lt;div ng-view&gt;&lt;/div&gt;</div><div class="line"></div><div class="line">var App = angular.module('App',['ngRoute']);</div><div class="line">//路由是需要配置才能使用;</div><div class="line">App.config(['$routeProvider',function ($routeProvider) &#123;</div><div class="line">    //两个参数path 和 route</div><div class="line">    //第一个参数:路由</div><div class="line">    //第二个参数是路由的配置</div><div class="line">    $routeProvider.when('/register',&#123;</div><div class="line">        //template:"&lt;h1&gt;首页&lt;/h1&gt;",简单的内容</div><div class="line">        templateUrl:'./views/register.html' //可以引入URL地址</div><div class="line">        //为当前视图文件分配控制器;</div><div class="line">        controller:'RegisterCtrl',</div><div class="line">    &#125;).when('/login',&#123;</div><div class="line">        //template:"&lt;h1&gt;登录&lt;/h1&gt;",</div><div class="line">        templateUrl:'./views/login.html'</div><div class="line">    &#125;).otherwise(&#123;</div><div class="line">        //如果都不符合,可以设置默认值</div><div class="line">        redirectTo:'/register'</div><div class="line">    &#125;)</div><div class="line">&#125;])</div><div class="line"></div><div class="line">App.controller('RegisterCtrl',['$scope',function ($scope) &#123;</div><div class="line">    $scope.title = '注册';</div><div class="line">&#125;])</div><div class="line"></div><div class="line">//然后在register.html页面中就可以直接进行数据绑定 &lt;h1&gt;《title》&lt;/h1&gt;;</div></pre></td></tr></table></figure>
<ul>
<li>可以使用路由，也就是说开发者可以根据地址的变化执行不同的业务逻辑；路由需要  配置  后才能被使用；</li>
<li><p>使用when方法监听地址的变化，然后处理相应的逻辑；</p>
</li>
<li><p>参数传递可以有两种方式，一种方式是通过地址传参：</p>
<ul>
<li>地址传参：其格式为?key1=val&amp;key2=val2;.when(‘/login?name=lisi&amp;age=17’)</li>
<li><p>通过路由传参: 路由/:参数名</p>
</li>
<li><p>！！！注意：地址的格式（/login/:name/:pass）必须与路由的格式（#!/login/小明/12345）完全保持一致，一一对应；</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;a href="#!/login/小明/12345"&gt;登录&lt;/a&gt;</div><div class="line">.when('/login/:name/:pass',&#123;</div><div class="line"></div><div class="line">    //template:"&lt;h1&gt;登录&lt;/h1&gt;",</div><div class="line">    templateUrl:'./views/login.html'</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
</li>
<li><p>获取路由中传递的参数 <code>var parameter = $routeParams</code>;</p>
</li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Angular-自定义模块以及路由的配置&quot;&gt;&lt;a href=&quot;#Angular-自定义模块以及路由的配置&quot; class=&quot;headerlink&quot; title=&quot;Angular 自定义模块以及路由的配置&quot;&gt;&lt;/a&gt;Angular 自定义模块以及路由的配置&lt;/h1&gt;&lt;
    
    </summary>
    
      <category term="Angular" scheme="http://yoursite.com/categories/Angular/"/>
    
    
  </entry>
  
  <entry>
    <title>Angualar 过滤器、依赖注入等</title>
    <link href="http://yoursite.com/2016/11/25/%20Angualar%20%E8%BF%87%E6%BB%A4%E5%99%A8%E3%80%81%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5%E7%AD%89/"/>
    <id>http://yoursite.com/2016/11/25/ Angualar 过滤器、依赖注入等/</id>
    <published>2016-11-25T04:39:04.000Z</published>
    <updated>2017-04-12T03:40:44.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Angualar-过滤器、依赖注入等"><a href="#Angualar-过滤器、依赖注入等" class="headerlink" title="Angualar 过滤器、依赖注入等"></a>Angualar 过滤器、依赖注入等</h1><h2 id="小知识点"><a href="#小知识点" class="headerlink" title="小知识点"></a>小知识点</h2><ul>
<li>触发脏值检测 <code>scope.$digest()</code>;监听视图中的数据改变；ng-click事件内部中自动封装了这个检测，也可以手动添加；</li>
<li>form 表单有默认的submit事件，通过回车就可以触发；。form中如果有action，那么在submit之后，action也会重新发送一次请求，会刷新页面，所以，当使用submit提交数据时，可以将默认的action删除；</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">   <span class="tag">&lt;<span class="name">form</span> <span class="attr">ng-submit</span>=<span class="string">'show()'</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">h1</span>&gt;</span>todos<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"new-todo"</span> <span class="attr">ng-model</span>=<span class="string">'msg'</span> <span class="attr">placeholder</span>=<span class="string">"What needs to be done?"</span> <span class="attr">autofocus</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line">//angularJS通过ng-model将V与M进行绑定；</div><div class="line">//所以input中的value值就等于$scope.msg; 所以实际上$scope.msg = $('input').val();只不过这一步是AngularJS内部做的；</div><div class="line">//所以`$scope.msg=""`就直接将input的val值置空了；</div></pre></td></tr></table></figure>
<ul>
<li>AngularJS 遍历，获取当前元素的index值</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"todo-list"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">li</span> <span class="attr">ng-repeat</span>=<span class="string">"item in tabs "</span>&gt;</span>//item可以获取当前元素</div><div class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"view"</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">input</span> <span class="attr">ng-click</span>=<span class="string">"change($index)"</span> <span class="attr">class</span>=<span class="string">"toggle"</span> <span class="attr">type</span>=<span class="string">"checkbox"</span>&gt;</span> //$index 代表当前元素所对应的index值</div><div class="line">				<span class="tag">&lt;<span class="name">label</span>&gt;</span>《item.tab》<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">button</span>  <span class="attr">class</span>=<span class="string">"destroy"</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>在angular中，涉及到通过判断而决定某个样式显示或隐藏时，尽量通过 ng-class=”{attr:flag}”来决定，不用再在js中进行if判断了；</li>
</ul>
<h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><ul>
<li>根作用于  <code>ng-app=&quot;App&quot;</code>所处的作用域</li>
</ul>
<h2 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h2><ul>
<li>在AngularJS中使用过滤器格式化展示数据，在“《》”中使用”|”来调用过滤器，使用“：”传递参数；</li>
<li>价格过滤器 <code>《price|currency:&#39;￥&#39;：1》</code>;冒号后面是传参数，多个参数多个冒号链接，：1表示表刘一个小数；</li>
<li>时间过滤器 <code>《now | date:&quot;yyyy-MM-dd hh:mm:ss&quot;》</code></li>
<li>控制排序方向 <code>《list | orderBy:&quot;score&quot;:&quot;true&quot;》</code>  true为反向排序，false为正向排序，默认为false；</li>
<li>常用内置过滤器</li>
<li><img src="media/14904890310833/14905800642259.jpg" alt=""></li>
</ul>
<h2 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h2><ul>
<li>采用 ‘注入’ 的方式可以解决开发过程中的依赖的关系，成为依赖注入；</li>
<li>一般 注入是通过 ‘参数’ 的形式实现的；</li>
<li><code>$http</code> 同 <code>$scope</code> 一样，也是AngularJS内置的功能。可以提供发送异步请求的功能；</li>
</ul>
<h2 id="服务（重点）"><a href="#服务（重点）" class="headerlink" title="服务（重点）"></a>服务（重点）</h2><ul>
<li><code>$</code>AngularJS内置的服务；<code>ng-</code> AngularJS 内置的指令；</li>
<li>常见的内置服务：需要在依赖中写入，然后才可以使用<ul>
<li>$scope</li>
<li>$interval</li>
<li>$timeout</li>
<li>$log</li>
<li>$http</li>
</ul>
</li>
</ul>
<h3 id="log-服务-调试信息的输出"><a href="#log-服务-调试信息的输出" class="headerlink" title="$log 服务 调试信息的输出"></a>$log 服务 调试信息的输出</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$log.error(<span class="string">'这是一个错误'</span>);</div><div class="line">$log.warn(<span class="string">'这个一个警告'</span>);</div><div class="line">$log.log(<span class="string">'这是一个console.log'</span>);</div><div class="line">$log.debug(<span class="string">'这是一个调试'</span>);</div><div class="line">$log.info(<span class="string">'这是一个普通内容'</span>);</div></pre></td></tr></table></figure>
<h3 id="timeout和-interval"><a href="#timeout和-interval" class="headerlink" title="$timeout和 $interval"></a><code>$timeout</code>和 <code>$interval</code></h3><ul>
<li>$timeout 服务，延时显示数据，$interval 服务：计时器</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"> App.controller(<span class="string">'DemoCtrl'</span>,[<span class="string">'$timeout'</span>,<span class="string">'$log'</span>,<span class="string">'$interval'</span>,<span class="function"><span class="keyword">function</span> (<span class="params">$timeout,$log,$interval</span>) </span>&#123;</div><div class="line">    <span class="comment">//$timeout是一个函数</span></div><div class="line">    <span class="comment">//延时3秒后显示内容;</span></div><div class="line">    $timeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        $log.info(<span class="string">'我哈哈哈,我等了3秒'</span>)</div><div class="line">    &#125;,<span class="number">3000</span>);</div><div class="line"></div><div class="line">    <span class="keyword">var</span> i = <span class="number">0</span>;</div><div class="line">    $interval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        $log.info(i++);</div><div class="line">    &#125;,<span class="number">1000</span>)</div><div class="line">&#125;])</div></pre></td></tr></table></figure>
<h3 id="http-专门发起异步请求"><a href="#http-专门发起异步请求" class="headerlink" title="$http 专门发起异步请求"></a>$http 专门发起异步请求</h3><ul>
<li>2、在PHP中 $_POST 是专门接收 formData格式数据的，即“Content-Type:application/x-www-form-urlencoded”;  但是不能接收 Content-Type：application/json; </li>
<li>3、当headers为“Content-Type:application/x-www-form-urlencoded”时，上传的data格式为 <code>data:&quot;name=itcast&amp;age=11&quot;</code>; </li>
<li>4、当headers为<code>“Content-Type:application/json”</code>时，传递的参数格式为：<code>data:{&quot;name&quot;:&quot;itcast&quot;,&quot;name&quot;:18}</code>;</li>
</ul>
<h4 id="AngularJS-http总结"><a href="#AngularJS-http总结" class="headerlink" title="AngularJS $http总结"></a>AngularJS $http总结</h4><ol>
<li>$http发送请求的方式有3种：method：“get”/“post”/‘jsonp’;</li>
<li>参数的传递方式为：params:</li>
</ol>
<h5 id="get方式请求"><a href="#get方式请求" class="headerlink" title="get方式请求"></a>get方式请求</h5><ul>
<li>“get”方式发送请求时，正常发送；参数以params:{name:’lisi’,age:18}发送;<ul>
<li>不管以什么方式传递参数，内部都会转换成 ？name=lisi&amp;age=18的形式</li>
<li>在PHP中将传入的参数以json对象的形式输出</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">    $http(&#123;</div><div class="line">      <span class="attr">url</span>:<span class="string">'./example.php'</span>,</div><div class="line">      <span class="attr">method</span>:<span class="string">'get'</span>,</div><div class="line">      <span class="attr">params</span>:&#123;<span class="attr">name</span>:<span class="string">'lisi'</span>,<span class="attr">age</span>:<span class="number">18</span>&#125;,</div><div class="line">      </div><div class="line">  &#125;).success(<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</div><div class="line">      <span class="built_in">console</span>.log(data);</div><div class="line">  &#125;)</div><div class="line"><span class="comment">//在PHP中代码：</span></div><div class="line">$name = $_GET[<span class="string">'name'</span>];</div><div class="line">$age = $_GET[<span class="string">'age'</span>];</div><div class="line">$array = [<span class="string">'name'</span>=&gt;$name,<span class="string">'age'</span>=&gt;$age];</div><div class="line"><span class="comment">//var_dump($array);</span></div><div class="line"><span class="comment">//将传递的参数放到数组中,并将数组转换成json对象格式进行输出;</span></div><div class="line">echo json_encode($array);</div><div class="line"><span class="comment">//结果为：&#123;name: "lisi", age: "18"&#125;</span></div></pre></td></tr></table></figure>
<h5 id="post方式请求"><a href="#post方式请求" class="headerlink" title="post方式请求"></a>post方式请求</h5><ul>
<li><p>“post”请求，需要注意两点</p>
<ol>
<li>设置请求头：headers:“Content-Type:application/x-www-form-urlencoded”；</li>
<li><p>参数以data传递form data，data：“name=lisi&amp;age=17”；请求头与参数必须保持一致；</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//post请求</span></div><div class="line">$http(&#123;</div><div class="line">    <span class="attr">url</span>: <span class="string">'./example.php'</span>,</div><div class="line">    <span class="attr">method</span>: <span class="string">'post'</span>,</div><div class="line">    <span class="attr">data</span>: <span class="string">'name=lisi&amp;age=17'</span>,</div><div class="line">    <span class="attr">headers</span>: &#123;</div><div class="line">        <span class="string">'Content-Type'</span>: <span class="string">'application/x-www-form-urlencoded'</span></div><div class="line">    &#125;</div><div class="line">&#125;).success(<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(data);</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
</li>
</ol>
</li>
</ul>
<h5 id="JSONP-的原理"><a href="#JSONP-的原理" class="headerlink" title="JSONP 的原理"></a>JSONP 的原理</h5><blockquote>
<p>前端传递一个实现定义好的函数名，给服务端，然后服务端接收这个函数名并拼凑一个“（）”，并返回，前端就接收到了 这个函数的调用；<br>在jQuery中，我们不写callback的明细，ajax会自动帮我们生成一个，jQuery+序列号+时间戳等；但是在angularJS中，他们有帮我们封装，所以必须手动加上；</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">$http(&#123;</div><div class="line">        <span class="attr">url</span>:<span class="string">'./example.php'</span>,</div><div class="line">        <span class="attr">method</span>:<span class="string">'jsonp'</span>,</div><div class="line">        <span class="attr">params</span>:&#123;</div><div class="line">            <span class="comment">//callback必须用'JSON_CALLBACK'进行占位，后端返回回调函数：angular.callbacks._0(lisi)；这个回调函数的结果就是success时的data数据；</span></div><div class="line">            callback:<span class="string">'JSON_CALLBACK'</span>,</div><div class="line">            <span class="attr">name</span>:<span class="string">'lisi'</span>,</div><div class="line">            <span class="attr">age</span>:<span class="number">17</span></div><div class="line">        &#125;</div><div class="line">    &#125;).success(<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(data);</div><div class="line">    &#125;)</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Angualar-过滤器、依赖注入等&quot;&gt;&lt;a href=&quot;#Angualar-过滤器、依赖注入等&quot; class=&quot;headerlink&quot; title=&quot;Angualar 过滤器、依赖注入等&quot;&gt;&lt;/a&gt;Angualar 过滤器、依赖注入等&lt;/h1&gt;&lt;h2 id=&quot;小
    
    </summary>
    
      <category term="Angular" scheme="http://yoursite.com/categories/Angular/"/>
    
    
  </entry>
  
  <entry>
    <title>Angular入门</title>
    <link href="http://yoursite.com/2016/11/10/Angular%E5%85%A5%E9%97%A8/"/>
    <id>http://yoursite.com/2016/11/10/Angular入门/</id>
    <published>2016-11-10T04:39:04.000Z</published>
    <updated>2017-04-12T03:37:53.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="angular入门"><a href="#angular入门" class="headerlink" title="angular入门"></a>angular入门</h1><h2 id="angular简介"><a href="#angular简介" class="headerlink" title="angular简介"></a>angular简介</h2><ul>
<li>angular是一个框架，诸多类库的集合，以数据和逻辑为核心；</li>
</ul>
<h2 id="MVC"><a href="#MVC" class="headerlink" title="MVC"></a>MVC</h2><ul>
<li>modal-view-controller 模型-视图-控制器</li>
<li>模型：服务端专门处理后台传入的数据；一般指操作数据库</li>
<li>控制器：将服务端处理好的数据传给前端； 连接模型和视图的桥梁；</li>
<li>视图：将内容、数据呈现给；HTML展示</li>
<li>使用mvc框架，会更高效，易于管理和高效</li>
</ul>
<h2 id="AngularJS应用"><a href="#AngularJS应用" class="headerlink" title="AngularJS应用"></a>AngularJS应用</h2><ul>
<li>在任意DOM元素上使用一个属性 ng-app,就可以定义一个AngularJS的应用；</li>
<li>ng-app属性所有的DOM元素所包含的所有子元素都属于应用的一部分；</li>
<li>引用了angular框架下，会引入一个全局对象，angular；</li>
<li>在此对象下有若干对象，其中angular.module()可以实例化一个对象；</li>
<li><code>angular.module(&#39;App&#39;,[])</code>两个参数：<ul>
<li>1：模块化名称</li>
<li>2：依赖;[]暂时不依赖任何对象</li>
</ul>
</li>
<li>控制器<code>App.controller()</code>两个参数<ul>
<li>1：名称</li>
<li>2：依赖;<ul>
<li>关于依赖，依赖的数组里，最后一个单元必须是一个函数 </li>
<li><code>App.controller(&#39;DemoCtrl&#39;,[’$scope‘,function($scope){}])</code></li>
</ul>
</li>
<li>$scope 就是我们所需要的 M；</li>
</ul>
</li>
</ul>
<h3 id="angular的内置指令"><a href="#angular的内置指令" class="headerlink" title="angular的内置指令"></a>angular的内置指令</h3><ul>
<li>ng-show 是通过 display：none 和 display：block来决定显示和隐藏的</li>
<li>ng-if 如果ng-if=’false’,那么在HTML中就没有了这个DOM节点了；</li>
<li>ng-class 值得类型可以是对象，并且此对象的属性是真是存在的类样式，属性值决定了此属性是否应用，true为应用，false不应用 <code>ng-class={box:true,red:true}</code>为应用box这个类样式</li>
<li><code>ng-include = “&#39;aside.html&#39;”</code>;需要将aside.html用’’包裹起来的；<ul>
<li>浏览器端 JS不能够读取本地文件，因为浏览器JS是运行在客户端的，出于安全考虑，是不允许读取用户磁盘文件的； </li>
<li>ng-include是通过ajax发出请求，得到数据的；</li>
</ul>
</li>
<li>表单禁用 <code>disabled</code>,只要属性存在，不管是什么值，都表示禁用<ul>
<li><code>input type=&#39;text&#39; disabled 或者disabled=&#39;&#39;true/false</code> ；只要存在都是禁用</li>
<li>在angular中，<code>ng-disabled = &#39;true&#39;表单禁用</code>；<code>ng-disabled = &#39;false&#39;表单应用</code></li>
</ul>
</li>
<li>无值属性:都可以进行设置属性值；<ul>
<li>ng-disabled</li>
<li>ng-readonly</li>
<li>ng-checked</li>
<li>ng-selected </li>
</ul>
</li>
<li>ng-src 和 ng-href ;如果在HTML中直接写src=《path》，虽然在解析完成后地址会加载，但是会先报错；</li>
</ul>
<h3 id="Angular自定义指令"><a href="#Angular自定义指令" class="headerlink" title="Angular自定义指令"></a>Angular自定义指令</h3><ul>
<li>angular是一个模块实例</li>
<li>.controller()来定义一个模块</li>
<li>.directive()来自定义属性；</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;p cls&gt;<span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></div><div class="line"><span class="comment">//自定义指令结构</span></div><div class="line">App.directive(<span class="string">'cls'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="comment">//return 回来是一个对象或者是函数，通常情况下都是对象</span></div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        <span class="comment">//E : element DOM元素</span></div><div class="line">        <span class="comment">//C: class</span></div><div class="line">        <span class="comment">//M: mark:注释</span></div><div class="line">        <span class="comment">//A:attribute 属性</span></div><div class="line">        restrict:<span class="string">"A"</span>,</div><div class="line">        <span class="attr">replace</span>:<span class="string">"true"</span>,<span class="comment">//模板中的标签会将HTML中的标签进行替换</span></div><div class="line">        template:<span class="string">"&lt;h1&gt;这是通过自定义指令添加的内容&lt;/h1&gt;"</span>，</div><div class="line">    &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h3 id="AngualrJS-双向数据绑定"><a href="#AngualrJS-双向数据绑定" class="headerlink" title="AngualrJS 双向数据绑定"></a>AngualrJS 双向数据绑定</h3><ul>
<li>通过表单元素添加 ng-model 属性；</li>
<li>ng-bind</li>
<li><p>花括号(使用《》代替)</p>
<ul>
<li>《》是ng-bind的简写</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&lt;input type=<span class="string">"text"</span> ng-model=<span class="string">'name'</span>&gt;<span class="comment">//input可以直接获取module中的$scope.name的值</span></div><div class="line">&lt;h1 ng-bind=<span class="string">'name'</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></div><div class="line">&lt;h2&gt;《name》&lt;<span class="regexp">/h2&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>只有表单元素才可以从视图向模型传送数据</p>
</li>
</ul>
<h3 id="AngularJS数据处理"><a href="#AngularJS数据处理" class="headerlink" title="AngularJS数据处理"></a>AngularJS数据处理</h3><ul>
<li><code>ng-switch = &quot;item&quot;</code> === <code>ng-switch on = &quot;item&quot;</code></li>
<li>闪烁问题处理，可以添加 ng-cloak指令 <code>&lt;h1 ng-cloak&gt;《name》&lt;/h1&gt;</code>;</li>
<li>angular 的遍历</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;li ng-repeat='item in lists'&gt;&#123;&#123;item&#125;&#125;&lt;/li&gt;</div><div class="line">//或者是</div><div class="line">&lt;li ng-repeat='item in lists'&gt;</div><div class="line">    &lt;span ng-bind='item'&gt;&lt;/span&gt;</div><div class="line">&lt;/li&gt;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;angular入门&quot;&gt;&lt;a href=&quot;#angular入门&quot; class=&quot;headerlink&quot; title=&quot;angular入门&quot;&gt;&lt;/a&gt;angular入门&lt;/h1&gt;&lt;h2 id=&quot;angular简介&quot;&gt;&lt;a href=&quot;#angular简介&quot; class
    
    </summary>
    
      <category term="angular" scheme="http://yoursite.com/categories/angular/"/>
    
    
  </entry>
  
  <entry>
    <title>Canvas 基本用法总结</title>
    <link href="http://yoursite.com/2016/08/03/%20canvas%20%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2016/08/03/ canvas 基本用法总结/</id>
    <published>2016-08-03T04:39:04.000Z</published>
    <updated>2017-04-12T03:58:02.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="canvas-基本用法总结"><a href="#canvas-基本用法总结" class="headerlink" title="canvas 基本用法总结"></a>canvas 基本用法总结</h1><h2 id="canvas"><a href="#canvas" class="headerlink" title="canvas"></a>canvas</h2><ol>
<li>canvas 在IE8之前有兼容性问题；</li>
<li>矩形的绘制<ul>
<li><code>rect(x,y,width,height)</code>这个需要<code>stroke()</code>描边</li>
<li><code>strokeRect(x,y,width,height)</code>;这个就不需要调用stroke描边</li>
<li><code>fillRect()</code>填充显示长方形，不需要单独填充操作；</li>
<li><code>clearRect(x,y,width,height)</code>;将特定位置的长方形清空；清空画布：<code>clearRect(0,0,cas.width,cas.height)</code>;</li>
<li>注意: <code>clearRect</code>不能清空路径,但是能清空描边或填充</li>
</ul>
</li>
<li><code>cxt.save() cxt.restore()</code>表示保存上次的绘制状态（包括fillStyle 和 strockeStyle）;<br>  <code>save()</code>可以保存多次绘制状态，以栈的方式存储;<code>后进先出</code>；</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"> cxt.beginPath();</div><div class="line"><span class="comment">//会存储fillStyle和strokeStyle</span></div><div class="line">cxt.restore();<span class="comment">//恢复最后一次保存的状态</span></div><div class="line">cxt.restore();<span class="comment">//恢复倒数第二次的状态</span></div><div class="line">cxt.rect(<span class="number">50</span>,<span class="number">50</span>,<span class="number">200</span>,<span class="number">200</span>);</div><div class="line">cxt.stroke();</div><div class="line">cxt.fill();</div></pre></td></tr></table></figure>
<h3 id="三、绘制圆弧"><a href="#三、绘制圆弧" class="headerlink" title="三、绘制圆弧"></a>三、绘制圆弧</h3><ul>
<li><p><code>arc(x,y,r,startAngle,endAngle,false)</code>,false代表顺时针绘制，true逆时针绘制；</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">圆的弧度 = <span class="number">2</span>πr；角度 = <span class="number">360</span>°</div><div class="line">所以 <span class="number">1</span>° = <span class="built_in">Math</span>.PI/<span class="number">180</span>;</div><div class="line"><span class="number">90</span>° = <span class="number">90</span> * <span class="built_in">Math</span>.PI/<span class="number">180</span>;</div></pre></td></tr></table></figure>
</li>
<li><p>水平往右方向为起始点；</p>
</li>
<li>绘制连续的路径，如果起始点与上一个的终点一致，就无需moveTo；<h3 id="四、数组-foreach和map方法使用"><a href="#四、数组-foreach和map方法使用" class="headerlink" title="四、数组 foreach和map方法使用"></a>四、数组 foreach和map方法使用</h3></li>
<li><code>foreach(function(item,index,arr){})</code> ,没有返回值；</li>
<li><code>arr.map(function(item,index){})</code>,操作之后，会返回修改之后的数组，有返回值<h3 id="五、逐帧动画"><a href="#五、逐帧动画" class="headerlink" title="五、逐帧动画"></a>五、逐帧动画</h3></li>
<li><code>requestAnimationFrame()</code>，同setTimeout作用类似；<h3 id="六、-canvas文字"><a href="#六、-canvas文字" class="headerlink" title="六、 canvas文字"></a>六、 canvas文字</h3></li>
<li>cxt.font(10px 宋体);</li>
<li>cxt.strokeText(text,x,y,max-width);一般最后一个参数不设置；（空心文字）；</li>
<li>cxt.fillText(text,x,y)(实芯文字)<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cxt.font = <span class="string">"30px 微软雅黑"</span>;</div><div class="line">cxt.strokeText(str,<span class="number">100</span>,<span class="number">100</span>);</div><div class="line">cxt.fillText(str,<span class="number">100</span>,<span class="number">300</span>);</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="七、-有独立路径的方法"><a href="#七、-有独立路径的方法" class="headerlink" title="七、 有独立路径的方法"></a>七、 有独立路径的方法</h3><ul>
<li>strokeRect();</li>
<li>fillRect();</li>
<li>strokeText();</li>
<li>fillText();<h3 id="八、-文字对齐方式"><a href="#八、-文字对齐方式" class="headerlink" title="八、 文字对齐方式"></a>八、 文字对齐方式</h3></li>
<li>textAlign：水平方向<ul>
<li>direction属性，两个值：rtl,ltr;</li>
<li>textAligh=”left” 居左对齐,是指文本的右边与参照物的左边对齐;</li>
<li>textAligh=”right” 居右对齐</li>
<li>textAligh=”center” 居中对齐</li>
</ul>
</li>
<li>textBaseline：处置方向对齐<ul>
<li>top; bottom; middle; hanging;alphabetic(文本基线是字母基线);ideographic;</li>
</ul>
</li>
</ul>
<h3 id="九、-图片加载问题"><a href="#九、-图片加载问题" class="headerlink" title="九、 图片加载问题"></a>九、 图片加载问题</h3><ul>
<li><p>通过<code>document.body.appedChild(&#39;img&#39;)</code>追加到页面中的img,不能直接获取到图片的宽和高，必须等图片加载完成之后才能获得;</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> img = <span class="keyword">new</span> Image();</div><div class="line">img.src = <span class="string">'king2.jpeg'</span>;</div><div class="line"><span class="comment">//图片加载完成之后,才能获取图片的宽高,才能加载</span></div><div class="line"><span class="comment">//图片的加载需要时间;</span></div><div class="line">img.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">cxt.drawImage(img,<span class="number">100</span>,<span class="number">100</span>,<span class="number">200</span>,<span class="number">200</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>cxt.drawImage()有两种参数形式:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//第一种写法,5个参数</span></div><div class="line"><span class="comment">//参数2,3画布上定位的图片,参数4,5只图片的宽和高;</span></div><div class="line">cxt.drawImage(img,<span class="number">100</span>,<span class="number">100</span>,<span class="number">100</span>,<span class="number">100</span>);</div><div class="line"></div><div class="line"><span class="comment">//第二种写法,9个参数</span></div><div class="line"><span class="comment">//1:图片,2,3:要裁剪的图片在原图片上的位置,等同于精灵图的位置;4、5裁剪区域的宽和高,6,7图片要在画布上的起始位置,8,9,图片在画布上的宽和高;</span></div><div class="line"><span class="comment">//此时裁剪的是第二排的第二个图片</span></div><div class="line">cxt.drawImage(img,<span class="number">40</span>,<span class="number">65</span>,<span class="number">40</span>,<span class="number">65</span>,cas.width/<span class="number">2</span><span class="number">-20</span>,cas.height/<span class="number">2</span><span class="number">-34.5</span>,<span class="number">40</span>,<span class="number">65</span>)</div><div class="line"><span class="built_in">Math</span>.PI = <span class="number">180</span>°</div></pre></td></tr></table></figure>
</li>
</ul>
<p>###　十、canvas旋转</p>
<ul>
<li>只能是旋转之后,在画出图形,不能画出图形之后再旋转;</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cxt.rotate(<span class="number">10</span>*<span class="built_in">Math</span>.PI/<span class="number">180</span>);</div><div class="line">cxt.strokeRect(<span class="number">100</span>,<span class="number">100</span>,<span class="number">200</span>,<span class="number">200</span>);</div></pre></td></tr></table></figure>
<h1 id="拓展："><a href="#拓展：" class="headerlink" title="拓展："></a>拓展：</h1><h2 id="一、函数的赋值"><a href="#一、函数的赋值" class="headerlink" title="一、函数的赋值"></a>一、函数的赋值</h2><ul>
<li>1: 逗号表达式，逗号分隔的表达式会从左往右逐个执行，但是以最后一个结果为准。</li>
<li><p>2:函数立即调用的语法I结构有两种：</p>
<ul>
<li>（）（）</li>
<li>（+ - ！ ~）function（）{}（）等；</li>
<li>二进制运算：按位，与或非  异或<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> num = (<span class="number">11</span>+<span class="number">12</span>,<span class="number">23</span>+<span class="number">23</span>,foo());</div><div class="line"><span class="built_in">console</span>.log(num);</div><div class="line"><span class="comment">//此时会以最后一个逗号之后的值为准，返回foo()的返回值赋值给num;</span></div><div class="line">都是函数立即调用：不同符号代表不同含义；按位运算，与或非，异或等；</div><div class="line">(funcyion(n)&#123;</div><div class="line">    <span class="built_in">console</span>.log(n)</div><div class="line">&#125;)(num);</div><div class="line">~<span class="function"><span class="keyword">function</span>(<span class="params">n</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(n);</div><div class="line">&#125;(num);</div><div class="line">!<span class="function"><span class="keyword">function</span>(<span class="params">n</span>)</span>&#123;</div><div class="line">    conosole.log(n);</div><div class="line">&#125;(num);</div><div class="line">+<span class="function"><span class="keyword">function</span>(<span class="params">n</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(n);</div><div class="line">&#125;(num);</div><div class="line">-<span class="function"><span class="keyword">function</span>(<span class="params">n</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(n);</div><div class="line">&#125;(num);</div><div class="line"><span class="comment">//这种形式的写法会将function转换为表达式</span></div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>3：将数值型参数转换成布尔值</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">param</span>)</span>&#123;</div><div class="line">    <span class="comment">//将parameter转换为true；</span></div><div class="line">    <span class="keyword">var</span> flag = !!param;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>4：两个事件队列，第一个出错，第二个仍会正常进行</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//第一个报错，第二个时间到了，第二个也会正常执行；</span></div><div class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(abc);</div><div class="line">&#125;,<span class="number">10</span>)</div><div class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="number">123</span>);</div><div class="line">&#125;,<span class="number">0</span>)</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="二、修改原型指向"><a href="#二、修改原型指向" class="headerlink" title="二、修改原型指向"></a>二、修改原型指向</h2><ul>
<li>实例产生之后，再修改构造函数的原型，对实例中的数据没有影响；按时回影响instanceof的判断；</li>
<li>只有当<code>foo.__proto__==Foo.prototype</code>成立时，<code>foo instanceof Foo</code>才成立；<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.flag = <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params">info</span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.info = info;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> foo = <span class="keyword">new</span> Foo(<span class="string">'123'</span>);<span class="comment">//此时Foo.prototype = &#123;&#125;;</span></div><div class="line">Foo.prototype = <span class="keyword">new</span> fn();</div><div class="line"><span class="built_in">console</span>.log(foo <span class="keyword">instanceof</span> Foo)<span class="comment">//结果是false；,</span></div><div class="line"><span class="comment">//foo.__proto__是原来Foo的原型；</span></div><div class="line"><span class="comment">//现在Foo的prototype = fn;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="三、arr-map"><a href="#三、arr-map" class="headerlink" title="三、arr.map"></a>三、arr.map</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="string">'1.5'</span>,<span class="string">'2.5'</span>,<span class="string">'3.5'</span>];</div><div class="line"><span class="built_in">console</span>.log(arr.map(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.Floor(item)</div><div class="line">    <span class="comment">//结果为['1','2','3];</span></div><div class="line">&#125;))</div><div class="line"><span class="built_in">console</span>.log(arr);==<span class="comment">//结果还是原数组['1.5','2.5','3.5'];</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;canvas-基本用法总结&quot;&gt;&lt;a href=&quot;#canvas-基本用法总结&quot; class=&quot;headerlink&quot; title=&quot;canvas 基本用法总结&quot;&gt;&lt;/a&gt;canvas 基本用法总结&lt;/h1&gt;&lt;h2 id=&quot;canvas&quot;&gt;&lt;a href=&quot;#can
    
    </summary>
    
      <category term="canvas" scheme="http://yoursite.com/categories/canvas/"/>
    
    
  </entry>
  
  <entry>
    <title>Git 使用总结</title>
    <link href="http://yoursite.com/2016/04/19/Git%20%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2016/04/19/Git 使用总结/</id>
    <published>2016-04-19T04:39:04.000Z</published>
    <updated>2017-04-12T04:12:15.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="git-使用总结"><a href="#git-使用总结" class="headerlink" title="git 使用总结"></a>git 使用总结</h1><h1 id="git的两种工作流程"><a href="#git的两种工作流程" class="headerlink" title="git的两种工作流程"></a>git的两种工作流程</h1><ol>
<li>下载代码,在下载代码的基础上做开发,然后提交</li>
<li>或者git init 生成一个仓库,在这个生成的基础上添加代码,再推到主仓库上<h1 id="lt-lt-移位运算"><a href="#lt-lt-移位运算" class="headerlink" title="&lt;&lt; 移位运算"></a><code>&lt;&lt;</code> 移位运算</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="number">2</span>;</div><div class="line"><span class="built_in">console</span>.log(a &lt;&lt; <span class="number">2</span>);</div><div class="line"><span class="comment">//向左移动两位,乘以2^2,结果就是2*4 = 8;</span></div><div class="line"><span class="comment">//向右移动1位除以2,a&gt;&gt;1,结果就是2/2 = 1;</span></div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="创建共享仓库"><a href="#创建共享仓库" class="headerlink" title="创建共享仓库"></a>创建共享仓库</h2><ul>
<li>共享仓库的必须以<code>.git</code> 结尾;<code>demo.git</code></li>
<li><code>git init --bare</code> 创建一个共享仓库</li>
<li><code>git pull 远程仓库的地址 远程分支:本地分支</code>或者<code>git clone 远程仓库的地址 文件名称</code>下载代码</li>
<li><code>git push 远程仓库的地址 本地分支:远程分支</code>  推送代码<blockquote>
<p> git pull = git fetch + git merge</p>
</blockquote>
</li>
<li><code>git fetch</code>远程获取代码,但是不合并代码</li>
<li><code>git merge</code> 通过fetch过来的代码可以通过merge命令进行合并;<h2 id="查看分支和修改分支名称"><a href="#查看分支和修改分支名称" class="headerlink" title="查看分支和修改分支名称"></a>查看分支和修改分支名称</h2></li>
<li><code>git remote</code>查看远程仓库的别名  没有就用下一条创建</li>
<li><code>git remote add 别名名称(origin) 仓库地址(root@180.76.188.62:/root/demo.git)</code> 添加远程仓库的别名</li>
<li><code>git branch -r</code>查看远程分支</li>
<li><code>git branch</code>查看本地分支</li>
<li><code>git remote show origin</code>查看远程仓库别名的具体地址</li>
</ul>
<h2 id="git-pull-和-git-clone-的主要区别"><a href="#git-pull-和-git-clone-的主要区别" class="headerlink" title="git pull 和 git clone 的主要区别"></a>git pull 和 git clone 的主要区别</h2><ul>
<li>1:<code>git clone</code>的项目户自动建立 <code>origin</code>远程仓库地址的别名,自动创建了关联,再更新代码时直接<code>git pull</code>就可以拉下来代码;</li>
<li>2:<code>git pull</code>拉下来的代码,如果需要建立跟踪分支,需要执行<code>git branch --set-upstream -to==origin/master master</code>;<code>origin/master</code>表示远程分支;<code>master</code>表示本地分支</li>
</ul>
<h1 id="git使用总结"><a href="#git使用总结" class="headerlink" title="git使用总结"></a>git使用总结</h1><h2 id="已经存在的项目"><a href="#已经存在的项目" class="headerlink" title="已经存在的项目"></a>已经存在的项目</h2><ul>
<li>管理员分配git账号; 或者 生成自己的公钥和私钥,提交各管理员,授予权限;</li>
<li><code>git clone 仓库地址</code>下载代码,进行操作<h2 id="新项目"><a href="#新项目" class="headerlink" title="新项目"></a>新项目</h2></li>
<li>在github上创建一个空仓库;</li>
<li>在自己本地<code>git clone git@(仓库地址)</code>直接生成git文件;</li>
<li>编辑代码,</li>
<li><code>git add test.html</code>添加到暂存区</li>
<li><code>git commit -m &quot;&quot;</code>添加到本地仓库</li>
<li><code>git push origin master</code>推送到网上仓库成功 <h2 id="新项目第二种更新方式"><a href="#新项目第二种更新方式" class="headerlink" title="新项目第二种更新方式"></a>新项目第二种更新方式</h2></li>
<li>在本地建立文件夹,<code>git init</code>,编辑内容</li>
<li><code>git add</code></li>
<li><code>git commit -m &quot;&quot;</code></li>
<li><code>git remote add origin git@github等地址</code>将本地仓库与网上仓库建立连接和跟踪; </li>
<li><code>git push -u origin master</code>本地代码推送上去(-u与当前的别名进行关联)</li>
<li><code>git pull</code>以后就直接使用这个命令更新本地仓库的代码</li>
<li><code>git push</code>直接推送代码,更新就可以了;<h1 id="git分支管理"><a href="#git分支管理" class="headerlink" title="git分支管理"></a>git分支管理</h1></li>
</ul>
<ol>
<li><code>git clone</code>克隆代码</li>
<li><code>git checkout -b buy</code>创建并切换分支，</li>
<li>操作分支</li>
<li><code>git checkout master</code>切换到主分支</li>
<li>创建另一个新分支bugfix,编辑,编辑之后再次切换到主分支;</li>
</ol>
<ul>
<li><code>git checkout -d bugfix</code>删除bugfix分支;删除的是本地分支</li>
<li>删除远程分支<code>git push origin --delete</code> </li>
</ul>
<ol>
<li><code>git merge bugfix</code>;</li>
<li><code>git merge buy</code><h1 id="git-stash-缓存代码"><a href="#git-stash-缓存代码" class="headerlink" title="git stash 缓存代码"></a>git stash 缓存代码</h1></li>
</ol>
<ul>
<li>使用<code>git stash</code>可以将正在进行中的环境保存起来;master分支将会恢复到修改之前的状态;等紧急操作做完之后,</li>
<li>使用<code>git stash pop</code>取出之前保存的操作;继续编辑</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;git-使用总结&quot;&gt;&lt;a href=&quot;#git-使用总结&quot; class=&quot;headerlink&quot; title=&quot;git 使用总结&quot;&gt;&lt;/a&gt;git 使用总结&lt;/h1&gt;&lt;h1 id=&quot;git的两种工作流程&quot;&gt;&lt;a href=&quot;#git的两种工作流程&quot; class=&quot;
    
    </summary>
    
      <category term="Git" scheme="http://yoursite.com/categories/Git/"/>
    
    
  </entry>
  
  <entry>
    <title>Mac 中 Gulp 的本地安装</title>
    <link href="http://yoursite.com/2016/04/12/Mac%20%E6%9C%AC%E5%9C%B0%E5%AE%89%E8%A3%85%20gulp%20%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91/"/>
    <id>http://yoursite.com/2016/04/12/Mac 本地安装 gulp 遇到的坑/</id>
    <published>2016-04-12T04:39:04.000Z</published>
    <updated>2017-04-12T02:41:28.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Mac-中-gulp-的本地安装"><a href="#Mac-中-gulp-的本地安装" class="headerlink" title="Mac 中 gulp 的本地安装"></a>Mac 中 gulp 的本地安装</h1><h2 id="gulp-的安装"><a href="#gulp-的安装" class="headerlink" title="gulp 的安装"></a>gulp 的安装</h2><ol>
<li>首先需要确保你已经安装了 nodejs 环境，然后以全局的方式安装 gulp<br><code>sudo npm install -g gulp</code></li>
<li>全局安装 gulp 后，需要在你的工作目录单独安装一次，切换到你的工作目录，打开命令行<br><code>npm install gulp</code> </li>
</ol>
<h2 id="gulp-不能本地安装"><a href="#gulp-不能本地安装" class="headerlink" title="gulp 不能本地安装"></a>gulp 不能本地安装</h2><p>在安装过程中发现，即使在本地安装 gulp,系统也是默认将 gulp 安装在了全局目录下，经过查询资料，对于此类问题的解决方式做以下总结：</p>
<ol>
<li>出现此类问题，是因为系统默认将你的 npm 全局安装设置为 true 了，你需要将其改回来。</li>
<li>来到你的本地，在 <code>Macintosh HD</code> 中找到你的用户，通过 <code>shift + command + .</code> 将系统中隐藏的文件夹显示，找到 <code>.npmrc</code> ，此时，这个文件中 ，你的内容应该是 <code>global = true</code>; 将其 改为 <code>global = false</code>  之后，就可以在本地进行安装了</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Mac-中-gulp-的本地安装&quot;&gt;&lt;a href=&quot;#Mac-中-gulp-的本地安装&quot; class=&quot;headerlink&quot; title=&quot;Mac 中 gulp 的本地安装&quot;&gt;&lt;/a&gt;Mac 中 gulp 的本地安装&lt;/h1&gt;&lt;h2 id=&quot;gulp-的安装&quot;
    
    </summary>
    
      <category term="Mac" scheme="http://yoursite.com/categories/Mac/"/>
    
    
  </entry>
  
  <entry>
    <title>Mac操作系统总结</title>
    <link href="http://yoursite.com/2016/04/09/title:%20Mac%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2016/04/09/title: Mac操作系统总结/</id>
    <published>2016-04-09T11:48:15.000Z</published>
    <updated>2017-04-09T11:48:59.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Mac-操作系统"><a href="#Mac-操作系统" class="headerlink" title="Mac 操作系统"></a>Mac 操作系统</h1><h2 id="bash-profile的恢复"><a href="#bash-profile的恢复" class="headerlink" title="bash_profile的恢复"></a>bash_profile的恢复</h2><ul>
<li>修改了 <code>.bash_profile</code> 的配置，如果配置不对。很容出现许多内置命令都无法识别。不管输入什么命令都提示 <code>command not found</code>，连 rm、cd、vi 这些命令都用不了了；</li>
<li><p>这时候可以使用以下方法进行解决：</p>
<blockquote>
<p>export PATH=/bin:/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin </p>
</blockquote>
</li>
</ul>
<h2 id="Mac系统下全局变量的配置"><a href="#Mac系统下全局变量的配置" class="headerlink" title="Mac系统下全局变量的配置"></a>Mac系统下全局变量的配置</h2><ul>
<li>查看配置的变量：<code>echo $PATH</code></li>
<li>进入配置文件 <code>vim ~/.bash_profile</code></li>
<li>输入<code>i</code>进入编辑模式；</li>
<li>输入<code>export PATH=$PATH:/Users/gaonana/Documents/高娜娜文件/mongodb-osx-x86_64-3.4.3</code>;相当于在PATH变量后面多加一个自己定义的目录；</li>
<li>点击<code>esc</code>键进入末行模式；</li>
<li><code>:wq</code>保存配置文件并退出；</li>
<li>执行<code>source .bash_profile</code>使配置生效</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Mac-操作系统&quot;&gt;&lt;a href=&quot;#Mac-操作系统&quot; class=&quot;headerlink&quot; title=&quot;Mac 操作系统&quot;&gt;&lt;/a&gt;Mac 操作系统&lt;/h1&gt;&lt;h2 id=&quot;bash-profile的恢复&quot;&gt;&lt;a href=&quot;#bash-profile的恢
    
    </summary>
    
      <category term="Node" scheme="http://yoursite.com/categories/Node/"/>
    
    
      <category term="Mac" scheme="http://yoursite.com/tags/Mac/"/>
    
  </entry>
  
  <entry>
    <title>NodeJS 基础</title>
    <link href="http://yoursite.com/2016/04/03/title:%20NodeJS%20%E5%9F%BA%E7%A1%80/"/>
    <id>http://yoursite.com/2016/04/03/title: NodeJS 基础/</id>
    <published>2016-04-03T01:06:15.000Z</published>
    <updated>2017-04-09T11:49:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="NodeJS-day01"><a href="#NodeJS-day01" class="headerlink" title="NodeJS day01"></a>NodeJS day01</h1><h2 id="Nodejs是什么："><a href="#Nodejs是什么：" class="headerlink" title="Nodejs是什么："></a>Nodejs是什么：</h2><ul>
<li><p>解析执行JS，不包括DOM、Style等；</p>
<ul>
<li>是一个构建与 Chrome V8 引擎之上的一个JavaScript运行时环境</li>
<li>Node 可以像浏览器一样去解析和执行JavaScript代码；</li>
<li>Chrome V8引擎是所有浏览器里面解析和执行 JS 代码块 最快的；</li>
<li>在Node中，没有界面，不再需要关心HTML、CSS</li>
<li>和DOM style没有任何关系；只需要关注JavaScript；ECMAScript；<ul>
<li>文件操作</li>
<li>网络操作</li>
<li>让JavaScript代码具有了服务器编程能力</li>
</ul>
</li>
</ul>
</li>
<li><p>NodeJS的特性：</p>
<ul>
<li>事件驱动 </li>
<li>非阻塞IO模型：大量的异步编程接口；NodeJS中充满了类似于ajax 一样的ＡＰＩ，回答函数；</li>
<li>快平台</li>
<li>单线程</li>
<li>轻量和高效</li>
</ul>
</li>
<li>npm 是世界上最大的开源库生态系统<ul>
<li>npm 上发布的第三方包已经接近35万个之多</li>
</ul>
</li>
</ul>
<h2 id="NodeJS可以做什么"><a href="#NodeJS可以做什么" class="headerlink" title="NodeJS可以做什么"></a>NodeJS可以做什么</h2><ul>
<li>NodeJS为JavaScript提供了服务端编程的能力（不处理UI）；<ul>
<li>Java、PHP、Python、。net、Ruby等 做的Node都能做</li>
<li>网站开发，提供网站服务端</li>
<li>具有与数据库交互的能力</li>
<li>移动应用，网络游戏等需要服务的地方Node都可以做；</li>
<li>CLI(Command Line Interface)命令行接口程序<ul>
<li>例如：Gulp、hexo、git等</li>
<li>Node 具有开发命令行工具的能力；<h2 id="Node的应用场景"><a href="#Node的应用场景" class="headerlink" title="Node的应用场景"></a>Node的应用场景</h2></li>
</ul>
</li>
</ul>
</li>
<li>Node是前端进阶必备的一个能力；</li>
<li>对IO操作比较频繁；IO：input、 output<ul>
<li>文件读取</li>
<li>和数据库交互：网络数据IO<h2 id="一些资源"><a href="#一些资源" class="headerlink" title="一些资源"></a>一些资源</h2></li>
</ul>
</li>
<li>朴灵：《深入浅出Node.js》原理性，阿里出品</li>
<li>阮一峰的Node.js</li>
<li>Node入门，nodebegin.org/index-zn-cn 强烈推荐</li>
</ul>
<h2 id="Node-程序的运行"><a href="#Node-程序的运行" class="headerlink" title="Node 程序的运行"></a>Node 程序的运行</h2><ol>
<li>在终端的任何目录下输入<code>node</code>命令，都可以执行<code>node.exe</code>程序<ul>
<li>核心就在于通过操作系统</li>
</ul>
</li>
<li>参数</li>
</ol>
<h2 id="Node中的ECMAScript"><a href="#Node中的ECMAScript" class="headerlink" title="Node中的ECMAScript"></a>Node中的ECMAScript</h2><ol>
<li>Node中的window 是 global<h2 id="Node核心模块"><a href="#Node核心模块" class="headerlink" title="Node核心模块"></a>Node核心模块</h2></li>
<li>Node把绝大多数的API，都封装到了一份具名的核心模块了，例如文件操作的<code>fs</code>; 网络操作的<code>http</code>等；</li>
<li>也就是说，使用核心模块，必须先加载才可以使用；</li>
</ol>
<blockquote>
<p>核心模块以位移的标识名称进行暴露，使用时，通过<code>require</code>进行引入</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> name = <span class="built_in">require</span>(<span class="string">'唯一标识的模块名称'</span>)；</div></pre></td></tr></table></figure>
<h3 id="在Node中使用第三方包"><a href="#在Node中使用第三方包" class="headerlink" title="在Node中使用第三方包"></a>在Node中使用第三方包</h3><ol>
<li>通过 npm 下载</li>
<li>通过 rquire 函数引包</li>
<li>查看第三方的API，try-try-see;</li>
</ol>
<h3 id="用户自定义模块"><a href="#用户自定义模块" class="headerlink" title="用户自定义模块"></a>用户自定义模块</h3><ol>
<li>在Node中，也提供了一种所谓的JavaScript模块化解决方案，（类似以requireJS）；</li>
</ol>
<h1 id="小知识点"><a href="#小知识点" class="headerlink" title="小知识点"></a>小知识点</h1><ol>
<li>chrome浏览器每次会发送两次请求，一次请求icon；一次请求数据；</li>
</ol>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">/a</div><div class="line">/favicon.ico</div></pre></td></tr></table></figure>
<ol>
<li>Node 获取请求路径 var url = res.url;</li>
<li>不同的响应头</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//HTML格式，网页面中写数据的时候不会出现中文乱码；</span></div><div class="line">res.writeHead(<span class="number">200</span>,&#123;</div><div class="line">        <span class="string">'Content-Type'</span>:<span class="string">'text/html;charset=utf-8'</span></div><div class="line">    &#125;)；</div><div class="line">    res.writeHead(<span class="number">200</span>,&#123;</div><div class="line">    <span class="comment">//响应的内容是简单文本</span></div><div class="line">    <span class="string">'Content-Type'</span>:<span class="string">'text/plain; charset=utf-8'</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<ol>
<li><code>./data/a.txt = data.a.txt</code>;</li>
<li>如果 fs.readFile(‘/data/a.txt’);则去脚本文件的根路径下面去找 C/data/a.txt文件</li>
<li>数组转换成字符串 JSON.stringfy(array);</li>
<li><code>res.end(data)</code>=== <code>res.write(data) res.end()</code>;</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;NodeJS-day01&quot;&gt;&lt;a href=&quot;#NodeJS-day01&quot; class=&quot;headerlink&quot; title=&quot;NodeJS day01&quot;&gt;&lt;/a&gt;NodeJS day01&lt;/h1&gt;&lt;h2 id=&quot;Nodejs是什么：&quot;&gt;&lt;a href=&quot;#Nod
    
    </summary>
    
      <category term="Node" scheme="http://yoursite.com/categories/Node/"/>
    
    
      <category term="Node" scheme="http://yoursite.com/tags/Node/"/>
    
  </entry>
  
  <entry>
    <title>Github使用</title>
    <link href="http://yoursite.com/2016/03/24/%20Github%20%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2016/03/24/ Github 使用/</id>
    <published>2016-03-24T04:39:04.000Z</published>
    <updated>2017-04-12T04:09:43.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="github使用"><a href="#github使用" class="headerlink" title="github使用"></a>github使用</h1><h2 id="本地仓库"><a href="#本地仓库" class="headerlink" title="本地仓库"></a>本地仓库</h2><p>###三个区域</p>
<ul>
<li>工作目录</li>
<li>暂存区</li>
<li>本地仓库<h3 id="文件的四个状态"><a href="#文件的四个状态" class="headerlink" title="文件的四个状态"></a>文件的四个状态</h3></li>
<li>未跟踪 untracked</li>
<li>已暂存 staged</li>
<li>已提交 coomited</li>
<li>已修改 modified<h3 id="相关命令"><a href="#相关命令" class="headerlink" title="相关命令"></a>相关命令</h3></li>
<li><code>git add file</code><ul>
<li>将未跟踪的文件加到暂存区</li>
<li>把暂存区修改的内容从新提交到暂存区</li>
</ul>
</li>
<li><code>git commit -m &quot;备注&quot;</code><ul>
<li>将暂存区的内容提交到本地仓库中</li>
</ul>
</li>
<li><code>git rm --cached files</code><ul>
<li>将暂存的文件移动到工作目录</li>
</ul>
</li>
<li><code>git checkout files</code><ul>
<li>暂存区中修改的的内容撤销掉</li>
</ul>
</li>
<li><code>git reset HEAD(表示本地仓库中最后一次提交,commitId)</code><ul>
<li><code>--hard</code>工作目录、暂存区、本地仓库都会变化;</li>
<li><code>--soft</code>只会回滚本地仓库,工作目录和暂存区不会变化</li>
<li><code>--mixed</code>默认的,用本地仓库的版本覆盖暂存区文件,也会回滚本地仓库,不会修改工作目录<h2 id="远程仓库-共享仓库"><a href="#远程仓库-共享仓库" class="headerlink" title="远程仓库(共享仓库)"></a>远程仓库(共享仓库)</h2></li>
</ul>
</li>
<li><code>git clone</code>克隆远程仓库全部内容</li>
<li><code>git pull</code>从远程仓库中下载最新版本,覆盖本地分支内容<ul>
<li><code>git pull 远程仓库地址 远程分支:本地分支</code></li>
</ul>
</li>
<li><code>git push</code>提交本地代码版本<ul>
<li><code>git push 远程仓库地址 本地分支:远程分支</code></li>
</ul>
</li>
<li><code>git fetch</code>从远程仓库下载最新版本内容,但是不合并,需要手动使用`git merge<pre><code>合并;
</code></pre></li>
<li><code>git remote</code>查看远程分支别名</li>
<li><code>gitremote add origin</code>添加远程仓库地址的别名</li>
<li><code>git remote show origin</code>查看远程仓库别名的二聚体地址<h2 id="分支操作"><a href="#分支操作" class="headerlink" title="分支操作"></a>分支操作</h2></li>
<li><code>git branch 分支名称</code> 创建分支</li>
<li><code>git branch -r</code>查看远程分支</li>
<li><code>git branch -a</code>查看所有分支</li>
<li><code>git checkout 分支名称</code> 切换分支</li>
<li><code>git checkout -b 分支名称</code> 创建并切换分支</li>
<li><code>git branch -d 分支名称</code> 删除本地分支</li>
<li><code>git push origin --delete</code> 删除远程分支</li>
<li><code>git merge 来源分支</code> 合并分支</li>
<li><code>git stash</code> 保存当前版本状态</li>
<li><code>git stash pop</code>恢复保存的版本状态</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;github使用&quot;&gt;&lt;a href=&quot;#github使用&quot; class=&quot;headerlink&quot; title=&quot;github使用&quot;&gt;&lt;/a&gt;github使用&lt;/h1&gt;&lt;h2 id=&quot;本地仓库&quot;&gt;&lt;a href=&quot;#本地仓库&quot; class=&quot;headerlink&quot; 
    
    </summary>
    
      <category term="Git" scheme="http://yoursite.com/categories/Git/"/>
    
    
  </entry>
  
  <entry>
    <title>Git 基本命令</title>
    <link href="http://yoursite.com/2016/03/14/Git%20%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/"/>
    <id>http://yoursite.com/2016/03/14/Git 基本命令/</id>
    <published>2016-03-14T04:39:04.000Z</published>
    <updated>2017-04-12T04:07:35.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Git-基本命令"><a href="#Git-基本命令" class="headerlink" title="Git 基本命令"></a>Git 基本命令</h1><h1 id="一、模块化开发"><a href="#一、模块化开发" class="headerlink" title="一、模块化开发"></a>一、模块化开发</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="comment">//这里会形成一个封闭的空间;</span></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">FOO</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> FB = &#123;&#125;;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="built_in">window</span>.FOO = FOO;</div><div class="line">&#125;)(<span class="built_in">window</span>);<span class="comment">//通过window将接口暴露出去</span></div><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">fb</span>)</span>&#123;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Sky</span>(<span class="params"></span>)</span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    fb.Sky = Sky;</div><div class="line">&#125;)(FB)</div><div class="line"><span class="comment">//这样，通过模块化开发，可以通过FOO.Sky等来调用各种方法。具体可以参考飞翔的小鸟案例；</span></div></pre></td></tr></table></figure>
<h1 id="二、Git"><a href="#二、Git" class="headerlink" title="二、Git"></a>二、Git</h1><h2 id="1-Shell-编程脚本-命令解析器"><a href="#1-Shell-编程脚本-命令解析器" class="headerlink" title="1. Shell 编程脚本 命令解析器"></a>1. Shell 编程脚本 命令解析器</h2><ul>
<li><code>.bat  .sh</code>文件存储的都是一些脚本，命令<h2 id="2-常用的shell命令（bash）"><a href="#2-常用的shell命令（bash）" class="headerlink" title="2. 常用的shell命令（bash）"></a>2. 常用的shell命令（bash）</h2></li>
</ul>
<ol>
<li><code>cd ..</code> 进入上层目录;</li>
<li><code>pwd</code> 查看当前的工作路径；</li>
<li><code>mkdir abc</code> 创建一个新的目录abc;</li>
<li><code>ls</code> list当前目录的所有文件列表</li>
<li><code>ls -a</code>list下的所有文件，包括隐藏文件</li>
<li><code>less</code> 查看文件 等同于 <code>more a.txt</code>;<br> <code>tail a.txt</code>查看文件的结尾内容，可以自己设定显示几行  <code>tail -n 1 a.txt</code></li>
</ol>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">gaonanadeMacBook-Pro:git gaonana$ tail -n 1 a.txt </div><div class="line">hello</div><div class="line">gaonanadeMacBook-Pro:git gaonana$ tail -n 2 a.txt </div><div class="line">abc</div><div class="line">hello</div></pre></td></tr></table></figure>
<ol>
<li><code>touch a.txt</code>创建a文件</li>
<li><code>cat a.txt</code>查看a文件中的内容；</li>
<li><code>echo 写入内容 &gt; a.txt</code> <code>&gt;</code>覆盖操作;<br> <code>&gt;&gt;</code>追加操作</li>
<li><code>ctrl+c</code>或者<code>q</code>直接退出当前运行程序；<h2 id="3-Vi"><a href="#3-Vi" class="headerlink" title="3. Vi"></a>3. Vi</h2>有3种模式：命令模式，编辑模式，底行模式</li>
</ol>
<ul>
<li><code>vi hi.txt</code>打开hi.txt 文件</li>
<li><code>esc</code>不能编辑;</li>
<li><code>shift+:</code>退出编辑格式，<code>wq</code>保存并退出，<code>q</code>不保存直接退出</li>
<li><code>dd</code>在命令模式，直接删除一行<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">这个问题必须现在解决吗</div><div class="line">这个问题目前有几种解决方法</div><div class="line">我有多少成本可以使用</div><div class="line">放开成本限制 有没有更优解</div><div class="line">站在比当前问题高一级的视角配上训练有素的方法,能让人成为更优秀的problem solver</div></pre></td></tr></table></figure>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">技术是一种能力，要产出实际价值；</div><div class="line">站在产品，甚至是业务的角度来思考问题；</div><div class="line">别单飞，和小伙伴一起飞</div></pre></td></tr></table></figure>
<h2 id="4-SSH-加密方式"><a href="#4-SSH-加密方式" class="headerlink" title="4. SSH 加密方式"></a>4. SSH 加密方式</h2><ul>
<li>使用密码登录</li>
<li>使用公钥和私钥登录</li>
</ul>
<ol>
<li>对称加密</li>
<li>非对称加密（公钥加密，私钥解密，私钥加密，公钥解密）<ul>
<li>公钥</li>
<li>私钥</li>
</ul>
</li>
<li>SSH 实现通信过程：SSH root@ 121.0.12.23<ul>
<li>客户端发送请求</li>
<li>服务器接受请求之后，把服务器的公钥发送给客户端</li>
<li>客户端接收到公钥后存储到计算机某个区域；</li>
<li>客户端再次发送登录请求（密码会使用公钥加密）</li>
<li>服务器接到密文后进行解密然后验证是否正确</li>
</ul>
<ul>
<li><code>keygen -t rsa</code>生成自己的的公钥和私钥;</li>
</ul>
</li>
<li>虚拟机：vergrant轻量<h2 id="5-Git-三个重要区域"><a href="#5-Git-三个重要区域" class="headerlink" title="5. Git 三个重要区域"></a>5. Git 三个重要区域</h2></li>
<li>工作目录</li>
<li>暂存区<ul>
<li>工作目录先提交到暂存区，是工作目录和本地仓库的过度区域；</li>
</ul>
</li>
<li>本地仓库（.git directory <repository>）<h2 id="6-Git文件的4种状态"><a href="#6-Git文件的4种状态" class="headerlink" title="6. Git文件的4种状态"></a>6. Git文件的4种状态</h2></repository></li>
<li>未追踪 untracked 工作目录刚创建的文件</li>
<li>已暂存 staged 从工作目录提交到暂存区的文件</li>
<li>已提交 commited 从暂存区提交到本地仓库的文件</li>
<li>已修改 modified 暂存区修改过的文件<h1 id="三、Git命令整理"><a href="#三、Git命令整理" class="headerlink" title="三、Git命令整理"></a>三、Git命令整理</h1></li>
<li>创建一个文件夹 <code>git init</code>,创建一个仓库</li>
<li><code>git config --global user.name &quot;name&quot;</code>和<code>git config --global user.email &quot;email&quot;</code>配置用户信息</li>
<li><code>git status</code>查看git状态信息</li>
<li><code>git add 01-index.html 02-index2.html</code>将为跟踪的目录提交到暂存区,多个文件之间空格隔开；<br> 此时查看<code>git status</code>文件名变绿</li>
<li><code>git rm --cached 01-index.html</code>将已加到暂存区的文件移除到工作目录中；</li>
<li><code>git add -A</code> 或者<code>git add *</code>工作目录全部提交到暂存区</li>
<li><code>git rm --cached *</code>移交到暂存区的文件全部移除</li>
<li><code>git commit -m &#39;描述信息&#39;</code>将暂存区中的内容提交到本地仓库，并描述修改信息</li>
<li><code>git log</code>查看提交的本地仓库记录；</li>
<li><code>git checkout 01.index.html</code>撤销 暂存区文件的修改内容(提交到仓库的文件，然后down下来的文件进行修改后，但发现错误，使用checkout将原来的修改撤销)</li>
</ol>
<ul>
<li><code>git checkout .</code>把当前分枝所做的所有修改都撤销</li>
</ul>
<ol>
<li><code>git reset --hard 想要修改内容前面的&lt;commitId&gt;</code>用本地仓库中的快照覆盖工作目录和暂存区的内容，并且放弃commitId之后的提交；</li>
</ol>
<ul>
<li><code>git reset Head</code>本地仓库的最新版本覆盖暂存区,但不覆盖工作目录;</li>
</ul>
<ol>
<li><code>git config list</code>查看当前git的配置信息</li>
</ol>
<h3 id="创建分枝命令"><a href="#创建分枝命令" class="headerlink" title="创建分枝命令"></a>创建分枝命令</h3><ol>
<li><code>git branch</code> 查看当前分枝状态</li>
<li><code>git branch abc</code>添加名为abc的分枝</li>
<li><code>git checkout abc</code>将编辑状态切换到分枝abc上</li>
<li><code>git merge abc</code>将分枝信息abc内容同步到主线master上；将分支切换大master上执行的；在master上执行这个命令，将abc分枝合并到master上；</li>
<li><code>git branch -d 分枝名称</code>删除分枝</li>
<li>常用的创建分支代码:<code>git checkout -b bcd</code>创建并切换分支，相当于<code>git branch bcd</code>和<code>git checkout bcd</code>命令的集合；</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Git-基本命令&quot;&gt;&lt;a href=&quot;#Git-基本命令&quot; class=&quot;headerlink&quot; title=&quot;Git 基本命令&quot;&gt;&lt;/a&gt;Git 基本命令&lt;/h1&gt;&lt;h1 id=&quot;一、模块化开发&quot;&gt;&lt;a href=&quot;#一、模块化开发&quot; class=&quot;header
    
    </summary>
    
      <category term="Git" scheme="http://yoursite.com/categories/Git/"/>
    
    
  </entry>
  
</feed>
